{"head":{"layout":"Post","comments":true,"date":"2016-04-19","title":"Déploiement continu avec Travis-CI (et GitHub Pages)","tags":["ci","tests","travis-ci"],"authors":["MoOx"],"reviewers":["magsout","lionelB","Macxim"],"header":{"linearGradient":"160deg, rgba(204, 51, 51, .8), rgba(204, 51, 51, .4)","image":"https://farm8.staticflickr.com/7279/7408451314_e0c3faeaaa_z.jpg","credit":"https://www.flickr.com/photos/jurvetson/7408451314"},"description":"On va partir comme ça : on a un projet sur git et tous les commits dans la branche master provoqueront une mise en production automatique…"},"body":"<p>On va partir comme ça : on a un projet sur git et tous les commits dans la\nbranche <code>master</code> provoqueront une mise en production automatique une fois les\ntests validés.</p>\n<p>Les autres commits sur les autres branches et pull/merge requests joueront juste\nles tests pour notifier l'état. Quand même.</p>\n<h2 id=\"cest-qui-travis\"><a href=\"#cest-qui-travis\"></a>C'est qui Travis?</h2>\n<p><a href=\"https://travis-ci.com/\">Travis-CI</a> est un service en ligne qui permet de tester\net déployer ses applications de manière automatisée.</p>\n<p>Ce service payant propose une solution gratuite à tous les projets open source,\nce qui est assez cool. Cette version est disponible sur\n<a href=\"https://travis-ci.org/\">travis-ci.org</a>.\nIl existe bien entendu plein d'autres services similaires, mais Travis-CI étant\ntrès répandu dans la communauté open source, on le prendra pour notre exemple.</p>\n<h2 id=\"configuration-de-travis-ci\"><a href=\"#configuration-de-travis-ci\"></a>Configuration de Travis-CI</h2>\n<p>Travis-CI fonctionne avec un fichier de configuration assez simple. Il n'y a\nqu'à voir <a href=\"https://github.com/putaindecode/putaindecode.io/blob/master/.travis.yml\">le\nnôtre</a>.</p>\n<p>Voici ci-dessous une version minimale pour faire tourner un projet node par\nexemple :</p>\n<pre><code class=\"language-yml\">language: node_js\n</code></pre>\n<p>Oui, c'est tout. Selon le language et/ou les fichiers présents,\nTravis-CI va choisir la commande de test par défaut.\nAvec node par exemple, ce sera <code>npm test</code> si un package.json est présent.\nSi un <a href=\"/fr/articles/make/\">Makefile</a> est de la partie, Travis-CI va exécuter\n<code>make test</code>.</p>\n<p>Voici un fichier plus complet avec quelques exemples et trucs bons à savoir.</p>\n<pre><code class=\"language-yml\">language: node_js\n\nnode_js:\n  - '5'\n  - ‘4’\n\n# échoue dès qu'une erreur intervient\nmatrix:\n  fast_finish: true\n\n# met en cache node_modules, à noter que dans ce genre d’utilisation pour des\n# bibliothèques open source consommées via npm, il ne faudra pas oublier\n# npm prune utilisé ci-après, histoire de ne pas lancer des tests avec\n# des paquets encore en cache mais non présents dans le package.json\ncache:\n  directories:\n    - node_modules\n\nbefore_install:\n  - npm prune\n\n# ici on peut mettre des commandes à utiliser avec le script\nbefore_script:\n  # certains runners comme karma, testem ou testling peuvent avoir\n  # besoin d'un écran pour fonctionner, voici l'astuce :)\n  - export DISPLAY=:99.0\n  - sh -e /etc/init.d/xvfb start\n\n# si on veut utiliser autre chose que la commande par défaut\nscript: npm run test-with-coverage\n\n# voici un exemple de ce que l’on peut faire après les tests :\n# on peut lancer une tâche qui va envoyer les informations de\n# pourcentage de couverture de code à un service tiers.\n# (eg: http://coveralls.io/, https://codecov.io/)\nafter_success: 'npm run coverage'\n\n# partie intéressante : ici on ne va déployer que les commits sur la\n# branche master uniquement pour une version de node\n# (car sinon on déploierait plusieurs fois…)\ndeploy:\n  skip_cleanup: true\n  provider: script\n  script: ./scripts/deploy.sh\n  on:\n    branch: master\n    node: '5'\n\n# variables d'env\nenv:\n  global:\n    - NODE_ENV=production\n</code></pre>\n<h2 id=\"exemple-concret\"><a href=\"#exemple-concret\"></a>Exemple concret</h2>\n<p>On va prendre un petit projet simple en JavaScript qu’on va déployer sur GitHub\nPages.\nIl va donc nous falloir un token GitHub qu’on va encrypter via un utilitaire\nspécifique afin de ne pas publier cela à la vue de tous.</p>\n<h3 id=\"générer-un-token-github-encrypté-sur-travis-ci\"><a href=\"#g%C3%A9n%C3%A9rer-un-token-github-encrypt%C3%A9-sur-travis-ci\"></a>Générer un token GitHub encrypté sur Travis-CI</h3>\n<p>Le plus simple est d’utiliser l'interface GitHub pour <a href=\"https://github.com/settings/tokens/new\">ajouter un\ntoken</a>.</p>\n<h4 id=\"encryption-du-token\"><a href=\"#encryption-du-token\"></a>Encryption du token</h4>\n<p>Maintenant, nous allons encrypter ce token. Vous avez 2 possibilités :</p>\n<ul>\n<li>soit installer le paquet node <code>travis-encrypt</code></li>\n<li>soit installer la gem ruby <code>travis</code> (qui embarque la commande <code>encrypt</code>)</li>\n</ul>\n<h5 id=\"via-la-gem-ruby-travis\"><a href=\"#via-la-gem-ruby-travis\"></a>Via la gem Ruby <code>travis</code></h5>\n<pre><code class=\"language-console\">$ sudo gem install travis\n$ travis encrypt --add --repo {YOU/YOUR_REPO} GH_TOKEN={YOUR_TOKEN}\n</code></pre>\n<h5 id=\"via-le-paquet-node-travis-encrypt\"><a href=\"#via-le-paquet-node-travis-encrypt\"></a>Via le paquet Node <code>travis-encrypt</code></h5>\n<pre><code class=\"language-bash\">$ npm i -g travis-encrypt\n$ travis-encrypt --add --repo {YOU/YOUR_REPO} GH_TOKEN={YOUR_TOKEN}\n</code></pre>\n<p>Les 2 commandes devraient ajouter automatiquement le token encrypté dans votre\n<code>.travis.yml</code> dans la section <code>env.global</code>.</p>\n<pre><code class=\"language-yml\"># …\n\nenv:\n  global:\n    - NODE_ENV=production\n    # Ajouter un petit commentaire pour indiquer que c’est votre token GitHub\n    # GITHUB_TOKEN\n    # cela permettra, si vous avez d’autres variables encryptées et\n    # que vous devez changer de token pour X raison(s), de savoir lequel\n    # supprimer\n    - secure: vqhHD....ROxGPQo= # VOTRE TOKEN DOIT ETRE PAR LA\n\n    # ici vous pouvez définir en plus d'autres variables non encryptées\n    # qui seront réutilsables par la suite\n</code></pre>\n<h3 id=\"utilisation-du-token-encrypté\"><a href=\"#utilisation-du-token-encrypt%C3%A9\"></a>Utilisation du token encrypté</h3>\n<h4 id=\"utilisation-dans-un-script\"><a href=\"#utilisation-dans-un-script\"></a>Utilisation dans un script</h4>\n<p>Imaginons que vous ayez un projet à deployer sur GitHub Pages (exemple : vous\ngénérez un site statique avec <a href=\"https://phenomic.io/\">Phenomic</a>, le générateur\nde site statique qu'on utilise).\nVous allez devoir générer votre projet, puis ensuite pousser le dossier généré\nsur votre branche <code>gh-pages</code>.</p>\n<h4 id=\"utiliser-la-tâche-de-déploiement-seulement-si-nécessaire\"><a href=\"#utiliser-la-t%C3%A2che-de-d%C3%A9ploiement-seulement-si-n%C3%A9cessaire\"></a>Utiliser la tâche de déploiement seulement si nécessaire</h4>\n<p>Travis-CI possède une étape qui s'exécute après le succès des tests afin de\npouvoir faire un deploiement.</p>\n<p><a href=\"https://docs.travis-ci.com/user/deployment/\">https://docs.travis-ci.com/user/deployment/</a></p>\n<p>Dans notre cas, on va choisir un provider très simple : un script bash.</p>\n<p><strong>Par défaut, ceci sera executé pour tous les commits, sur toutes les\nbranches.</strong></p>\n<p>On va donc devoir ajuster un peu le tir, car par exemple les commits sur\n<code>gh-pages</code> ne doivent rien faire (déjà pour éviter la boucle infinie).\nIl en sera de même pour les commits sur d'autres branches de travail ainsi que\nles pull/merge requests, comme on l’a vu dans le précédent exemple.</p>\n<pre><code class=\"language-yml\">deploy:\n\n  # très important, on garde notre build, sans ça, nos fichiers buildés\n  # sont supprimés.\n  skip_cleanup: true\n\n  provider: script\n  script: ./scripts/deploy.sh\n\n  # ici on pose notre restriction\n  on:\n    branch: master\n    node: '5'\n</code></pre>\n<h4 id=\"Écrire-notre-fameux-scriptsdeploysh\"><a href=\"#%C3%89crire-notre-fameux-scriptsdeploysh\"></a>Écrire notre fameux <code>scripts/deploy.sh</code></h4>\n<p>Dans le cas d’un déploiement de dossier sur une branche <code>gh-pages</code>, on peut\nfaire de manière assez simple avec le script suivant :</p>\n<pre><code class=\"language-sh\">#!/usr/bin/env bash\n\n# on lit GIT_DEPLOY_REPO ou si y‘a pas on tente le package.json repository field\n# (il faut une string et pas un objet dans ce cas)\nGIT_DEPLOY_REPO=${GIT_DEPLOY_REPO:-$(node -e\n'process.stdout.write(require(\"./package.json\").repository)')}\n\n# on se déplace dans le dossier de build\ncd dist &#x26;&#x26; \\\n# on repart sur un repo git vierge, pas besoin de versionner quelque chose qui\n# se build\n$(npm bin)/rimraf .git\ngit init &#x26;&#x26; \\\n# il faut quelques infos pour que git soit content\ngit config user.name \"Travis CI\" &#x26;&#x26; \\\ngit config user.email \"github@travis-ci.org\" &#x26;&#x26; \\\n# on met tout dans git et on commit\ngit add . &#x26;&#x26; \\\ngit commit -m \"Deploy to GitHub Pages\" &#x26;&#x26; \\\n# puis on force push sur gh-pages\ngit push --force \"${GIT_DEPLOY_REPO}\" master:gh-pages\n</code></pre>\n<h2 id=\"ya-plus-quà-\"><a href=\"#ya-plus-qu%C3%A0-\"></a>Y'a plus qu'à !</h2>\n<p>Et voilà ! On pousse un commit sur <code>master</code> et la magie devrait opérer !</p>\n<p><em>Note : pour commiter sans déclencher un build sur Travis-CI, il suffit d'ajouter\n<code>[ci skip]</code> dans votre message de commit. Pratique quand on modifie juste un\nREADME par exemple.</em></p>\n<p>Cette méthode est celle que nous utilisons pour générer et deployer notre site\nstatique. Et cela permet, par exemple, si quelqu'un corrige une typo depuis\nl'interface en ligne de GitHub, de n'avoir rien d'autre à faire que de « merger »\nla correction\n(et pour rappel : vous pouvez <strong>modifier</strong> n'importe quel article via le lien\nsitué plus bas).</p>\n<p>Travis exécutera nos tests, génèrera notre site si les tests sont bons et mettra\nça en production. Les mises en prod' le vendredi à 19 h 45 ? Même pas peur.</p>\n","rawBody":"\nOn va partir comme ça : on a un projet sur git et tous les commits dans la\nbranche `master` provoqueront une mise en production automatique une fois les\ntests validés.\n\nLes autres commits sur les autres branches et pull/merge requests joueront juste\nles tests pour notifier l'état. Quand même.\n\n## C'est qui Travis?\n\n[Travis-CI](https://travis-ci.com/) est un service en ligne qui permet de tester\net déployer ses applications de manière automatisée.\n\nCe service payant propose une solution gratuite à tous les projets open source,\nce qui est assez cool. Cette version est disponible sur\n[travis-ci.org](https://travis-ci.org/).\nIl existe bien entendu plein d'autres services similaires, mais Travis-CI étant\ntrès répandu dans la communauté open source, on le prendra pour notre exemple.\n\n## Configuration de Travis-CI\n\nTravis-CI fonctionne avec un fichier de configuration assez simple. Il n'y a\nqu'à voir [le\nnôtre](https://github.com/putaindecode/putaindecode.io/blob/master/.travis.yml).\n\nVoici ci-dessous une version minimale pour faire tourner un projet node par\nexemple :\n\n```yml\nlanguage: node_js\n```\n\nOui, c'est tout. Selon le language et/ou les fichiers présents,\nTravis-CI va choisir la commande de test par défaut.\nAvec node par exemple, ce sera `npm test` si un package.json est présent.\nSi un [Makefile](/fr/articles/make/) est de la partie, Travis-CI va exécuter\n`make test`.\n\nVoici un fichier plus complet avec quelques exemples et trucs bons à savoir.\n\n```yml\nlanguage: node_js\n\nnode_js:\n  - '5'\n  - ‘4’\n\n# échoue dès qu'une erreur intervient\nmatrix:\n  fast_finish: true\n\n# met en cache node_modules, à noter que dans ce genre d’utilisation pour des\n# bibliothèques open source consommées via npm, il ne faudra pas oublier\n# npm prune utilisé ci-après, histoire de ne pas lancer des tests avec\n# des paquets encore en cache mais non présents dans le package.json\ncache:\n  directories:\n    - node_modules\n\nbefore_install:\n  - npm prune\n\n# ici on peut mettre des commandes à utiliser avec le script\nbefore_script:\n  # certains runners comme karma, testem ou testling peuvent avoir\n  # besoin d'un écran pour fonctionner, voici l'astuce :)\n  - export DISPLAY=:99.0\n  - sh -e /etc/init.d/xvfb start\n\n# si on veut utiliser autre chose que la commande par défaut\nscript: npm run test-with-coverage\n\n# voici un exemple de ce que l’on peut faire après les tests :\n# on peut lancer une tâche qui va envoyer les informations de\n# pourcentage de couverture de code à un service tiers.\n# (eg: http://coveralls.io/, https://codecov.io/)\nafter_success: 'npm run coverage'\n\n# partie intéressante : ici on ne va déployer que les commits sur la\n# branche master uniquement pour une version de node\n# (car sinon on déploierait plusieurs fois…)\ndeploy:\n  skip_cleanup: true\n  provider: script\n  script: ./scripts/deploy.sh\n  on:\n    branch: master\n    node: '5'\n\n# variables d'env\nenv:\n  global:\n    - NODE_ENV=production\n```\n\n## Exemple concret\n\nOn va prendre un petit projet simple en JavaScript qu’on va déployer sur GitHub\nPages.\nIl va donc nous falloir un token GitHub qu’on va encrypter via un utilitaire\nspécifique afin de ne pas publier cela à la vue de tous.\n\n### Générer un token GitHub encrypté sur Travis-CI\n\nLe plus simple est d’utiliser l'interface GitHub pour [ajouter un\ntoken](https://github.com/settings/tokens/new).\n\n#### Encryption du token\n\nMaintenant, nous allons encrypter ce token. Vous avez 2 possibilités :\n\n- soit installer le paquet node `travis-encrypt`\n- soit installer la gem ruby `travis` (qui embarque la commande `encrypt`)\n\n##### Via la gem Ruby `travis`\n\n```console\n$ sudo gem install travis\n$ travis encrypt --add --repo {YOU/YOUR_REPO} GH_TOKEN={YOUR_TOKEN}\n```\n\n##### Via le paquet Node `travis-encrypt`\n\n```bash\n$ npm i -g travis-encrypt\n$ travis-encrypt --add --repo {YOU/YOUR_REPO} GH_TOKEN={YOUR_TOKEN}\n```\n\nLes 2 commandes devraient ajouter automatiquement le token encrypté dans votre\n`.travis.yml` dans la section `env.global`.\n\n```yml\n# …\n\nenv:\n  global:\n    - NODE_ENV=production\n    # Ajouter un petit commentaire pour indiquer que c’est votre token GitHub\n    # GITHUB_TOKEN\n    # cela permettra, si vous avez d’autres variables encryptées et\n    # que vous devez changer de token pour X raison(s), de savoir lequel\n    # supprimer\n    - secure: vqhHD....ROxGPQo= # VOTRE TOKEN DOIT ETRE PAR LA\n\n    # ici vous pouvez définir en plus d'autres variables non encryptées\n    # qui seront réutilsables par la suite\n```\n\n### Utilisation du token encrypté\n\n#### Utilisation dans un script\n\nImaginons que vous ayez un projet à deployer sur GitHub Pages (exemple : vous\ngénérez un site statique avec [Phenomic](https://phenomic.io/), le générateur\nde site statique qu'on utilise).\nVous allez devoir générer votre projet, puis ensuite pousser le dossier généré\nsur votre branche `gh-pages`.\n\n#### Utiliser la tâche de déploiement seulement si nécessaire\n\nTravis-CI possède une étape qui s'exécute après le succès des tests afin de\npouvoir faire un deploiement.\n\nhttps://docs.travis-ci.com/user/deployment/\n\nDans notre cas, on va choisir un provider très simple : un script bash.\n\n**Par défaut, ceci sera executé pour tous les commits, sur toutes les\nbranches.**\n\nOn va donc devoir ajuster un peu le tir, car par exemple les commits sur\n`gh-pages` ne doivent rien faire (déjà pour éviter la boucle infinie).\nIl en sera de même pour les commits sur d'autres branches de travail ainsi que\nles pull/merge requests, comme on l’a vu dans le précédent exemple.\n\n```yml\ndeploy:\n\n  # très important, on garde notre build, sans ça, nos fichiers buildés\n  # sont supprimés.\n  skip_cleanup: true\n\n  provider: script\n  script: ./scripts/deploy.sh\n\n  # ici on pose notre restriction\n  on:\n    branch: master\n    node: '5'\n```\n\n#### Écrire notre fameux `scripts/deploy.sh`\n\nDans le cas d’un déploiement de dossier sur une branche `gh-pages`, on peut\nfaire de manière assez simple avec le script suivant :\n\n```sh\n#!/usr/bin/env bash\n\n# on lit GIT_DEPLOY_REPO ou si y‘a pas on tente le package.json repository field\n# (il faut une string et pas un objet dans ce cas)\nGIT_DEPLOY_REPO=${GIT_DEPLOY_REPO:-$(node -e\n'process.stdout.write(require(\"./package.json\").repository)')}\n\n# on se déplace dans le dossier de build\ncd dist && \\\n# on repart sur un repo git vierge, pas besoin de versionner quelque chose qui\n# se build\n$(npm bin)/rimraf .git\ngit init && \\\n# il faut quelques infos pour que git soit content\ngit config user.name \"Travis CI\" && \\\ngit config user.email \"github@travis-ci.org\" && \\\n# on met tout dans git et on commit\ngit add . && \\\ngit commit -m \"Deploy to GitHub Pages\" && \\\n# puis on force push sur gh-pages\ngit push --force \"${GIT_DEPLOY_REPO}\" master:gh-pages\n```\n\n## Y'a plus qu'à !\n\nEt voilà ! On pousse un commit sur `master` et la magie devrait opérer !\n\n_Note : pour commiter sans déclencher un build sur Travis-CI, il suffit d'ajouter\n`[ci skip]` dans votre message de commit. Pratique quand on modifie juste un\nREADME par exemple._\n\nCette méthode est celle que nous utilisons pour générer et deployer notre site\nstatique. Et cela permet, par exemple, si quelqu'un corrige une typo depuis\nl'interface en ligne de GitHub, de n'avoir rien d'autre à faire que de « merger »\nla correction\n(et pour rappel : vous pouvez **modifier** n'importe quel article via le lien\nsitué plus bas).\n\nTravis exécutera nos tests, génèrera notre site si les tests sont bons et mettra\nça en production. Les mises en prod' le vendredi à 19 h 45 ? Même pas peur.\n","raw":"---\ndate: \"2016-04-19\"\ntitle: Déploiement continu avec Travis-CI (et GitHub Pages)\ntags:\n  - ci\n  - tests\n  - travis-ci\nauthors:\n  - MoOx\nreviewers:\n  - magsout\n  - lionelB\n  - Macxim\nheader:\n  linearGradient: 160deg, rgba(204, 51, 51, .8), rgba(204, 51, 51, .4)\n  image: https://farm8.staticflickr.com/7279/7408451314_e0c3faeaaa_z.jpg\n  credit: https://www.flickr.com/photos/jurvetson/7408451314\n---\n\nOn va partir comme ça : on a un projet sur git et tous les commits dans la\nbranche `master` provoqueront une mise en production automatique une fois les\ntests validés.\n\nLes autres commits sur les autres branches et pull/merge requests joueront juste\nles tests pour notifier l'état. Quand même.\n\n## C'est qui Travis?\n\n[Travis-CI](https://travis-ci.com/) est un service en ligne qui permet de tester\net déployer ses applications de manière automatisée.\n\nCe service payant propose une solution gratuite à tous les projets open source,\nce qui est assez cool. Cette version est disponible sur\n[travis-ci.org](https://travis-ci.org/).\nIl existe bien entendu plein d'autres services similaires, mais Travis-CI étant\ntrès répandu dans la communauté open source, on le prendra pour notre exemple.\n\n## Configuration de Travis-CI\n\nTravis-CI fonctionne avec un fichier de configuration assez simple. Il n'y a\nqu'à voir [le\nnôtre](https://github.com/putaindecode/putaindecode.io/blob/master/.travis.yml).\n\nVoici ci-dessous une version minimale pour faire tourner un projet node par\nexemple :\n\n```yml\nlanguage: node_js\n```\n\nOui, c'est tout. Selon le language et/ou les fichiers présents,\nTravis-CI va choisir la commande de test par défaut.\nAvec node par exemple, ce sera `npm test` si un package.json est présent.\nSi un [Makefile](/fr/articles/make/) est de la partie, Travis-CI va exécuter\n`make test`.\n\nVoici un fichier plus complet avec quelques exemples et trucs bons à savoir.\n\n```yml\nlanguage: node_js\n\nnode_js:\n  - '5'\n  - ‘4’\n\n# échoue dès qu'une erreur intervient\nmatrix:\n  fast_finish: true\n\n# met en cache node_modules, à noter que dans ce genre d’utilisation pour des\n# bibliothèques open source consommées via npm, il ne faudra pas oublier\n# npm prune utilisé ci-après, histoire de ne pas lancer des tests avec\n# des paquets encore en cache mais non présents dans le package.json\ncache:\n  directories:\n    - node_modules\n\nbefore_install:\n  - npm prune\n\n# ici on peut mettre des commandes à utiliser avec le script\nbefore_script:\n  # certains runners comme karma, testem ou testling peuvent avoir\n  # besoin d'un écran pour fonctionner, voici l'astuce :)\n  - export DISPLAY=:99.0\n  - sh -e /etc/init.d/xvfb start\n\n# si on veut utiliser autre chose que la commande par défaut\nscript: npm run test-with-coverage\n\n# voici un exemple de ce que l’on peut faire après les tests :\n# on peut lancer une tâche qui va envoyer les informations de\n# pourcentage de couverture de code à un service tiers.\n# (eg: http://coveralls.io/, https://codecov.io/)\nafter_success: 'npm run coverage'\n\n# partie intéressante : ici on ne va déployer que les commits sur la\n# branche master uniquement pour une version de node\n# (car sinon on déploierait plusieurs fois…)\ndeploy:\n  skip_cleanup: true\n  provider: script\n  script: ./scripts/deploy.sh\n  on:\n    branch: master\n    node: '5'\n\n# variables d'env\nenv:\n  global:\n    - NODE_ENV=production\n```\n\n## Exemple concret\n\nOn va prendre un petit projet simple en JavaScript qu’on va déployer sur GitHub\nPages.\nIl va donc nous falloir un token GitHub qu’on va encrypter via un utilitaire\nspécifique afin de ne pas publier cela à la vue de tous.\n\n### Générer un token GitHub encrypté sur Travis-CI\n\nLe plus simple est d’utiliser l'interface GitHub pour [ajouter un\ntoken](https://github.com/settings/tokens/new).\n\n#### Encryption du token\n\nMaintenant, nous allons encrypter ce token. Vous avez 2 possibilités :\n\n- soit installer le paquet node `travis-encrypt`\n- soit installer la gem ruby `travis` (qui embarque la commande `encrypt`)\n\n##### Via la gem Ruby `travis`\n\n```console\n$ sudo gem install travis\n$ travis encrypt --add --repo {YOU/YOUR_REPO} GH_TOKEN={YOUR_TOKEN}\n```\n\n##### Via le paquet Node `travis-encrypt`\n\n```bash\n$ npm i -g travis-encrypt\n$ travis-encrypt --add --repo {YOU/YOUR_REPO} GH_TOKEN={YOUR_TOKEN}\n```\n\nLes 2 commandes devraient ajouter automatiquement le token encrypté dans votre\n`.travis.yml` dans la section `env.global`.\n\n```yml\n# …\n\nenv:\n  global:\n    - NODE_ENV=production\n    # Ajouter un petit commentaire pour indiquer que c’est votre token GitHub\n    # GITHUB_TOKEN\n    # cela permettra, si vous avez d’autres variables encryptées et\n    # que vous devez changer de token pour X raison(s), de savoir lequel\n    # supprimer\n    - secure: vqhHD....ROxGPQo= # VOTRE TOKEN DOIT ETRE PAR LA\n\n    # ici vous pouvez définir en plus d'autres variables non encryptées\n    # qui seront réutilsables par la suite\n```\n\n### Utilisation du token encrypté\n\n#### Utilisation dans un script\n\nImaginons que vous ayez un projet à deployer sur GitHub Pages (exemple : vous\ngénérez un site statique avec [Phenomic](https://phenomic.io/), le générateur\nde site statique qu'on utilise).\nVous allez devoir générer votre projet, puis ensuite pousser le dossier généré\nsur votre branche `gh-pages`.\n\n#### Utiliser la tâche de déploiement seulement si nécessaire\n\nTravis-CI possède une étape qui s'exécute après le succès des tests afin de\npouvoir faire un deploiement.\n\nhttps://docs.travis-ci.com/user/deployment/\n\nDans notre cas, on va choisir un provider très simple : un script bash.\n\n**Par défaut, ceci sera executé pour tous les commits, sur toutes les\nbranches.**\n\nOn va donc devoir ajuster un peu le tir, car par exemple les commits sur\n`gh-pages` ne doivent rien faire (déjà pour éviter la boucle infinie).\nIl en sera de même pour les commits sur d'autres branches de travail ainsi que\nles pull/merge requests, comme on l’a vu dans le précédent exemple.\n\n```yml\ndeploy:\n\n  # très important, on garde notre build, sans ça, nos fichiers buildés\n  # sont supprimés.\n  skip_cleanup: true\n\n  provider: script\n  script: ./scripts/deploy.sh\n\n  # ici on pose notre restriction\n  on:\n    branch: master\n    node: '5'\n```\n\n#### Écrire notre fameux `scripts/deploy.sh`\n\nDans le cas d’un déploiement de dossier sur une branche `gh-pages`, on peut\nfaire de manière assez simple avec le script suivant :\n\n```sh\n#!/usr/bin/env bash\n\n# on lit GIT_DEPLOY_REPO ou si y‘a pas on tente le package.json repository field\n# (il faut une string et pas un objet dans ce cas)\nGIT_DEPLOY_REPO=${GIT_DEPLOY_REPO:-$(node -e\n'process.stdout.write(require(\"./package.json\").repository)')}\n\n# on se déplace dans le dossier de build\ncd dist && \\\n# on repart sur un repo git vierge, pas besoin de versionner quelque chose qui\n# se build\n$(npm bin)/rimraf .git\ngit init && \\\n# il faut quelques infos pour que git soit content\ngit config user.name \"Travis CI\" && \\\ngit config user.email \"github@travis-ci.org\" && \\\n# on met tout dans git et on commit\ngit add . && \\\ngit commit -m \"Deploy to GitHub Pages\" && \\\n# puis on force push sur gh-pages\ngit push --force \"${GIT_DEPLOY_REPO}\" master:gh-pages\n```\n\n## Y'a plus qu'à !\n\nEt voilà ! On pousse un commit sur `master` et la magie devrait opérer !\n\n_Note : pour commiter sans déclencher un build sur Travis-CI, il suffit d'ajouter\n`[ci skip]` dans votre message de commit. Pratique quand on modifie juste un\nREADME par exemple._\n\nCette méthode est celle que nous utilisons pour générer et deployer notre site\nstatique. Et cela permet, par exemple, si quelqu'un corrige une typo depuis\nl'interface en ligne de GitHub, de n'avoir rien d'autre à faire que de « merger »\nla correction\n(et pour rappel : vous pouvez **modifier** n'importe quel article via le lien\nsitué plus bas).\n\nTravis exécutera nos tests, génèrera notre site si les tests sont bons et mettra\nça en production. Les mises en prod' le vendredi à 19 h 45 ? Même pas peur.\n","__filename":"fr/articles/ci/travis-ci/index.md","__url":"/fr/articles/ci/travis-ci/","__resourceUrl":"/fr/articles/ci/travis-ci/index.html","__dataUrl":"/fr/articles/ci/travis-ci/index.html.57cff09c8414010882ffa5e90cc15da4.json"}