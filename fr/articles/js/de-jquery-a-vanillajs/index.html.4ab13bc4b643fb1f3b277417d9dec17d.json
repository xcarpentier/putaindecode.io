{"head":{"layout":"Post","comments":true,"date":"2013-12-05","title":"De jQuery à Vanilla JS","tags":["javascript","jquery","vanillajs"],"authors":["kud"],"header":{"image":"jquery-die.jpg","linearGradient":"160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)"},"description":"Oui alors jQuery, c'est sûrement très bien, ça simplifie pas mal de choses et le chaining est intéressant mais eeeest-ce que vous connaissez…"},"body":"<p>Oui alors jQuery, c'est sûrement très bien, ça simplifie pas mal de choses et le <em>chaining</em> est intéressant mais eeeest-ce que vous connaissez l'équivalent en <em>pur</em> JavaScript ? Pas sûr hein.</p>\n<p>Ce petit article vous propose de quoi peut-être vous faire changer d'avis sur la bibliothèque qui pèse tout de même environ ~80ko.</p>\n<p><em>Note : <a href=\"http://vanilla-js.com/\">Vanilla JS</a> n'est pas un framework mais veut simplement dire \"à nu\", c'est du JavaScript sans bibliothèque.</em></p>\n<p>C'est parti !</p>\n<h2 id=\"table-des-matières\"><a href=\"#table-des-mati%C3%A8res\"></a>Table des matières</h2>\n<ol>\n<li><a href=\"#-v-nements\">Évènements</a></li>\n<li><a href=\"#s-lecteurs\">Sélecteurs</a></li>\n<li><a href=\"#attributs\">Attributs</a></li>\n<li><a href=\"#classes\">Classes</a></li>\n<li><a href=\"#manipulation\">Manipulation</a></li>\n<li><a href=\"#navigation\">Navigation</a></li>\n<li><a href=\"#ajax\">AJAX</a></li>\n<li><a href=\"#jsonp\">JSONP</a></li>\n</ol>\n<h2 id=\"Évènements\"><a href=\"#%C3%89v%C3%A8nements\"></a>Évènements</h2>\n<pre><code class=\"language-javascript\">// jQuery\n$(document).ready(function() {\n  // code\n})\n\n// Vanilla\ndocument.addEventListener('DOMContentLoaded', function() {\n  // code\n})\n</code></pre>\n<pre><code class=\"language-javascript\">// jQuery\n$('a').click(function() {\n  // code…\n})\n\n// Vanilla\n[].forEach.call(document.querySelectorAll('a'), function(el) {\n  el.addEventListener('click', function() {\n    // code…\n  })\n})\n</code></pre>\n<h2 id=\"sélecteurs\"><a href=\"#s%C3%A9lecteurs\"></a>Sélecteurs</h2>\n<pre><code class=\"language-javascript\">// jQuery\nvar divs = $('div')\n\n// Vanilla\nvar divs = document.querySelectorAll('div')\n</code></pre>\n<pre><code class=\"language-javascript\">// jQuery\nvar newDiv = $('&#x3C;div/>')\n\n// Vanilla\nvar newDiv = document.createElement('div')\n</code></pre>\n<h2 id=\"attributs\"><a href=\"#attributs\"></a>Attributs</h2>\n<pre><code class=\"language-javascript\">// jQuery\n$('img').filter(':first').attr('alt', 'My image')\n\n// Vanilla\ndocument.querySelector('img').setAttribute('alt', 'My image')\n</code></pre>\n<h2 id=\"classes\"><a href=\"#classes\"></a>Classes</h2>\n<pre><code class=\"language-javascript\">// jQuery\nnewDiv.addClass('foo')\n\n// Vanilla\nnewDiv.classList.add('foo')\n</code></pre>\n<pre><code class=\"language-javascript\">// jQuery\nnewDiv.toggleClass('foo')\n\n// Vanilla\nnewDiv.classList.toggle('foo')\n</code></pre>\n<h2 id=\"manipulation\"><a href=\"#manipulation\"></a>Manipulation</h2>\n<pre><code class=\"language-javascript\">// jQuery\n$('body').append($('&#x3C;p/>'))\n\n// Vanilla\ndocument.body.appendChild(document.createElement('p'))\n</code></pre>\n<pre><code class=\"language-javascript\">// jQuery\nvar clonedElement = $('#about').clone()\n\n// Vanilla\nvar clonedElement = document.getElementById('about').cloneNode(true)\n</code></pre>\n<pre><code class=\"language-javascript\">// jQuery\n$('#wrap').empty()\n\n// Vanilla\nvar wrap = document.getElementById('wrap')\nwhile(wrap.firstChild) wrap.removeChild(wrap.firstChild)\n</code></pre>\n<h2 id=\"navigation\"><a href=\"#navigation\"></a>Navigation</h2>\n<pre><code class=\"language-javascript\">// jQuery\nvar parent = $('#about').parent()\n\n// Vanilla\nvar parent = document.getElementById('about').parentNode\n</code></pre>\n<pre><code class=\"language-javascript\">// jQuery\nif($('#wrap').is(':empty'))\n\n// Vanilla\nif(!document.getElementById('wrap').hasChildNodes())\n</code></pre>\n<pre><code class=\"language-javascript\">// jQuery\nvar nextElement = $('#wrap').next()\n\n// Vanilla\nvar nextElement = document.getElementById('wrap').nextSibling\n</code></pre>\n<h2 id=\"ajax\"><a href=\"#ajax\"></a>AJAX</h2>\n<h3 id=\"get\"><a href=\"#get\"></a>GET</h3>\n<pre><code class=\"language-javascript\">// jQuery\n$.get('//example.com', function (data) {\n  // code\n})\n\n// Vanilla\nvar httpRequest = new XMLHttpRequest()\nhttpRequest.onreadystatechange = function (data) {\n  // code\n}\nhttpRequest.open('GET', url)\nhttpRequest.send()\n</code></pre>\n<h3 id=\"post\"><a href=\"#post\"></a>POST</h3>\n<pre><code class=\"language-javascript\">// jQuery\n$.post('//example.com', { username: username }, function (data) {\n  // code\n})\n\n// Vanilla\nvar httpRequest = new XMLHttpRequest()\nhttpRequest.onreadystatechange = function (data) {\n  // code\n}\nhttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\nhttpRequest.open('POST', url)\nhttpRequest.send('username=' + encodeURIComponent(username))\n</code></pre>\n<h3 id=\"jsonp\"><a href=\"#jsonp\"></a>JSONP</h3>\n<pre><code class=\"language-javascript\">// jQuery\n$.getJSON('//openexchangerates.org/latest.json?callback=?', function (data) {\n  // code\n})\n\n// Vanilla\nfunction success(data) {\n  // code\n}\nvar scr = document.createElement('script')\nscr.src = '//openexchangerates.org/latest.json?callback=formatCurrency'\ndocument.body.appendChild(scr)\n</code></pre>\n<p>Cela vous parait-il encore difficile de vous passer de jQuery ? :)</p>\n<p>Un grand merci à <a href=\"http://playground.deaxon.com/js/vanilla-js/\">@deaxon</a> qui est à l'origine de cet éclaircissement.</p>\n<h2 id=\"À-creuser\"><a href=\"#%C3%80-creuser\"></a>À creuser</h2>\n<p>Il existe une version minimaliste de jQuery basée sur la même API mais beaucoup plus légère s'appelant <a href=\"http://zeptojs.com/\">Zepto</a>. Il est actuellement utilisé en production sur le site mobile de ma boite.</p>\n","rawBody":"\nOui alors jQuery, c'est sûrement très bien, ça simplifie pas mal de choses et le _chaining_ est intéressant mais eeeest-ce que vous connaissez l'équivalent en _pur_ JavaScript ? Pas sûr hein.\n\nCe petit article vous propose de quoi peut-être vous faire changer d'avis sur la bibliothèque qui pèse tout de même environ ~80ko.\n\n_Note : [Vanilla JS](http://vanilla-js.com/) n'est pas un framework mais veut simplement dire \"à nu\", c'est du JavaScript sans bibliothèque._\n\nC'est parti !\n\n## Table des matières\n\n1. [Évènements](#-v-nements)\n2. [Sélecteurs](#s-lecteurs)\n3. [Attributs](#attributs)\n4. [Classes](#classes)\n5. [Manipulation](#manipulation)\n6. [Navigation](#navigation)\n7. [AJAX](#ajax)\n8. [JSONP](#jsonp)\n\n## Évènements\n\n```javascript\n// jQuery\n$(document).ready(function() {\n  // code\n})\n\n// Vanilla\ndocument.addEventListener('DOMContentLoaded', function() {\n  // code\n})\n```\n\n```javascript\n// jQuery\n$('a').click(function() {\n  // code…\n})\n\n// Vanilla\n[].forEach.call(document.querySelectorAll('a'), function(el) {\n  el.addEventListener('click', function() {\n    // code…\n  })\n})\n```\n\n## Sélecteurs\n\n```javascript\n// jQuery\nvar divs = $('div')\n\n// Vanilla\nvar divs = document.querySelectorAll('div')\n```\n\n```javascript\n// jQuery\nvar newDiv = $('<div/>')\n\n// Vanilla\nvar newDiv = document.createElement('div')\n```\n\n## Attributs\n\n```javascript\n// jQuery\n$('img').filter(':first').attr('alt', 'My image')\n\n// Vanilla\ndocument.querySelector('img').setAttribute('alt', 'My image')\n```\n\n## Classes\n\n```javascript\n// jQuery\nnewDiv.addClass('foo')\n\n// Vanilla\nnewDiv.classList.add('foo')\n```\n\n```javascript\n// jQuery\nnewDiv.toggleClass('foo')\n\n// Vanilla\nnewDiv.classList.toggle('foo')\n```\n\n## Manipulation\n\n```javascript\n// jQuery\n$('body').append($('<p/>'))\n\n// Vanilla\ndocument.body.appendChild(document.createElement('p'))\n```\n\n```javascript\n// jQuery\nvar clonedElement = $('#about').clone()\n\n// Vanilla\nvar clonedElement = document.getElementById('about').cloneNode(true)\n```\n\n```javascript\n// jQuery\n$('#wrap').empty()\n\n// Vanilla\nvar wrap = document.getElementById('wrap')\nwhile(wrap.firstChild) wrap.removeChild(wrap.firstChild)\n```\n\n## Navigation\n\n```javascript\n// jQuery\nvar parent = $('#about').parent()\n\n// Vanilla\nvar parent = document.getElementById('about').parentNode\n```\n\n```javascript\n// jQuery\nif($('#wrap').is(':empty'))\n\n// Vanilla\nif(!document.getElementById('wrap').hasChildNodes())\n```\n\n```javascript\n// jQuery\nvar nextElement = $('#wrap').next()\n\n// Vanilla\nvar nextElement = document.getElementById('wrap').nextSibling\n```\n\n## AJAX\n\n### GET\n```javascript\n// jQuery\n$.get('//example.com', function (data) {\n  // code\n})\n\n// Vanilla\nvar httpRequest = new XMLHttpRequest()\nhttpRequest.onreadystatechange = function (data) {\n  // code\n}\nhttpRequest.open('GET', url)\nhttpRequest.send()\n```\n\n### POST\n```javascript\n// jQuery\n$.post('//example.com', { username: username }, function (data) {\n  // code\n})\n\n// Vanilla\nvar httpRequest = new XMLHttpRequest()\nhttpRequest.onreadystatechange = function (data) {\n  // code\n}\nhttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\nhttpRequest.open('POST', url)\nhttpRequest.send('username=' + encodeURIComponent(username))\n```\n\n### JSONP\n```javascript\n// jQuery\n$.getJSON('//openexchangerates.org/latest.json?callback=?', function (data) {\n  // code\n})\n\n// Vanilla\nfunction success(data) {\n  // code\n}\nvar scr = document.createElement('script')\nscr.src = '//openexchangerates.org/latest.json?callback=formatCurrency'\ndocument.body.appendChild(scr)\n```\n\nCela vous parait-il encore difficile de vous passer de jQuery ? :)\n\nUn grand merci à [@deaxon](http://playground.deaxon.com/js/vanilla-js/) qui est à l'origine de cet éclaircissement.\n\n## À creuser\n\nIl existe une version minimaliste de jQuery basée sur la même API mais beaucoup plus légère s'appelant [Zepto](http://zeptojs.com/). Il est actuellement utilisé en production sur le site mobile de ma boite.\n","raw":"---\ndate: \"2013-12-05\"\ntitle: De jQuery à Vanilla JS\ntags:\n  - javascript\n  - jquery\n  - vanillajs\nauthors:\n  - kud\nheader:\n  image: jquery-die.jpg\n  linearGradient: 160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)\n---\n\nOui alors jQuery, c'est sûrement très bien, ça simplifie pas mal de choses et le _chaining_ est intéressant mais eeeest-ce que vous connaissez l'équivalent en _pur_ JavaScript ? Pas sûr hein.\n\nCe petit article vous propose de quoi peut-être vous faire changer d'avis sur la bibliothèque qui pèse tout de même environ ~80ko.\n\n_Note : [Vanilla JS](http://vanilla-js.com/) n'est pas un framework mais veut simplement dire \"à nu\", c'est du JavaScript sans bibliothèque._\n\nC'est parti !\n\n## Table des matières\n\n1. [Évènements](#-v-nements)\n2. [Sélecteurs](#s-lecteurs)\n3. [Attributs](#attributs)\n4. [Classes](#classes)\n5. [Manipulation](#manipulation)\n6. [Navigation](#navigation)\n7. [AJAX](#ajax)\n8. [JSONP](#jsonp)\n\n## Évènements\n\n```javascript\n// jQuery\n$(document).ready(function() {\n  // code\n})\n\n// Vanilla\ndocument.addEventListener('DOMContentLoaded', function() {\n  // code\n})\n```\n\n```javascript\n// jQuery\n$('a').click(function() {\n  // code…\n})\n\n// Vanilla\n[].forEach.call(document.querySelectorAll('a'), function(el) {\n  el.addEventListener('click', function() {\n    // code…\n  })\n})\n```\n\n## Sélecteurs\n\n```javascript\n// jQuery\nvar divs = $('div')\n\n// Vanilla\nvar divs = document.querySelectorAll('div')\n```\n\n```javascript\n// jQuery\nvar newDiv = $('<div/>')\n\n// Vanilla\nvar newDiv = document.createElement('div')\n```\n\n## Attributs\n\n```javascript\n// jQuery\n$('img').filter(':first').attr('alt', 'My image')\n\n// Vanilla\ndocument.querySelector('img').setAttribute('alt', 'My image')\n```\n\n## Classes\n\n```javascript\n// jQuery\nnewDiv.addClass('foo')\n\n// Vanilla\nnewDiv.classList.add('foo')\n```\n\n```javascript\n// jQuery\nnewDiv.toggleClass('foo')\n\n// Vanilla\nnewDiv.classList.toggle('foo')\n```\n\n## Manipulation\n\n```javascript\n// jQuery\n$('body').append($('<p/>'))\n\n// Vanilla\ndocument.body.appendChild(document.createElement('p'))\n```\n\n```javascript\n// jQuery\nvar clonedElement = $('#about').clone()\n\n// Vanilla\nvar clonedElement = document.getElementById('about').cloneNode(true)\n```\n\n```javascript\n// jQuery\n$('#wrap').empty()\n\n// Vanilla\nvar wrap = document.getElementById('wrap')\nwhile(wrap.firstChild) wrap.removeChild(wrap.firstChild)\n```\n\n## Navigation\n\n```javascript\n// jQuery\nvar parent = $('#about').parent()\n\n// Vanilla\nvar parent = document.getElementById('about').parentNode\n```\n\n```javascript\n// jQuery\nif($('#wrap').is(':empty'))\n\n// Vanilla\nif(!document.getElementById('wrap').hasChildNodes())\n```\n\n```javascript\n// jQuery\nvar nextElement = $('#wrap').next()\n\n// Vanilla\nvar nextElement = document.getElementById('wrap').nextSibling\n```\n\n## AJAX\n\n### GET\n```javascript\n// jQuery\n$.get('//example.com', function (data) {\n  // code\n})\n\n// Vanilla\nvar httpRequest = new XMLHttpRequest()\nhttpRequest.onreadystatechange = function (data) {\n  // code\n}\nhttpRequest.open('GET', url)\nhttpRequest.send()\n```\n\n### POST\n```javascript\n// jQuery\n$.post('//example.com', { username: username }, function (data) {\n  // code\n})\n\n// Vanilla\nvar httpRequest = new XMLHttpRequest()\nhttpRequest.onreadystatechange = function (data) {\n  // code\n}\nhttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\nhttpRequest.open('POST', url)\nhttpRequest.send('username=' + encodeURIComponent(username))\n```\n\n### JSONP\n```javascript\n// jQuery\n$.getJSON('//openexchangerates.org/latest.json?callback=?', function (data) {\n  // code\n})\n\n// Vanilla\nfunction success(data) {\n  // code\n}\nvar scr = document.createElement('script')\nscr.src = '//openexchangerates.org/latest.json?callback=formatCurrency'\ndocument.body.appendChild(scr)\n```\n\nCela vous parait-il encore difficile de vous passer de jQuery ? :)\n\nUn grand merci à [@deaxon](http://playground.deaxon.com/js/vanilla-js/) qui est à l'origine de cet éclaircissement.\n\n## À creuser\n\nIl existe une version minimaliste de jQuery basée sur la même API mais beaucoup plus légère s'appelant [Zepto](http://zeptojs.com/). Il est actuellement utilisé en production sur le site mobile de ma boite.\n","__filename":"fr/articles/js/de-jquery-a-vanillajs/index.md","__url":"/fr/articles/js/de-jquery-a-vanillajs/","__resourceUrl":"/fr/articles/js/de-jquery-a-vanillajs/index.html","__dataUrl":"/fr/articles/js/de-jquery-a-vanillajs/index.html.4ab13bc4b643fb1f3b277417d9dec17d.json"}