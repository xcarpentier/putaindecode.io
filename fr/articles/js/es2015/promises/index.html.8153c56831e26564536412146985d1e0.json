{"head":{"layout":"Post","comments":true,"date":"2015-12-06","title":"ES6, ES2015 : les promesses","tags":["JavaScript","ES6","ES2015","Promise"],"authors":["Uhsac"],"description":"ES2015 apporte une fonctionnalité simplifiant grandement l'asynchrone en JavaScript, les promesses ! Visible depuis longtemps dans…"},"body":"<p>ES2015 apporte une fonctionnalité simplifiant grandement l'asynchrone en\nJavaScript, les promesses ! Visible depuis longtemps dans l'écosystème\nJavaScript grâce a diverses librairies, on peut maintenant utiliser directement\nla spécification officielle.</p>\n<h2 id=\"cest-quoi-une-promesse-\"><a href=\"#cest-quoi-une-promesse-\"></a>C'est quoi une promesse ?</h2>\n<p>Et bien comme son nom l'indique vous pouvez voir ça comme la promesse que vous\nallez recevoir une valeur. Comme toute promesse, elle peut être tenue,\nla valeur est arrivée et on peut s'en servir, ou ne pas l'être, dans ce cas\nune erreur arrive et on peut réagir en conséquence.</p>\n<p>Ce mécanisme permet de remplacer les callbacks d'une manière plus élégante. Au\nrevoir, la suite de callbacks qui rend votre code illisible ! Vous ne me croyez\npas ? Voici un exemple pour vous le prouver :</p>\n<pre><code class=\"language-js\">// En utilisant les callbacks\n// Imaginez que chacune de ces fonctions effectue des tâches asynchrones\n// plus ou moins complexes (requête HTTP, appel à une base de données\n// ou encore lecture de fichier)\nconst functionWithCallback1 = (callback) => callback('test', undefined)\nconst functionWithCallback2 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback3 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback4 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback5 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback6 = (arg, callback) => callback(arg, undefined)\n\nfunctionWithCallback1((result1, err) => {\n  if (err) {\n    throw err\n  }\n  functionWithCallback2(result1, (result2, err) => {\n    if (err) {\n      throw err\n    }\n    functionWithCallback3(result2, (result3, err) => {\n      if (err) {\n        throw err\n      }\n      functionWithCallback4(result3, (result4, err) => {\n        if (err) {\n          throw err\n        }\n        functionWithCallback5(result4, (result5, err) => {\n          if (err) {\n            throw err\n          }\n          functionWithCallback6(result5, (result6, err) => {\n            if (err) {\n              throw err\n            }\n            console.log(`Exemple avec les callback : ${result6}`)\n          })\n        })\n      })\n    })\n  })\n})\n\n// Et maintenant, en utilisant les promesses\nconst functionWithPromise1 = () => Promise.resolve('test')\nconst functionWithPromise2 = (arg) => Promise.resolve(arg)\nconst functionWithPromise3 = (arg) => Promise.resolve(arg)\nconst functionWithPromise4 = (arg) => Promise.resolve(arg)\nconst functionWithPromise5 = (arg) => Promise.resolve(arg)\nconst functionWithPromise6 = (arg) => Promise.resolve(arg)\n\nfunctionWithPromise1()\n  .then(functionWithPromise2)\n  .then(functionWithPromise3)\n  .then(functionWithPromise4)\n  .then(functionWithPromise5)\n  .then(functionWithPromise6)\n  .then(result => console.log(`Exemple avec les promesses : ${result}`))\n  .catch(err => {\n    throw err\n  })\n</code></pre>\n<p>Comme vous pouvez le voir, l'exemple avec les promesses est tout de même plus\nlisible !</p>\n<h2 id=\"trop-bien--comment-je-les-utilise-\"><a href=\"#trop-bien--comment-je-les-utilise-\"></a>Trop bien ! Comment je les utilise ?</h2>\n<p>Une promesse peut avoir plusieurs états au cours de son existence :</p>\n<ul>\n<li>en cours : la valeur qu'elle contient n'est pas encore arrivée</li>\n<li>résolue : la valeur est arrivée, on peut l'utiliser</li>\n<li>rejetée : une erreur est survenue, on peut y réagir</li>\n</ul>\n<p>Une promesse possède 2 fonctions : <code>then</code> et <code>catch</code>, vous pouvez utiliser\n<code>then</code> pour récupérer le resultat ou l'erreur d'une promesse et <code>catch</code> pour\nrécupérer l'erreur d'une ou plusieurs promesses.</p>\n<p>Voyons comment utiliser les promesses à l'aide de la future implémentation de\n<a href=\"https://fetch.spec.whatwg.org\"><code>fetch</code></a>.</p>\n<pre><code class=\"language-js\">// À ce moment, la promesse est en attente\nconst fetchPromise = fetch('http://putaindecode.io')\n\n// Quand la requête est terminée la promesse est résolue avec le résultat de\n// la requête\nconst parsePromise = fetchPromise.then(fetchResult => {\n  // Je peux retourner une nouvelle promesse à partir d'un then, ici\n  // j'appelle .text() qui parse le contenu de la requête et retourne\n  // une promesse\n  return fetchResult.text()\n})\n\n// Quand le parsing est terminé, je peux recuperer son contenu\nparsePromise.then(textResult => {\n  console.log(`Voici le résultat : ${textResult}`)\n})\n\n// Si la requête a un problème, la promesse est rejetée avec une erreur\nfetchPromise.catch(fetchError => {\n  console.log(\"Une erreur a eu lieu pendant la requête\", fetchError)\n})\n\n// S'il y a une erreur pendant le parsing, je peux la récupérer\nparsePromise.catch(parseError => {\n  console.log(\"Une erreur a eu lieu pendant le parsing\", parseError)\n})\n\n// Cela peut aussi être écrit\nfetch('http://putaindecode.io')\n  .then(fetchResult => fetchResult.text())\n  .then(textResult => {\n    console.log(`Voici le résultat : ${textResult}`)\n  })\n  .catch(error => {\n    console.log(\"Une erreur a eu lieu pendant la requête ou le parsing\", fetchError)\n  })\n\n// Ou encore\nfetch('http://putaindecode.io')\n  .then(\n    fetchResult => {\n      return fetchResult.text()\n    },\n    fetchError => {\n      console.log(\"Une erreur a eu lieu pendant la requête\", fetchError)\n    }\n  )\n  .then(\n    textResult => {\n      console.log(`Voici le résultat : ${textResult}`)\n    },\n    parseError => {\n      console.log(\"Une erreur a eu lieu pendant le parsing\", parseError)\n    }\n  )\n</code></pre>\n<h2 id=\"mais-comment-je-crée-mes-propres-promesses-\"><a href=\"#mais-comment-je-cr%C3%A9e-mes-propres-promesses-\"></a>Mais comment je crée mes propres promesses ?</h2>\n<p>C'est bien beau d'utiliser les promesses, mais c'est encore mieux de savoir\ncréer les vôtres ! Je vous rassure, c'est très simple.</p>\n<pre><code class=\"language-js\">const functionThatReturnAPromise = (success) => {\n  // On utilise la classe Promise pour en créer une, le constructeur prend 2\n  // fonctions en paramètre :\n  // - resolve que l'on pourra appeler avec le résultat de notre fonction\n  // - reject que l'on pourra appeler avec une erreur s'il y a une erreur\n  return new Promise((resolve, reject) => {\n    if (success) {\n      resolve('success')\n    }\n    else {\n      reject('failed')\n    }\n  })\n}\n\n// Vous pouvez maintenant utiliser votre fonction comme vu précédemment\nfunctionThatReturnAPromise(success)\n  .then(res => console.log(res))\n  .catch(error => console.log(error))\n\n// équivalent dans notre cas à\nfunctionThatReturnAPromise(success)\n  .then(\n    (res) => console.log(res),\n    (error) => console.log(error)\n  )\n</code></pre>\n<h2 id=\"et-demain-\"><a href=\"#et-demain-\"></a>Et demain ?</h2>\n<p>Une fonctionnalité encore plus pratique que les promesses arrive en JavaScript,\nles mots-clés <code>async</code> et <code>await</code> ! Ces mots-clés vous permettront d'avoir un\ncode encore plus lisible quand vous ferez de l'asynchrone, mais ça ne concerne\npas ES2015 :)</p>\n","rawBody":"\nES2015 apporte une fonctionnalité simplifiant grandement l'asynchrone en\nJavaScript, les promesses ! Visible depuis longtemps dans l'écosystème\nJavaScript grâce a diverses librairies, on peut maintenant utiliser directement\nla spécification officielle.\n\n## C'est quoi une promesse ?\n\nEt bien comme son nom l'indique vous pouvez voir ça comme la promesse que vous\nallez recevoir une valeur. Comme toute promesse, elle peut être tenue,\nla valeur est arrivée et on peut s'en servir, ou ne pas l'être, dans ce cas\nune erreur arrive et on peut réagir en conséquence.\n\nCe mécanisme permet de remplacer les callbacks d'une manière plus élégante. Au\nrevoir, la suite de callbacks qui rend votre code illisible ! Vous ne me croyez\npas ? Voici un exemple pour vous le prouver :\n\n```js\n// En utilisant les callbacks\n// Imaginez que chacune de ces fonctions effectue des tâches asynchrones\n// plus ou moins complexes (requête HTTP, appel à une base de données\n// ou encore lecture de fichier)\nconst functionWithCallback1 = (callback) => callback('test', undefined)\nconst functionWithCallback2 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback3 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback4 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback5 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback6 = (arg, callback) => callback(arg, undefined)\n\nfunctionWithCallback1((result1, err) => {\n  if (err) {\n    throw err\n  }\n  functionWithCallback2(result1, (result2, err) => {\n    if (err) {\n      throw err\n    }\n    functionWithCallback3(result2, (result3, err) => {\n      if (err) {\n        throw err\n      }\n      functionWithCallback4(result3, (result4, err) => {\n        if (err) {\n          throw err\n        }\n        functionWithCallback5(result4, (result5, err) => {\n          if (err) {\n            throw err\n          }\n          functionWithCallback6(result5, (result6, err) => {\n            if (err) {\n              throw err\n            }\n            console.log(`Exemple avec les callback : ${result6}`)\n          })\n        })\n      })\n    })\n  })\n})\n\n// Et maintenant, en utilisant les promesses\nconst functionWithPromise1 = () => Promise.resolve('test')\nconst functionWithPromise2 = (arg) => Promise.resolve(arg)\nconst functionWithPromise3 = (arg) => Promise.resolve(arg)\nconst functionWithPromise4 = (arg) => Promise.resolve(arg)\nconst functionWithPromise5 = (arg) => Promise.resolve(arg)\nconst functionWithPromise6 = (arg) => Promise.resolve(arg)\n\nfunctionWithPromise1()\n  .then(functionWithPromise2)\n  .then(functionWithPromise3)\n  .then(functionWithPromise4)\n  .then(functionWithPromise5)\n  .then(functionWithPromise6)\n  .then(result => console.log(`Exemple avec les promesses : ${result}`))\n  .catch(err => {\n    throw err\n  })\n```\n\nComme vous pouvez le voir, l'exemple avec les promesses est tout de même plus\nlisible !\n\n## Trop bien ! Comment je les utilise ?\n\nUne promesse peut avoir plusieurs états au cours de son existence :\n- en cours : la valeur qu'elle contient n'est pas encore arrivée\n- résolue : la valeur est arrivée, on peut l'utiliser\n- rejetée : une erreur est survenue, on peut y réagir\n\nUne promesse possède 2 fonctions : `then` et `catch`, vous pouvez utiliser\n`then` pour récupérer le resultat ou l'erreur d'une promesse et `catch` pour\nrécupérer l'erreur d'une ou plusieurs promesses.\n\nVoyons comment utiliser les promesses à l'aide de la future implémentation de\n[`fetch`](https://fetch.spec.whatwg.org).\n\n```js\n// À ce moment, la promesse est en attente\nconst fetchPromise = fetch('http://putaindecode.io')\n\n// Quand la requête est terminée la promesse est résolue avec le résultat de\n// la requête\nconst parsePromise = fetchPromise.then(fetchResult => {\n  // Je peux retourner une nouvelle promesse à partir d'un then, ici\n  // j'appelle .text() qui parse le contenu de la requête et retourne\n  // une promesse\n  return fetchResult.text()\n})\n\n// Quand le parsing est terminé, je peux recuperer son contenu\nparsePromise.then(textResult => {\n  console.log(`Voici le résultat : ${textResult}`)\n})\n\n// Si la requête a un problème, la promesse est rejetée avec une erreur\nfetchPromise.catch(fetchError => {\n  console.log(\"Une erreur a eu lieu pendant la requête\", fetchError)\n})\n\n// S'il y a une erreur pendant le parsing, je peux la récupérer\nparsePromise.catch(parseError => {\n  console.log(\"Une erreur a eu lieu pendant le parsing\", parseError)\n})\n\n// Cela peut aussi être écrit\nfetch('http://putaindecode.io')\n  .then(fetchResult => fetchResult.text())\n  .then(textResult => {\n    console.log(`Voici le résultat : ${textResult}`)\n  })\n  .catch(error => {\n    console.log(\"Une erreur a eu lieu pendant la requête ou le parsing\", fetchError)\n  })\n\n// Ou encore\nfetch('http://putaindecode.io')\n  .then(\n    fetchResult => {\n      return fetchResult.text()\n    },\n    fetchError => {\n      console.log(\"Une erreur a eu lieu pendant la requête\", fetchError)\n    }\n  )\n  .then(\n    textResult => {\n      console.log(`Voici le résultat : ${textResult}`)\n    },\n    parseError => {\n      console.log(\"Une erreur a eu lieu pendant le parsing\", parseError)\n    }\n  )\n```\n\n## Mais comment je crée mes propres promesses ?\n\nC'est bien beau d'utiliser les promesses, mais c'est encore mieux de savoir\ncréer les vôtres ! Je vous rassure, c'est très simple.\n\n```js\nconst functionThatReturnAPromise = (success) => {\n  // On utilise la classe Promise pour en créer une, le constructeur prend 2\n  // fonctions en paramètre :\n  // - resolve que l'on pourra appeler avec le résultat de notre fonction\n  // - reject que l'on pourra appeler avec une erreur s'il y a une erreur\n  return new Promise((resolve, reject) => {\n    if (success) {\n      resolve('success')\n    }\n    else {\n      reject('failed')\n    }\n  })\n}\n\n// Vous pouvez maintenant utiliser votre fonction comme vu précédemment\nfunctionThatReturnAPromise(success)\n  .then(res => console.log(res))\n  .catch(error => console.log(error))\n\n// équivalent dans notre cas à\nfunctionThatReturnAPromise(success)\n  .then(\n    (res) => console.log(res),\n    (error) => console.log(error)\n  )\n```\n\n## Et demain ?\n\nUne fonctionnalité encore plus pratique que les promesses arrive en JavaScript,\nles mots-clés `async` et `await` ! Ces mots-clés vous permettront d'avoir un\ncode encore plus lisible quand vous ferez de l'asynchrone, mais ça ne concerne\npas ES2015 :)\n","raw":"---\ndate: \"2015-12-06\"\ntitle: \"ES6, ES2015 : les promesses\"\ntags:\n  - JavaScript\n  - ES6\n  - ES2015\n  - Promise\nauthors:\n  - Uhsac\n---\n\nES2015 apporte une fonctionnalité simplifiant grandement l'asynchrone en\nJavaScript, les promesses ! Visible depuis longtemps dans l'écosystème\nJavaScript grâce a diverses librairies, on peut maintenant utiliser directement\nla spécification officielle.\n\n## C'est quoi une promesse ?\n\nEt bien comme son nom l'indique vous pouvez voir ça comme la promesse que vous\nallez recevoir une valeur. Comme toute promesse, elle peut être tenue,\nla valeur est arrivée et on peut s'en servir, ou ne pas l'être, dans ce cas\nune erreur arrive et on peut réagir en conséquence.\n\nCe mécanisme permet de remplacer les callbacks d'une manière plus élégante. Au\nrevoir, la suite de callbacks qui rend votre code illisible ! Vous ne me croyez\npas ? Voici un exemple pour vous le prouver :\n\n```js\n// En utilisant les callbacks\n// Imaginez que chacune de ces fonctions effectue des tâches asynchrones\n// plus ou moins complexes (requête HTTP, appel à une base de données\n// ou encore lecture de fichier)\nconst functionWithCallback1 = (callback) => callback('test', undefined)\nconst functionWithCallback2 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback3 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback4 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback5 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback6 = (arg, callback) => callback(arg, undefined)\n\nfunctionWithCallback1((result1, err) => {\n  if (err) {\n    throw err\n  }\n  functionWithCallback2(result1, (result2, err) => {\n    if (err) {\n      throw err\n    }\n    functionWithCallback3(result2, (result3, err) => {\n      if (err) {\n        throw err\n      }\n      functionWithCallback4(result3, (result4, err) => {\n        if (err) {\n          throw err\n        }\n        functionWithCallback5(result4, (result5, err) => {\n          if (err) {\n            throw err\n          }\n          functionWithCallback6(result5, (result6, err) => {\n            if (err) {\n              throw err\n            }\n            console.log(`Exemple avec les callback : ${result6}`)\n          })\n        })\n      })\n    })\n  })\n})\n\n// Et maintenant, en utilisant les promesses\nconst functionWithPromise1 = () => Promise.resolve('test')\nconst functionWithPromise2 = (arg) => Promise.resolve(arg)\nconst functionWithPromise3 = (arg) => Promise.resolve(arg)\nconst functionWithPromise4 = (arg) => Promise.resolve(arg)\nconst functionWithPromise5 = (arg) => Promise.resolve(arg)\nconst functionWithPromise6 = (arg) => Promise.resolve(arg)\n\nfunctionWithPromise1()\n  .then(functionWithPromise2)\n  .then(functionWithPromise3)\n  .then(functionWithPromise4)\n  .then(functionWithPromise5)\n  .then(functionWithPromise6)\n  .then(result => console.log(`Exemple avec les promesses : ${result}`))\n  .catch(err => {\n    throw err\n  })\n```\n\nComme vous pouvez le voir, l'exemple avec les promesses est tout de même plus\nlisible !\n\n## Trop bien ! Comment je les utilise ?\n\nUne promesse peut avoir plusieurs états au cours de son existence :\n- en cours : la valeur qu'elle contient n'est pas encore arrivée\n- résolue : la valeur est arrivée, on peut l'utiliser\n- rejetée : une erreur est survenue, on peut y réagir\n\nUne promesse possède 2 fonctions : `then` et `catch`, vous pouvez utiliser\n`then` pour récupérer le resultat ou l'erreur d'une promesse et `catch` pour\nrécupérer l'erreur d'une ou plusieurs promesses.\n\nVoyons comment utiliser les promesses à l'aide de la future implémentation de\n[`fetch`](https://fetch.spec.whatwg.org).\n\n```js\n// À ce moment, la promesse est en attente\nconst fetchPromise = fetch('http://putaindecode.io')\n\n// Quand la requête est terminée la promesse est résolue avec le résultat de\n// la requête\nconst parsePromise = fetchPromise.then(fetchResult => {\n  // Je peux retourner une nouvelle promesse à partir d'un then, ici\n  // j'appelle .text() qui parse le contenu de la requête et retourne\n  // une promesse\n  return fetchResult.text()\n})\n\n// Quand le parsing est terminé, je peux recuperer son contenu\nparsePromise.then(textResult => {\n  console.log(`Voici le résultat : ${textResult}`)\n})\n\n// Si la requête a un problème, la promesse est rejetée avec une erreur\nfetchPromise.catch(fetchError => {\n  console.log(\"Une erreur a eu lieu pendant la requête\", fetchError)\n})\n\n// S'il y a une erreur pendant le parsing, je peux la récupérer\nparsePromise.catch(parseError => {\n  console.log(\"Une erreur a eu lieu pendant le parsing\", parseError)\n})\n\n// Cela peut aussi être écrit\nfetch('http://putaindecode.io')\n  .then(fetchResult => fetchResult.text())\n  .then(textResult => {\n    console.log(`Voici le résultat : ${textResult}`)\n  })\n  .catch(error => {\n    console.log(\"Une erreur a eu lieu pendant la requête ou le parsing\", fetchError)\n  })\n\n// Ou encore\nfetch('http://putaindecode.io')\n  .then(\n    fetchResult => {\n      return fetchResult.text()\n    },\n    fetchError => {\n      console.log(\"Une erreur a eu lieu pendant la requête\", fetchError)\n    }\n  )\n  .then(\n    textResult => {\n      console.log(`Voici le résultat : ${textResult}`)\n    },\n    parseError => {\n      console.log(\"Une erreur a eu lieu pendant le parsing\", parseError)\n    }\n  )\n```\n\n## Mais comment je crée mes propres promesses ?\n\nC'est bien beau d'utiliser les promesses, mais c'est encore mieux de savoir\ncréer les vôtres ! Je vous rassure, c'est très simple.\n\n```js\nconst functionThatReturnAPromise = (success) => {\n  // On utilise la classe Promise pour en créer une, le constructeur prend 2\n  // fonctions en paramètre :\n  // - resolve que l'on pourra appeler avec le résultat de notre fonction\n  // - reject que l'on pourra appeler avec une erreur s'il y a une erreur\n  return new Promise((resolve, reject) => {\n    if (success) {\n      resolve('success')\n    }\n    else {\n      reject('failed')\n    }\n  })\n}\n\n// Vous pouvez maintenant utiliser votre fonction comme vu précédemment\nfunctionThatReturnAPromise(success)\n  .then(res => console.log(res))\n  .catch(error => console.log(error))\n\n// équivalent dans notre cas à\nfunctionThatReturnAPromise(success)\n  .then(\n    (res) => console.log(res),\n    (error) => console.log(error)\n  )\n```\n\n## Et demain ?\n\nUne fonctionnalité encore plus pratique que les promesses arrive en JavaScript,\nles mots-clés `async` et `await` ! Ces mots-clés vous permettront d'avoir un\ncode encore plus lisible quand vous ferez de l'asynchrone, mais ça ne concerne\npas ES2015 :)\n","__filename":"fr/articles/js/es2015/promises.md","__url":"/fr/articles/js/es2015/promises/","__resourceUrl":"/fr/articles/js/es2015/promises/index.html","__dataUrl":"/fr/articles/js/es2015/promises/index.html.8153c56831e26564536412146985d1e0.json"}