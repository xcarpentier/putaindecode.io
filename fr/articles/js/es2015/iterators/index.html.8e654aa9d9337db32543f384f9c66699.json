{"head":{"layout":"Post","comments":true,"date":"2015-12-09","title":"ES6, ES2015 : le protocole d'itération","tags":["javascript","ES6","ES2015","iterators"],"authors":["ffesseler"],"description":"Imaginez un concept si important que si vous l’enleviez du langage, il faudrait en conséquence enlever le spread, le destructuring, les…"},"body":"<p>Imaginez un concept si important que si vous l’enleviez du langage, il faudrait\nen conséquence enlever le spread, le destructuring, les générateurs, le for…of\net bien d’autres. Ce concept, introduit dans l’ES6, est en fait un protocole :\nle protocole d’itération.</p>\n<p>Le principe est de définir une convention dans le langage, qui permet de\nstandardiser la façon dont des sources de données peuvent être traversées.</p>\n<p>Première bonne nouvelle, ce protocole est assez simple à comprendre et se base\nsur 2 \"interfaces\" (oui les guillemets c’est pour dire qu’on ne parle pas\nd’interface au sens technique, puisqu’elles n’existent pas en JS).</p>\n<p>La première interface, appelée <strong>Iterator</strong> permet à un objet de produire des\nvaleurs en séquence. Un objet est un Iterator lorsqu’il implémente une\nfunction <code>next()</code> qui retourne un objet avec 2 propriétés :</p>\n<ul>\n<li><code>value</code>: la valeur courante lors de l'itération</li>\n<li><code>done</code> : un booléen qui indique si on a atteint la fin de l’itération ou non</li>\n</ul>\n<p>Les appels successifs à la méthode <code>next()</code> d’un Iterator permettent donc de\ntraverser et récupérer les valeurs d’un objet. Prenons l’exemple de l’Iterator\nretourné par un Array qui contiendrait 2 valeurs (\"a\" et \"b\") :</p>\n<pre><code class=\"language-js\">iteratorArray.next()\n// -> Object {value: \"a\", done: false}\niteratorArray.next()\n// -> Object {value: \"b\", done: false}\niteratorArray.next()\n// -> Object {value: undefined, done: true}\n</code></pre>\n<p>Mais comment récupérer l’Iterator d’un objet vas-tu me dire ? (n’est-ce pas ?)\nÇa tombe bien, c’est le rôle de la seconde interface, appelée <strong>Iterable</strong>. Un\nobjet est Iterable s’il implémente une méthode particulière qui va retourner\nl'Iterator. Cette méthode particulière (appelée <em>@@iterator</em> dans la\nspécification) doit être définie en utilisant le symbole <code>[Symbol.iterator]</code>.\n(Les symboles seront expliqués dans un prochain article, pas de panique).</p>\n<p>En reprenant l’exemple précédent, voici comment récupérer l’Iterator d’un Array :</p>\n<pre><code class=\"language-js\">const arr = [\"a\", \"b\"]\nconst iteratorArray = arr[Symbol.iterator]()\niteratorArray.next()\n// -> Object {value: \"a\", done: false}\niteratorArray.next()\n// -> Object {value: \"b\", done: false}\niteratorArray.next()\n// -> Object {value: undefined, done: true}\n</code></pre>\n<p>L’exemple ci-dessus illustre donc l’implémentation du protocole par l’Array.\nIl n’est pas très utile en soi, en voici donc un autre qui va permettre de\nboucler sur les valeurs et les afficher :</p>\n<pre><code class=\"language-js\">const arr = [\"a\", \"b\"]\nvar iterator = arr[Symbol.iterator]()\n\nvar result = iterator.next()\nwhile (!result.done) {\n  console.log(result.value)\n  result = iterator.next()\n}\n// 'a'\n// 'b'\n</code></pre>\n<p>De manière générale, quand un objet qui implémente le protocole d’itération est\ntraversé, sa méthode <em>@@iterator</em> est appelée (une seule fois donc) et l’Iterator\nretourné est utilisé pour boucler sur ses valeurs.</p>\n<h1 id=\"consommateurs-diterable\"><a href=\"#consommateurs-diterable\"></a>Consommateurs d'Iterable</h1>\n<p>La deuxième bonne nouvelle, c’est que plusieurs concepts du langage tirent avantage de ce protocole :</p>\n<ul>\n<li>Certaines syntaxes s’attendent à recevoir des Iterables</li>\n</ul>\n<pre><code class=\"language-js\">const arr = [\"a\", \"b\"]\n\n// La syntaxe à laquelle on pense immédiatement est la syntaxe « for .. of »\n// qui permet de boucler sur les valeurs des Iterables.\nfor (val of arr) {\n    console.log(val)\n}\n\n// Le spread qui permet d'insérer facilement des valeurs dans un Array\n// utilise également des Iterable\n['0', ...arr, '1'] // 0, a, b, 1\n\n// yield nécessite également des Iterable\nfunction* gen(){\n  yield* arr\n}\ngen().next() // { value:\"a\", done:false }\n\n// Le destructuring avec le pattern Array\nconst [x, y] = arr // x = 'a',  y = \"b\"\n</code></pre>\n<ul>\n<li>Des API acceptent également des Iterables</li>\n</ul>\n<pre><code class=\"language-js\">const arr = [\"a\", \"b\", \"b\"]\n\n// Certains constructeurs acceptent des Iterable\n\n// Set et Weakset\nconst set = new Set(arr)\nset.has(\"b\") // true\n// Map et WeakMap\nconst map = new Map(arr.entries()) // Attention, le constructeur attend un ensemble [clé, valeur]\nmap.get(0) // 'a'\n\n\n// Ou encore les API suivants :\n\nArray.from(iterable) // transforme n'importe quel Iterable en Array.\nPromise.all(iterableCollectionDePromises) // n'importe quel Iterable qui contient un ensemble de Promises\nPromise.race(iterableCollectionDePromises) // idem\n</code></pre>\n<h1 id=\"built-in-iterable\"><a href=\"#built-in-iterable\"></a>Built-in Iterable</h1>\n<p>Troisième bonne nouvelle, plusieurs objets du langage implémentent déjà ce protocole :</p>\n<pre><code class=\"language-js\">// évidemment les Array\nconst arr = [\"l\", \"o\", \"l\"]\nfor (v of arr) {\n  console.log(v)\n  // 'l'\n  // 'o'\n  // 'l'\n}\n\n// les String\nconst str = \"lol\"\nfor (v of str) {\n  console.log(v)\n  // 'l'\n  // 'o'\n  // 'l'\n}\n\n// les Map et Set (mais PAS WeakMap et WeakSet)\nconst map = new Map().set('l', 1).set('o', 2)\nfor (v of map) {\n  console.log(v)\n  // [\"l\", 1]\n  // [\"o\", 2]\n}\nconst set = new Set().add('l').add('o')\nfor (v of map) {\n  console.log(v)\n  // 'l'\n  // 'o'\n}\n\n// Les TypedArray que vous utilisez tous les jours\nconst int16 = new Int16Array(2)\nint16[0] = 42\nfor (v of int16) {\n  console.log(v)\n  // 42\n  // 0\n}\n\n// Même l'objet spécial arguments (que vous\n// ne devriez plus utiliser avec l'ES6) est un Iterable\nfunction test() {\n  for (v of arguments) {\n    console.log(v)\n    // 'l'\n    // 'o'\n    // 'l'\n  }\n}\ntest('l', 'o', 'l')\n\n// Les NodeList retournés par l'API DOM également !\nconst matches = document.querySelectorAll('div')\nfor (m of matches) {\n  console.log(m)\n  // &#x3C;div id=\"topSection\">\n  // &#x3C;div id=\"brandLogo\">\n  // ...\n}\n</code></pre>\n<p>Autre point : Array, TypedArray, Map, Set sont des Iterable mais définissent\naussi des méthodes qui retournent également des Iterable (ça va, vous suivez\ntoujours ?) :</p>\n<ul>\n<li>entries() retourne un ensemble des clés/valeurs</li>\n<li>keys() retourne les clés</li>\n<li>values() retourne les valeurs</li>\n</ul>\n<pre><code class=\"language-js\">for (cleVals of arr.entries()) {\n  console.log(cleVals)\n  // [0, \"l\"]\n  // [1, \"o\"]\n  // [2, \"l\"]\n}\n</code></pre>\n<p>Détail important, <code>Object</code> n'est pas Iterable mais il n'est pas impossible de\nvoir apparaitre dans l'ES7 les méthodes entries(), keys() et values() sur\nObject (cf.\n<a href=\"https://github.com/tc39/proposal-object-values-entries\">la proposition spec</a>).</p>\n<h1 id=\"conclusion\"><a href=\"#conclusion\"></a>Conclusion</h1>\n<p>J’espère que cet article a bien illustré l’importance de ce protocole dans le\nlangage. Nous avons vu ci-dessus que de nombreux concepts du langage tirent\ndéjà avantage de ce protocole mais il est au moins aussi important de noter que\ncela permet d’établir une convention sur laquelle des librairies externes peuvent\ns’appuyer.</p>\n<p>Elles peuvent le faire de 2 manières :</p>\n<ul>\n<li>en proposant des sources de données qui implémentent le protocole (ex:\nliste chaînée)</li>\n<li>en tant que consommateur du protocole (ex: un algorithme de tri)</li>\n</ul>\n<h1 id=\"un-dernier-verre-pour-la-route\"><a href=\"#un-dernier-verre-pour-la-route\"></a>Un dernier verre pour la route</h1>\n<p>Les articles suivants vous permettront d'aller encore plus loin dans le sujet. Vous y\napprendrez notamment qu’un iterator peut retourner en option 2 autres méthodes,\nqu’un générateur est à la fois un Iterable et un Iterator, qu’un Iterable peut\nêtre infini ou encore des exemples d’implémentations divers et variés :</p>\n<ul>\n<li><a href=\"http://www.2ality.com/2015/02/es6-iteration.html\">Iterables and iterators in ECMAScript 6</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration Protocols</a></li>\n<li><a href=\"https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/\">ES6 in depth : iterators and the for of loop</a></li>\n<li><a href=\"https://ponyfoo.com/articles/es6-iterators-in-depth\">ES6 iterators in depth</a></li>\n</ul>\n<p>La pratique restant le meilleur moyen de se former, le site\n<a href=\"http://es6katas.org/\">ES6 Katas</a> est très bien fait pour s'exercer.</p>\n","rawBody":"\nImaginez un concept si important que si vous l’enleviez du langage, il faudrait\nen conséquence enlever le spread, le destructuring, les générateurs, le for…of\net bien d’autres. Ce concept, introduit dans l’ES6, est en fait un protocole :\nle protocole d’itération.\n\nLe principe est de définir une convention dans le langage, qui permet de\nstandardiser la façon dont des sources de données peuvent être traversées.\n\nPremière bonne nouvelle, ce protocole est assez simple à comprendre et se base\nsur 2 \"interfaces\" (oui les guillemets c’est pour dire qu’on ne parle pas\nd’interface au sens technique, puisqu’elles n’existent pas en JS).\n\nLa première interface, appelée **Iterator** permet à un objet de produire des\nvaleurs en séquence. Un objet est un Iterator lorsqu’il implémente une\nfunction ``next()`` qui retourne un objet avec 2 propriétés :\n\n* ``value``: la valeur courante lors de l'itération\n* ``done`` : un booléen qui indique si on a atteint la fin de l’itération ou non\n\nLes appels successifs à la méthode ``next()`` d’un Iterator permettent donc de\ntraverser et récupérer les valeurs d’un objet. Prenons l’exemple de l’Iterator\nretourné par un Array qui contiendrait 2 valeurs (\"a\" et \"b\") :\n\n```js\niteratorArray.next()\n// -> Object {value: \"a\", done: false}\niteratorArray.next()\n// -> Object {value: \"b\", done: false}\niteratorArray.next()\n// -> Object {value: undefined, done: true}\n```\n\nMais comment récupérer l’Iterator d’un objet vas-tu me dire ? (n’est-ce pas ?)\nÇa tombe bien, c’est le rôle de la seconde interface, appelée **Iterable**. Un\nobjet est Iterable s’il implémente une méthode particulière qui va retourner\nl'Iterator. Cette méthode particulière (appelée *@@iterator* dans la\nspécification) doit être définie en utilisant le symbole ``[Symbol.iterator]``.\n(Les symboles seront expliqués dans un prochain article, pas de panique).\n\nEn reprenant l’exemple précédent, voici comment récupérer l’Iterator d’un Array :\n\n```js\nconst arr = [\"a\", \"b\"]\nconst iteratorArray = arr[Symbol.iterator]()\niteratorArray.next()\n// -> Object {value: \"a\", done: false}\niteratorArray.next()\n// -> Object {value: \"b\", done: false}\niteratorArray.next()\n// -> Object {value: undefined, done: true}\n```\n\nL’exemple ci-dessus illustre donc l’implémentation du protocole par l’Array.\nIl n’est pas très utile en soi, en voici donc un autre qui va permettre de\nboucler sur les valeurs et les afficher :\n\n```js\nconst arr = [\"a\", \"b\"]\nvar iterator = arr[Symbol.iterator]()\n\nvar result = iterator.next()\nwhile (!result.done) {\n  console.log(result.value)\n  result = iterator.next()\n}\n// 'a'\n// 'b'\n```\n\nDe manière générale, quand un objet qui implémente le protocole d’itération est\ntraversé, sa méthode *@@iterator* est appelée (une seule fois donc) et l’Iterator\nretourné est utilisé pour boucler sur ses valeurs.\n\n# Consommateurs d'Iterable\n\nLa deuxième bonne nouvelle, c’est que plusieurs concepts du langage tirent avantage de ce protocole :\n\n* Certaines syntaxes s’attendent à recevoir des Iterables\n\n```js\nconst arr = [\"a\", \"b\"]\n\n// La syntaxe à laquelle on pense immédiatement est la syntaxe « for .. of »\n// qui permet de boucler sur les valeurs des Iterables.\nfor (val of arr) {\n    console.log(val)\n}\n\n// Le spread qui permet d'insérer facilement des valeurs dans un Array\n// utilise également des Iterable\n['0', ...arr, '1'] // 0, a, b, 1\n\n// yield nécessite également des Iterable\nfunction* gen(){\n  yield* arr\n}\ngen().next() // { value:\"a\", done:false }\n\n// Le destructuring avec le pattern Array\nconst [x, y] = arr // x = 'a',  y = \"b\"\n```\n\n* Des API acceptent également des Iterables\n\n```js\nconst arr = [\"a\", \"b\", \"b\"]\n\n// Certains constructeurs acceptent des Iterable\n\n// Set et Weakset\nconst set = new Set(arr)\nset.has(\"b\") // true\n// Map et WeakMap\nconst map = new Map(arr.entries()) // Attention, le constructeur attend un ensemble [clé, valeur]\nmap.get(0) // 'a'\n\n\n// Ou encore les API suivants :\n\nArray.from(iterable) // transforme n'importe quel Iterable en Array.\nPromise.all(iterableCollectionDePromises) // n'importe quel Iterable qui contient un ensemble de Promises\nPromise.race(iterableCollectionDePromises) // idem\n```\n\n# Built-in Iterable\n\nTroisième bonne nouvelle, plusieurs objets du langage implémentent déjà ce protocole :\n\n```js\n// évidemment les Array\nconst arr = [\"l\", \"o\", \"l\"]\nfor (v of arr) {\n  console.log(v)\n  // 'l'\n  // 'o'\n  // 'l'\n}\n\n// les String\nconst str = \"lol\"\nfor (v of str) {\n  console.log(v)\n  // 'l'\n  // 'o'\n  // 'l'\n}\n\n// les Map et Set (mais PAS WeakMap et WeakSet)\nconst map = new Map().set('l', 1).set('o', 2)\nfor (v of map) {\n  console.log(v)\n  // [\"l\", 1]\n  // [\"o\", 2]\n}\nconst set = new Set().add('l').add('o')\nfor (v of map) {\n  console.log(v)\n  // 'l'\n  // 'o'\n}\n\n// Les TypedArray que vous utilisez tous les jours\nconst int16 = new Int16Array(2)\nint16[0] = 42\nfor (v of int16) {\n  console.log(v)\n  // 42\n  // 0\n}\n\n// Même l'objet spécial arguments (que vous\n// ne devriez plus utiliser avec l'ES6) est un Iterable\nfunction test() {\n  for (v of arguments) {\n    console.log(v)\n    // 'l'\n    // 'o'\n    // 'l'\n  }\n}\ntest('l', 'o', 'l')\n\n// Les NodeList retournés par l'API DOM également !\nconst matches = document.querySelectorAll('div')\nfor (m of matches) {\n  console.log(m)\n  // <div id=\"topSection\">\n  // <div id=\"brandLogo\">\n  // ...\n}\n```\n\nAutre point : Array, TypedArray, Map, Set sont des Iterable mais définissent\naussi des méthodes qui retournent également des Iterable (ça va, vous suivez\ntoujours ?) :\n\n- entries() retourne un ensemble des clés/valeurs\n- keys() retourne les clés\n- values() retourne les valeurs\n\n```js\nfor (cleVals of arr.entries()) {\n  console.log(cleVals)\n  // [0, \"l\"]\n  // [1, \"o\"]\n  // [2, \"l\"]\n}\n```\n\nDétail important, ``Object`` n'est pas Iterable mais il n'est pas impossible de\nvoir apparaitre dans l'ES7 les méthodes entries(), keys() et values() sur\nObject (cf.\n[la proposition spec](https://github.com/tc39/proposal-object-values-entries)).\n\n# Conclusion\n\nJ’espère que cet article a bien illustré l’importance de ce protocole dans le\nlangage. Nous avons vu ci-dessus que de nombreux concepts du langage tirent\ndéjà avantage de ce protocole mais il est au moins aussi important de noter que\ncela permet d’établir une convention sur laquelle des librairies externes peuvent\ns’appuyer.\n\nElles peuvent le faire de 2 manières :\n\n* en proposant des sources de données qui implémentent le protocole (ex:\nliste chaînée)\n* en tant que consommateur du protocole (ex: un algorithme de tri)\n\n# Un dernier verre pour la route\n\nLes articles suivants vous permettront d'aller encore plus loin dans le sujet. Vous y\napprendrez notamment qu’un iterator peut retourner en option 2 autres méthodes,\nqu’un générateur est à la fois un Iterable et un Iterator, qu’un Iterable peut\nêtre infini ou encore des exemples d’implémentations divers et variés :\n\n* [Iterables and iterators in ECMAScript 6](http://www.2ality.com/2015/02/es6-iteration.html)\n* [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n* [ES6 in depth : iterators and the for of loop](https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/)\n* [ES6 iterators in depth](https://ponyfoo.com/articles/es6-iterators-in-depth)\n\nLa pratique restant le meilleur moyen de se former, le site\n[ES6 Katas](http://es6katas.org/) est très bien fait pour s'exercer.\n","raw":"---\ndate: \"2015-12-09\"\ntitle: \"ES6, ES2015 : le protocole d'itération\"\ntags:\n  - javascript\n  - ES6\n  - ES2015\n  - iterators\nauthors:\n  - ffesseler\n---\n\nImaginez un concept si important que si vous l’enleviez du langage, il faudrait\nen conséquence enlever le spread, le destructuring, les générateurs, le for…of\net bien d’autres. Ce concept, introduit dans l’ES6, est en fait un protocole :\nle protocole d’itération.\n\nLe principe est de définir une convention dans le langage, qui permet de\nstandardiser la façon dont des sources de données peuvent être traversées.\n\nPremière bonne nouvelle, ce protocole est assez simple à comprendre et se base\nsur 2 \"interfaces\" (oui les guillemets c’est pour dire qu’on ne parle pas\nd’interface au sens technique, puisqu’elles n’existent pas en JS).\n\nLa première interface, appelée **Iterator** permet à un objet de produire des\nvaleurs en séquence. Un objet est un Iterator lorsqu’il implémente une\nfunction ``next()`` qui retourne un objet avec 2 propriétés :\n\n* ``value``: la valeur courante lors de l'itération\n* ``done`` : un booléen qui indique si on a atteint la fin de l’itération ou non\n\nLes appels successifs à la méthode ``next()`` d’un Iterator permettent donc de\ntraverser et récupérer les valeurs d’un objet. Prenons l’exemple de l’Iterator\nretourné par un Array qui contiendrait 2 valeurs (\"a\" et \"b\") :\n\n```js\niteratorArray.next()\n// -> Object {value: \"a\", done: false}\niteratorArray.next()\n// -> Object {value: \"b\", done: false}\niteratorArray.next()\n// -> Object {value: undefined, done: true}\n```\n\nMais comment récupérer l’Iterator d’un objet vas-tu me dire ? (n’est-ce pas ?)\nÇa tombe bien, c’est le rôle de la seconde interface, appelée **Iterable**. Un\nobjet est Iterable s’il implémente une méthode particulière qui va retourner\nl'Iterator. Cette méthode particulière (appelée *@@iterator* dans la\nspécification) doit être définie en utilisant le symbole ``[Symbol.iterator]``.\n(Les symboles seront expliqués dans un prochain article, pas de panique).\n\nEn reprenant l’exemple précédent, voici comment récupérer l’Iterator d’un Array :\n\n```js\nconst arr = [\"a\", \"b\"]\nconst iteratorArray = arr[Symbol.iterator]()\niteratorArray.next()\n// -> Object {value: \"a\", done: false}\niteratorArray.next()\n// -> Object {value: \"b\", done: false}\niteratorArray.next()\n// -> Object {value: undefined, done: true}\n```\n\nL’exemple ci-dessus illustre donc l’implémentation du protocole par l’Array.\nIl n’est pas très utile en soi, en voici donc un autre qui va permettre de\nboucler sur les valeurs et les afficher :\n\n```js\nconst arr = [\"a\", \"b\"]\nvar iterator = arr[Symbol.iterator]()\n\nvar result = iterator.next()\nwhile (!result.done) {\n  console.log(result.value)\n  result = iterator.next()\n}\n// 'a'\n// 'b'\n```\n\nDe manière générale, quand un objet qui implémente le protocole d’itération est\ntraversé, sa méthode *@@iterator* est appelée (une seule fois donc) et l’Iterator\nretourné est utilisé pour boucler sur ses valeurs.\n\n# Consommateurs d'Iterable\n\nLa deuxième bonne nouvelle, c’est que plusieurs concepts du langage tirent avantage de ce protocole :\n\n* Certaines syntaxes s’attendent à recevoir des Iterables\n\n```js\nconst arr = [\"a\", \"b\"]\n\n// La syntaxe à laquelle on pense immédiatement est la syntaxe « for .. of »\n// qui permet de boucler sur les valeurs des Iterables.\nfor (val of arr) {\n    console.log(val)\n}\n\n// Le spread qui permet d'insérer facilement des valeurs dans un Array\n// utilise également des Iterable\n['0', ...arr, '1'] // 0, a, b, 1\n\n// yield nécessite également des Iterable\nfunction* gen(){\n  yield* arr\n}\ngen().next() // { value:\"a\", done:false }\n\n// Le destructuring avec le pattern Array\nconst [x, y] = arr // x = 'a',  y = \"b\"\n```\n\n* Des API acceptent également des Iterables\n\n```js\nconst arr = [\"a\", \"b\", \"b\"]\n\n// Certains constructeurs acceptent des Iterable\n\n// Set et Weakset\nconst set = new Set(arr)\nset.has(\"b\") // true\n// Map et WeakMap\nconst map = new Map(arr.entries()) // Attention, le constructeur attend un ensemble [clé, valeur]\nmap.get(0) // 'a'\n\n\n// Ou encore les API suivants :\n\nArray.from(iterable) // transforme n'importe quel Iterable en Array.\nPromise.all(iterableCollectionDePromises) // n'importe quel Iterable qui contient un ensemble de Promises\nPromise.race(iterableCollectionDePromises) // idem\n```\n\n# Built-in Iterable\n\nTroisième bonne nouvelle, plusieurs objets du langage implémentent déjà ce protocole :\n\n```js\n// évidemment les Array\nconst arr = [\"l\", \"o\", \"l\"]\nfor (v of arr) {\n  console.log(v)\n  // 'l'\n  // 'o'\n  // 'l'\n}\n\n// les String\nconst str = \"lol\"\nfor (v of str) {\n  console.log(v)\n  // 'l'\n  // 'o'\n  // 'l'\n}\n\n// les Map et Set (mais PAS WeakMap et WeakSet)\nconst map = new Map().set('l', 1).set('o', 2)\nfor (v of map) {\n  console.log(v)\n  // [\"l\", 1]\n  // [\"o\", 2]\n}\nconst set = new Set().add('l').add('o')\nfor (v of map) {\n  console.log(v)\n  // 'l'\n  // 'o'\n}\n\n// Les TypedArray que vous utilisez tous les jours\nconst int16 = new Int16Array(2)\nint16[0] = 42\nfor (v of int16) {\n  console.log(v)\n  // 42\n  // 0\n}\n\n// Même l'objet spécial arguments (que vous\n// ne devriez plus utiliser avec l'ES6) est un Iterable\nfunction test() {\n  for (v of arguments) {\n    console.log(v)\n    // 'l'\n    // 'o'\n    // 'l'\n  }\n}\ntest('l', 'o', 'l')\n\n// Les NodeList retournés par l'API DOM également !\nconst matches = document.querySelectorAll('div')\nfor (m of matches) {\n  console.log(m)\n  // <div id=\"topSection\">\n  // <div id=\"brandLogo\">\n  // ...\n}\n```\n\nAutre point : Array, TypedArray, Map, Set sont des Iterable mais définissent\naussi des méthodes qui retournent également des Iterable (ça va, vous suivez\ntoujours ?) :\n\n- entries() retourne un ensemble des clés/valeurs\n- keys() retourne les clés\n- values() retourne les valeurs\n\n```js\nfor (cleVals of arr.entries()) {\n  console.log(cleVals)\n  // [0, \"l\"]\n  // [1, \"o\"]\n  // [2, \"l\"]\n}\n```\n\nDétail important, ``Object`` n'est pas Iterable mais il n'est pas impossible de\nvoir apparaitre dans l'ES7 les méthodes entries(), keys() et values() sur\nObject (cf.\n[la proposition spec](https://github.com/tc39/proposal-object-values-entries)).\n\n# Conclusion\n\nJ’espère que cet article a bien illustré l’importance de ce protocole dans le\nlangage. Nous avons vu ci-dessus que de nombreux concepts du langage tirent\ndéjà avantage de ce protocole mais il est au moins aussi important de noter que\ncela permet d’établir une convention sur laquelle des librairies externes peuvent\ns’appuyer.\n\nElles peuvent le faire de 2 manières :\n\n* en proposant des sources de données qui implémentent le protocole (ex:\nliste chaînée)\n* en tant que consommateur du protocole (ex: un algorithme de tri)\n\n# Un dernier verre pour la route\n\nLes articles suivants vous permettront d'aller encore plus loin dans le sujet. Vous y\napprendrez notamment qu’un iterator peut retourner en option 2 autres méthodes,\nqu’un générateur est à la fois un Iterable et un Iterator, qu’un Iterable peut\nêtre infini ou encore des exemples d’implémentations divers et variés :\n\n* [Iterables and iterators in ECMAScript 6](http://www.2ality.com/2015/02/es6-iteration.html)\n* [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n* [ES6 in depth : iterators and the for of loop](https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/)\n* [ES6 iterators in depth](https://ponyfoo.com/articles/es6-iterators-in-depth)\n\nLa pratique restant le meilleur moyen de se former, le site\n[ES6 Katas](http://es6katas.org/) est très bien fait pour s'exercer.\n","__filename":"fr/articles/js/es2015/iterators.md","__url":"/fr/articles/js/es2015/iterators/","__resourceUrl":"/fr/articles/js/es2015/iterators/index.html","__dataUrl":"/fr/articles/js/es2015/iterators/index.html.8e654aa9d9337db32543f384f9c66699.json"}