{"head":{"layout":"Post","comments":true,"date":"2013-12-06","title":"Comment se passer de libraries/frameworks JavaScript","tags":["javascript","frameworks","libraries"],"authors":["bloodyowl"],"description":"Petite note préalable  : évidemment que ça ne marche pas sous les vieux navigateurs, cet article s'adresse principalement à toi pour te…"},"body":"<p><strong> Petite note préalable </strong> : évidemment que ça ne marche pas sous les vieux navigateurs, cet article s'adresse principalement à toi pour te faire comprendre comment les choses marchent.</p>\n<p>De plus en plus, le besoin de légèreté se fait sentir sur les pages. En dépit d'un web plus rapide sur desktop, on a maintenant beaucoup de devices connectés via 3G ou Edge (un petit coucou au métro parisien). Du coup, tu te rendras vite compte qu'embarquer jQuery + jQuery Mobile + jQuery UI et un tas d'autres plug-ins grapillés sur le web, ça commence à peser.</p>\n<h2 id=\"pour-la-sélection-délements\"><a href=\"#pour-la-s%C3%A9lection-d%C3%A9lements\"></a>Pour la sélection d'élements</h2>\n<p>Pour remplacer ton bon vieux <code>$</code> magique, <code>document.querySelectorAll</code> semble faire l'affaire. En revanche, il retourne une instance de <code>NodeList</code>, pas d'<code>Array</code>, ce qui ne nous arrange pas des masses.</p>\n<p>Du coup, on peut écrire une petite function toute con, qui nous retourne un <code>Array</code> et ses méthodes bien utiles.</p>\n<pre><code class=\"language-javascript\">var nativeSlice = [].slice // la méthode de conversion\n\nfunction $(selector){\n  var list = document.querySelectorAll(selector)\n  return nativeSlice.call(list)\n}\n</code></pre>\n<p>Alternativement, tu peux utiliser <code>Array.apply(null, list)</code> plutôt que <code>nativeSlice.call(list)</code>, si vraiment ça te fait plaisir.</p>\n<p>Une troisième solution, un peu plus chiante au quotidien (et terriblement laide), c'est d'utiliser directement les méthodes qui t'intéressent (ex. <code>[].forEach</code>) de cette façon :</p>\n<pre><code class=\"language-javascript\">;[].forEach.call(document.querySelectorAll(selector), function(element){\n  // do something w/ element\n})\n</code></pre>\n<p>Pour en revenir à notre petite méthode <code>$</code>, on peut du coup faire :</p>\n<pre><code class=\"language-javascript\">// prends bien l'habitude de garder\n// tes nodeLists si tu les réutilises\n\nvar elements = $(\".my-elements-className\")\n\nelements.forEach(function(element){\n  // do something w/ element\n})\n</code></pre>\n<h3 id=\"pour-levent-delegation\"><a href=\"#pour-levent-delegation\"></a>Pour l'event delegation</h3>\n<p>L'event delegation, c'est bien, mangez-en. Ça permet, entre autres, de ne pas attacher 150 listeners uniques à 150 éléments différents, mais à attacher un seul listener sur un parent commun, et analyser les sources des évènements à l'intérieur en se basant sur le <strong>bubbling</strong> (remontée d'évènements de la source au plus haut parent) ou <strong>capturing</strong> (descente d'évènements du plus haut parent à la source, avant même que la source ne le reçoive).</p>\n<p>Pour faire de la délégation, on va procéder en trois temps :</p>\n<ul>\n<li>Choper <code>event.target</code></li>\n<li>Vérifier que le sélecteur qui nous intéresse correspond bien à <code>event.target</code> ou un de ses parents (dans le cas où l'on clique sur le <code>.icon-Arrow</code> dans <code>.js-Button-action</code>)</li>\n<li>Si ça match, on garde l'élement correspondant au sélecteur, sinon, exit</li>\n</ul>\n<p>Les browsers relativement récents possèdent une méthode : <code>matchesSelector</code> (et tous ses alias préfixés). Ce qu'on peut donc faire, c'est ceci :</p>\n<pre><code class=\"language-javascript\">var docEl = document.documentElement\n    // si c'est dans docEl, c'est que c'est dispo\nvar nativeMatchesSelector =\n      docEl.matchesSelector ||\n      docEl.webkitMatchesSelector ||\n      docEl.mozMatchesSelector ||\n      docEl.oMatchesSelector ||\n      docEl.msMatchesSelector\nvar matchesSelector = nativeMatchesSelector || matchesPolyfill\n\n// le polyfill utilise querySelectorAll\n// et cherche dans le parent de l'élement\nfunction matchesPolyfill(selector){\n  var node = this\n  var parent = node.parentNode\n  var query, index, length\n  if(!parent || parent.nodeType != 1) {\n    return false\n  }\n  query = parent.querySelectorAll(selector)\n  index = -1\n  length = query.length\n  while(++index &#x3C; length) {\n    if(query[index] == node) return true\n  }\n  return false\n}\n\nfunction getCurrentTarget(node, selector){\n  if(matchesSelector.call(node, selector)) return node\n  while(node = node.parentNode) {\n    if(node.nodeType != 1) return false\n    if(matchesSelector.call(node, selector)) return node\n  }\n  return false\n}\n</code></pre>\n<p>Dès lors, dans nos listeners, on pourra directement procéder ainsi :</p>\n<pre><code class=\"language-javascript\">element.addEventListener(\"click\", function(evt){\n  var currentTarget = getCurrentTarget(evt.target, \".Button-action\")\n  if(!currentTarget) return\n  // all good with currentTarget\n})\n</code></pre>\n<h3 id=\"pour-lajax\"><a href=\"#pour-lajax\"></a>Pour l'Ajax</h3>\n<p>Pourquoi est-ce que l'on appelle ça encore Ajax, d'ailleurs ? Bref.</p>\n<p>Simple comme bonjour :</p>\n<pre><code class=\"language-javascript\">function isSuccessStatus(status){\n  return status >= 200 &#x26;&#x26; status &#x3C; 300 || status == 304\n}\n\nfunction ajax(options){\n  var xhr = new XMLHttpRequest()\n  var done = false\n  var async = options.hasOwnProperty(\"async\") ? options.async : true\n\n  xhr.open(options.method || \"GET\", options.url, async)\n\n  xhr.onreadystatechange = function(){\n    if(done) return\n    if(this.readyState != 4) return\n    done = true\n\n    if(isSuccessStatus(this.status)) {\n      if(options.success) {\n        options.success.call(this)\n      }\n      return\n    }\n\n    if(options.error) {\n      options.error.call(this)\n    }\n  }\n  Object.keys(options.headers || {})\n    .forEach(function(key){\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n  xhr.send(options.data || null)\n  return xhr\n}\n</code></pre>\n<p>Cette fonction offre un support basique de XHR :</p>\n<pre><code class=\"language-javascript\">var myXHR = ajax({\n    url : \"api/users\",\n    success : function(){\n      doStuff(this.responseText)\n    },\n    error : function(){\n      showError(this.status)\n    }\n})\n</code></pre>\n<h3 id=\"es5-magic\"><a href=\"#es5-magic\"></a>ES5 magic</h3>\n<p>ECMAScript 5 délivre des petites méthodes très intéressantes pour se simplifier la vie, fortement inspirées par ce qu'on a l'habitude de trouver dans les bibliothèques ayant connu l'âge d'or, comme <a href=\"http://prototypejs.org\">PrototypeJS</a> ou <a href=\"http://mootools.net\">MooTools</a>.</p>\n<p>Dès lors, plutôt qu'un ennuyeux :</p>\n<pre><code class=\"language-javascript\">var key, item\nfor(key in myObject) {\n  if(myObject.hasOwnProperty(key)) {\n    item = myObject[key]\n    // do something\n  }\n}\n</code></pre>\n<p>on peut se contenter d'un :</p>\n<pre><code class=\"language-javascript\">Object.keys(myObject)\n  .forEach(function(key){\n    var item = myObject[i]\n    // do something\n  })\n</code></pre>\n<p>De même, on bénéficie de méthodes s'avérant très utiles, comme\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\"><code>Array.prototype.map</code>, <code>Array.prototype.reduce</code>, <code>Array.prototype.filter</code></a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object.create</code>, <code>Object.getPrototypeOf</code>, <code>Object.getOwnPropertyNames</code>, <code>Object.defineProperty</code></a>. Si cela t'intéresse, je t'invite vivement à te renseigner sur ces dernières.\nEt si tu veux avoir plus de détails, read the fucking manual :\n<a href=\"http://es5.github.io\">http://es5.github.io</a>.</p>\n<h3 id=\"des-petits-détails-cools-du-côté-des-events\"><a href=\"#des-petits-d%C3%A9tails-cools-du-c%C3%B4t%C3%A9-des-events\"></a>Des petits détails cools du côté des events</h3>\n<p>Avec <code>addEventListener</code>, on peut aussi passer un objet comme listener, avec <code>handleEvent</code> pour interface :</p>\n<pre><code class=\"language-javascript\">var myElementClickEvents = {\n    element : myElement,\n    callbacks : [],\n    handleEvent : function(evt){\n      var self = this\n      this.callbacks.forEach(function(item){\n        item.call(self.element, evt)\n      })\n    }\n}\nmyElement.addEventListener(\"click\", myElementClickEvents)\n\nmyElementClickEvents.callbacks.push(function(evt){\n  console.log(evt)\n})\n</code></pre>\n<p>Avec ça, on peut facilement garder une trace de ce qu'on passé comme listeners.</p>\n<h3 id=\"du-type-checking-\"><a href=\"#du-type-checking-\"></a>Du type checking ?</h3>\n<pre><code class=\"language-javascript\">var getClass = function(o){ return Object.prototype.toString.call(o) }\nvar someString = new String(\"foo\")\n\ntypeof someString // \"object\"\ngetClass(someString) // \"[object String]\", sounds more reasonable\n</code></pre>\n<h3 id=\"petit-bonus\"><a href=\"#petit-bonus\"></a>Petit bonus</h3>\n<p>Un petit bonus rien que pour toi : pour avoir une syntaxe plus sympathique et plus claire que les prototypes.</p>\n<p>En principe, on fait comme ça :</p>\n<pre><code class=\"language-javascript\">function Animal(name){\n  this.name = name\n}\n\nAnimal.prototype.getName = function(){\n  return this.name\n}\n\nfunction Cat(name){\n  Animal.call(this, name)\n}\n\nfunction K(){}\nK.prototype = Animal.prototype\n\nCat.prototype = new K\nCat.prototype.constructor = Cat\nCat.prototype.type = \"cat\"\n\nvar myAnimal = new Animal(\"Foo\")\nvar myCat = new Cat(\"Bar\")\n\nmyCat instanceof Cat // true\nmyCat instanceof Animal // true\n</code></pre>\n<p>Maintenant, à l'aide de deux petites méthodes :</p>\n<pre><code class=\"language-javascript\">// wow\n//         many magic\n//   very es5\n//            wow\nfunction extend(object){\n  var self = Object.create(this)\n  if(!object) return self\n  Object.keys(object)\n    .forEach(function(key){\n      self[key] = object[key]\n    })\n  return self\n}\n\nfunction create(){\n  var self = Object.create(this)\n  if(typeof self.constructor == \"function\") {\n    self.constructor.apply(self, arguments)\n  }\n  return self\n}\n\nvar klass = {\n    create : create,\n    extend : extend\n}\n</code></pre>\n<p>Tu peux faire ça :</p>\n<pre><code class=\"language-javascript\">var animal = klass.extend({\n    constructor : function(name){\n      this.name = name\n    },\n    getName : function(){\n      return this.name\n    }\n})\n\nvar cat = animal.extend({\n    constructor : function(name){\n      animal.constructor.call(this, name)\n    },\n    type : \"cat\"\n})\n\nvar myAnimal = animal.create(\"Foo\")\nvar myCat = cat.create(\"Bar\")\n\ncat.isPrototypeOf(myCat) // true\nanimal.isPrototypeOf(myCat) // true\n</code></pre>\n<p>Voilà, j'espère que cela a pu attiser ta curiosité d'en apprendre plus sur le langage lui-même et le DOM.</p>\n","rawBody":"\n** Petite note préalable ** : évidemment que ça ne marche pas sous les vieux navigateurs, cet article s'adresse principalement à toi pour te faire comprendre comment les choses marchent.\n\nDe plus en plus, le besoin de légèreté se fait sentir sur les pages. En dépit d'un web plus rapide sur desktop, on a maintenant beaucoup de devices connectés via 3G ou Edge (un petit coucou au métro parisien). Du coup, tu te rendras vite compte qu'embarquer jQuery + jQuery Mobile + jQuery UI et un tas d'autres plug-ins grapillés sur le web, ça commence à peser.\n\n## Pour la sélection d'élements\n\nPour remplacer ton bon vieux <code>$</code> magique, `document.querySelectorAll` semble faire l'affaire. En revanche, il retourne une instance de `NodeList`, pas d'`Array`, ce qui ne nous arrange pas des masses.\n\nDu coup, on peut écrire une petite function toute con, qui nous retourne un `Array` et ses méthodes bien utiles.\n\n```javascript\nvar nativeSlice = [].slice // la méthode de conversion\n\nfunction $(selector){\n  var list = document.querySelectorAll(selector)\n  return nativeSlice.call(list)\n}\n```\n\nAlternativement, tu peux utiliser `Array.apply(null, list)` plutôt que `nativeSlice.call(list)`, si vraiment ça te fait plaisir.\n\nUne troisième solution, un peu plus chiante au quotidien (et terriblement laide), c'est d'utiliser directement les méthodes qui t'intéressent (ex. `[].forEach`) de cette façon :\n\n```javascript\n;[].forEach.call(document.querySelectorAll(selector), function(element){\n  // do something w/ element\n})\n```\n\nPour en revenir à notre petite méthode <code>$</code>, on peut du coup faire :\n\n```javascript\n// prends bien l'habitude de garder\n// tes nodeLists si tu les réutilises\n\nvar elements = $(\".my-elements-className\")\n\nelements.forEach(function(element){\n  // do something w/ element\n})\n```\n\n### Pour l'event delegation\n\nL'event delegation, c'est bien, mangez-en. Ça permet, entre autres, de ne pas attacher 150 listeners uniques à 150 éléments différents, mais à attacher un seul listener sur un parent commun, et analyser les sources des évènements à l'intérieur en se basant sur le **bubbling** (remontée d'évènements de la source au plus haut parent) ou **capturing** (descente d'évènements du plus haut parent à la source, avant même que la source ne le reçoive).\n\nPour faire de la délégation, on va procéder en trois temps :\n\n* Choper `event.target`\n* Vérifier que le sélecteur qui nous intéresse correspond bien à `event.target` ou un de ses parents (dans le cas où l'on clique sur le `.icon-Arrow` dans `.js-Button-action`)\n* Si ça match, on garde l'élement correspondant au sélecteur, sinon, exit\n\nLes browsers relativement récents possèdent une méthode : `matchesSelector` (et tous ses alias préfixés). Ce qu'on peut donc faire, c'est ceci :\n\n```javascript\nvar docEl = document.documentElement\n    // si c'est dans docEl, c'est que c'est dispo\nvar nativeMatchesSelector =\n      docEl.matchesSelector ||\n      docEl.webkitMatchesSelector ||\n      docEl.mozMatchesSelector ||\n      docEl.oMatchesSelector ||\n      docEl.msMatchesSelector\nvar matchesSelector = nativeMatchesSelector || matchesPolyfill\n\n// le polyfill utilise querySelectorAll\n// et cherche dans le parent de l'élement\nfunction matchesPolyfill(selector){\n  var node = this\n  var parent = node.parentNode\n  var query, index, length\n  if(!parent || parent.nodeType != 1) {\n    return false\n  }\n  query = parent.querySelectorAll(selector)\n  index = -1\n  length = query.length\n  while(++index < length) {\n    if(query[index] == node) return true\n  }\n  return false\n}\n\nfunction getCurrentTarget(node, selector){\n  if(matchesSelector.call(node, selector)) return node\n  while(node = node.parentNode) {\n    if(node.nodeType != 1) return false\n    if(matchesSelector.call(node, selector)) return node\n  }\n  return false\n}\n```\n\nDès lors, dans nos listeners, on pourra directement procéder ainsi :\n\n```javascript\nelement.addEventListener(\"click\", function(evt){\n  var currentTarget = getCurrentTarget(evt.target, \".Button-action\")\n  if(!currentTarget) return\n  // all good with currentTarget\n})\n```\n\n### Pour l'Ajax\n\nPourquoi est-ce que l'on appelle ça encore Ajax, d'ailleurs ? Bref.\n\nSimple comme bonjour :\n\n```javascript\nfunction isSuccessStatus(status){\n  return status >= 200 && status < 300 || status == 304\n}\n\nfunction ajax(options){\n  var xhr = new XMLHttpRequest()\n  var done = false\n  var async = options.hasOwnProperty(\"async\") ? options.async : true\n\n  xhr.open(options.method || \"GET\", options.url, async)\n\n  xhr.onreadystatechange = function(){\n    if(done) return\n    if(this.readyState != 4) return\n    done = true\n\n    if(isSuccessStatus(this.status)) {\n      if(options.success) {\n        options.success.call(this)\n      }\n      return\n    }\n\n    if(options.error) {\n      options.error.call(this)\n    }\n  }\n  Object.keys(options.headers || {})\n    .forEach(function(key){\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n  xhr.send(options.data || null)\n  return xhr\n}\n```\n\nCette fonction offre un support basique de XHR :\n\n```javascript\nvar myXHR = ajax({\n    url : \"api/users\",\n    success : function(){\n      doStuff(this.responseText)\n    },\n    error : function(){\n      showError(this.status)\n    }\n})\n```\n\n### ES5 magic\n\nECMAScript 5 délivre des petites méthodes très intéressantes pour se simplifier la vie, fortement inspirées par ce qu'on a l'habitude de trouver dans les bibliothèques ayant connu l'âge d'or, comme [PrototypeJS](http://prototypejs.org) ou [MooTools](http://mootools.net).\n\nDès lors, plutôt qu'un ennuyeux :\n\n```javascript\nvar key, item\nfor(key in myObject) {\n  if(myObject.hasOwnProperty(key)) {\n    item = myObject[key]\n    // do something\n  }\n}\n```\n\non peut se contenter d'un :\n\n```javascript\nObject.keys(myObject)\n  .forEach(function(key){\n    var item = myObject[i]\n    // do something\n  })\n```\n\nDe même, on bénéficie de méthodes s'avérant très utiles, comme\n[`Array.prototype.map`, `Array.prototype.reduce`, `Array.prototype.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype),\n[`Object.create`, `Object.getPrototypeOf`, `Object.getOwnPropertyNames`, `Object.defineProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). Si cela t'intéresse, je t'invite vivement à te renseigner sur ces dernières.\nEt si tu veux avoir plus de détails, read the fucking manual :\n[http://es5.github.io](http://es5.github.io).\n\n\n### Des petits détails cools du côté des events\n\nAvec `addEventListener`, on peut aussi passer un objet comme listener, avec `handleEvent` pour interface :\n\n```javascript\nvar myElementClickEvents = {\n    element : myElement,\n    callbacks : [],\n    handleEvent : function(evt){\n      var self = this\n      this.callbacks.forEach(function(item){\n        item.call(self.element, evt)\n      })\n    }\n}\nmyElement.addEventListener(\"click\", myElementClickEvents)\n\nmyElementClickEvents.callbacks.push(function(evt){\n  console.log(evt)\n})\n```\n\nAvec ça, on peut facilement garder une trace de ce qu'on passé comme listeners.\n\n### Du type checking ?\n\n```javascript\nvar getClass = function(o){ return Object.prototype.toString.call(o) }\nvar someString = new String(\"foo\")\n\ntypeof someString // \"object\"\ngetClass(someString) // \"[object String]\", sounds more reasonable\n```\n\n### Petit bonus\n\nUn petit bonus rien que pour toi : pour avoir une syntaxe plus sympathique et plus claire que les prototypes.\n\nEn principe, on fait comme ça :\n\n```javascript\nfunction Animal(name){\n  this.name = name\n}\n\nAnimal.prototype.getName = function(){\n  return this.name\n}\n\nfunction Cat(name){\n  Animal.call(this, name)\n}\n\nfunction K(){}\nK.prototype = Animal.prototype\n\nCat.prototype = new K\nCat.prototype.constructor = Cat\nCat.prototype.type = \"cat\"\n\nvar myAnimal = new Animal(\"Foo\")\nvar myCat = new Cat(\"Bar\")\n\nmyCat instanceof Cat // true\nmyCat instanceof Animal // true\n```\n\nMaintenant, à l'aide de deux petites méthodes :\n\n```javascript\n// wow\n//         many magic\n//   very es5\n//            wow\nfunction extend(object){\n  var self = Object.create(this)\n  if(!object) return self\n  Object.keys(object)\n    .forEach(function(key){\n      self[key] = object[key]\n    })\n  return self\n}\n\nfunction create(){\n  var self = Object.create(this)\n  if(typeof self.constructor == \"function\") {\n    self.constructor.apply(self, arguments)\n  }\n  return self\n}\n\nvar klass = {\n    create : create,\n    extend : extend\n}\n```\n\nTu peux faire ça :\n\n```javascript\nvar animal = klass.extend({\n    constructor : function(name){\n      this.name = name\n    },\n    getName : function(){\n      return this.name\n    }\n})\n\nvar cat = animal.extend({\n    constructor : function(name){\n      animal.constructor.call(this, name)\n    },\n    type : \"cat\"\n})\n\nvar myAnimal = animal.create(\"Foo\")\nvar myCat = cat.create(\"Bar\")\n\ncat.isPrototypeOf(myCat) // true\nanimal.isPrototypeOf(myCat) // true\n```\n\nVoilà, j'espère que cela a pu attiser ta curiosité d'en apprendre plus sur le langage lui-même et le DOM.\n","raw":"---\ndate: \"2013-12-06\"\ntitle: Comment se passer de libraries/frameworks JavaScript\ntags:\n  - javascript\n  - frameworks\n  - libraries\nauthors:\n  - bloodyowl\n---\n\n** Petite note préalable ** : évidemment que ça ne marche pas sous les vieux navigateurs, cet article s'adresse principalement à toi pour te faire comprendre comment les choses marchent.\n\nDe plus en plus, le besoin de légèreté se fait sentir sur les pages. En dépit d'un web plus rapide sur desktop, on a maintenant beaucoup de devices connectés via 3G ou Edge (un petit coucou au métro parisien). Du coup, tu te rendras vite compte qu'embarquer jQuery + jQuery Mobile + jQuery UI et un tas d'autres plug-ins grapillés sur le web, ça commence à peser.\n\n## Pour la sélection d'élements\n\nPour remplacer ton bon vieux <code>$</code> magique, `document.querySelectorAll` semble faire l'affaire. En revanche, il retourne une instance de `NodeList`, pas d'`Array`, ce qui ne nous arrange pas des masses.\n\nDu coup, on peut écrire une petite function toute con, qui nous retourne un `Array` et ses méthodes bien utiles.\n\n```javascript\nvar nativeSlice = [].slice // la méthode de conversion\n\nfunction $(selector){\n  var list = document.querySelectorAll(selector)\n  return nativeSlice.call(list)\n}\n```\n\nAlternativement, tu peux utiliser `Array.apply(null, list)` plutôt que `nativeSlice.call(list)`, si vraiment ça te fait plaisir.\n\nUne troisième solution, un peu plus chiante au quotidien (et terriblement laide), c'est d'utiliser directement les méthodes qui t'intéressent (ex. `[].forEach`) de cette façon :\n\n```javascript\n;[].forEach.call(document.querySelectorAll(selector), function(element){\n  // do something w/ element\n})\n```\n\nPour en revenir à notre petite méthode <code>$</code>, on peut du coup faire :\n\n```javascript\n// prends bien l'habitude de garder\n// tes nodeLists si tu les réutilises\n\nvar elements = $(\".my-elements-className\")\n\nelements.forEach(function(element){\n  // do something w/ element\n})\n```\n\n### Pour l'event delegation\n\nL'event delegation, c'est bien, mangez-en. Ça permet, entre autres, de ne pas attacher 150 listeners uniques à 150 éléments différents, mais à attacher un seul listener sur un parent commun, et analyser les sources des évènements à l'intérieur en se basant sur le **bubbling** (remontée d'évènements de la source au plus haut parent) ou **capturing** (descente d'évènements du plus haut parent à la source, avant même que la source ne le reçoive).\n\nPour faire de la délégation, on va procéder en trois temps :\n\n* Choper `event.target`\n* Vérifier que le sélecteur qui nous intéresse correspond bien à `event.target` ou un de ses parents (dans le cas où l'on clique sur le `.icon-Arrow` dans `.js-Button-action`)\n* Si ça match, on garde l'élement correspondant au sélecteur, sinon, exit\n\nLes browsers relativement récents possèdent une méthode : `matchesSelector` (et tous ses alias préfixés). Ce qu'on peut donc faire, c'est ceci :\n\n```javascript\nvar docEl = document.documentElement\n    // si c'est dans docEl, c'est que c'est dispo\nvar nativeMatchesSelector =\n      docEl.matchesSelector ||\n      docEl.webkitMatchesSelector ||\n      docEl.mozMatchesSelector ||\n      docEl.oMatchesSelector ||\n      docEl.msMatchesSelector\nvar matchesSelector = nativeMatchesSelector || matchesPolyfill\n\n// le polyfill utilise querySelectorAll\n// et cherche dans le parent de l'élement\nfunction matchesPolyfill(selector){\n  var node = this\n  var parent = node.parentNode\n  var query, index, length\n  if(!parent || parent.nodeType != 1) {\n    return false\n  }\n  query = parent.querySelectorAll(selector)\n  index = -1\n  length = query.length\n  while(++index < length) {\n    if(query[index] == node) return true\n  }\n  return false\n}\n\nfunction getCurrentTarget(node, selector){\n  if(matchesSelector.call(node, selector)) return node\n  while(node = node.parentNode) {\n    if(node.nodeType != 1) return false\n    if(matchesSelector.call(node, selector)) return node\n  }\n  return false\n}\n```\n\nDès lors, dans nos listeners, on pourra directement procéder ainsi :\n\n```javascript\nelement.addEventListener(\"click\", function(evt){\n  var currentTarget = getCurrentTarget(evt.target, \".Button-action\")\n  if(!currentTarget) return\n  // all good with currentTarget\n})\n```\n\n### Pour l'Ajax\n\nPourquoi est-ce que l'on appelle ça encore Ajax, d'ailleurs ? Bref.\n\nSimple comme bonjour :\n\n```javascript\nfunction isSuccessStatus(status){\n  return status >= 200 && status < 300 || status == 304\n}\n\nfunction ajax(options){\n  var xhr = new XMLHttpRequest()\n  var done = false\n  var async = options.hasOwnProperty(\"async\") ? options.async : true\n\n  xhr.open(options.method || \"GET\", options.url, async)\n\n  xhr.onreadystatechange = function(){\n    if(done) return\n    if(this.readyState != 4) return\n    done = true\n\n    if(isSuccessStatus(this.status)) {\n      if(options.success) {\n        options.success.call(this)\n      }\n      return\n    }\n\n    if(options.error) {\n      options.error.call(this)\n    }\n  }\n  Object.keys(options.headers || {})\n    .forEach(function(key){\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n  xhr.send(options.data || null)\n  return xhr\n}\n```\n\nCette fonction offre un support basique de XHR :\n\n```javascript\nvar myXHR = ajax({\n    url : \"api/users\",\n    success : function(){\n      doStuff(this.responseText)\n    },\n    error : function(){\n      showError(this.status)\n    }\n})\n```\n\n### ES5 magic\n\nECMAScript 5 délivre des petites méthodes très intéressantes pour se simplifier la vie, fortement inspirées par ce qu'on a l'habitude de trouver dans les bibliothèques ayant connu l'âge d'or, comme [PrototypeJS](http://prototypejs.org) ou [MooTools](http://mootools.net).\n\nDès lors, plutôt qu'un ennuyeux :\n\n```javascript\nvar key, item\nfor(key in myObject) {\n  if(myObject.hasOwnProperty(key)) {\n    item = myObject[key]\n    // do something\n  }\n}\n```\n\non peut se contenter d'un :\n\n```javascript\nObject.keys(myObject)\n  .forEach(function(key){\n    var item = myObject[i]\n    // do something\n  })\n```\n\nDe même, on bénéficie de méthodes s'avérant très utiles, comme\n[`Array.prototype.map`, `Array.prototype.reduce`, `Array.prototype.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype),\n[`Object.create`, `Object.getPrototypeOf`, `Object.getOwnPropertyNames`, `Object.defineProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). Si cela t'intéresse, je t'invite vivement à te renseigner sur ces dernières.\nEt si tu veux avoir plus de détails, read the fucking manual :\n[http://es5.github.io](http://es5.github.io).\n\n\n### Des petits détails cools du côté des events\n\nAvec `addEventListener`, on peut aussi passer un objet comme listener, avec `handleEvent` pour interface :\n\n```javascript\nvar myElementClickEvents = {\n    element : myElement,\n    callbacks : [],\n    handleEvent : function(evt){\n      var self = this\n      this.callbacks.forEach(function(item){\n        item.call(self.element, evt)\n      })\n    }\n}\nmyElement.addEventListener(\"click\", myElementClickEvents)\n\nmyElementClickEvents.callbacks.push(function(evt){\n  console.log(evt)\n})\n```\n\nAvec ça, on peut facilement garder une trace de ce qu'on passé comme listeners.\n\n### Du type checking ?\n\n```javascript\nvar getClass = function(o){ return Object.prototype.toString.call(o) }\nvar someString = new String(\"foo\")\n\ntypeof someString // \"object\"\ngetClass(someString) // \"[object String]\", sounds more reasonable\n```\n\n### Petit bonus\n\nUn petit bonus rien que pour toi : pour avoir une syntaxe plus sympathique et plus claire que les prototypes.\n\nEn principe, on fait comme ça :\n\n```javascript\nfunction Animal(name){\n  this.name = name\n}\n\nAnimal.prototype.getName = function(){\n  return this.name\n}\n\nfunction Cat(name){\n  Animal.call(this, name)\n}\n\nfunction K(){}\nK.prototype = Animal.prototype\n\nCat.prototype = new K\nCat.prototype.constructor = Cat\nCat.prototype.type = \"cat\"\n\nvar myAnimal = new Animal(\"Foo\")\nvar myCat = new Cat(\"Bar\")\n\nmyCat instanceof Cat // true\nmyCat instanceof Animal // true\n```\n\nMaintenant, à l'aide de deux petites méthodes :\n\n```javascript\n// wow\n//         many magic\n//   very es5\n//            wow\nfunction extend(object){\n  var self = Object.create(this)\n  if(!object) return self\n  Object.keys(object)\n    .forEach(function(key){\n      self[key] = object[key]\n    })\n  return self\n}\n\nfunction create(){\n  var self = Object.create(this)\n  if(typeof self.constructor == \"function\") {\n    self.constructor.apply(self, arguments)\n  }\n  return self\n}\n\nvar klass = {\n    create : create,\n    extend : extend\n}\n```\n\nTu peux faire ça :\n\n```javascript\nvar animal = klass.extend({\n    constructor : function(name){\n      this.name = name\n    },\n    getName : function(){\n      return this.name\n    }\n})\n\nvar cat = animal.extend({\n    constructor : function(name){\n      animal.constructor.call(this, name)\n    },\n    type : \"cat\"\n})\n\nvar myAnimal = animal.create(\"Foo\")\nvar myCat = cat.create(\"Bar\")\n\ncat.isPrototypeOf(myCat) // true\nanimal.isPrototypeOf(myCat) // true\n```\n\nVoilà, j'espère que cela a pu attiser ta curiosité d'en apprendre plus sur le langage lui-même et le DOM.\n","__filename":"fr/articles/js/comment-se-passer-de-libraries-frameworks-javascript/index.md","__url":"/fr/articles/js/comment-se-passer-de-libraries-frameworks-javascript/","__resourceUrl":"/fr/articles/js/comment-se-passer-de-libraries-frameworks-javascript/index.html","__dataUrl":"/fr/articles/js/comment-se-passer-de-libraries-frameworks-javascript/index.html.5a4d66129887720369e5db9cb5591591.json"}