{"head":{"layout":"Post","comments":true,"date":"2014-05-01","title":"Introduction au testing js front","tags":["javascript","tape","unit-test","browserify"],"authors":["bloodyowl"],"description":"Les tests automatisés en front-end ont longtemps été ignorés, et le sont encore trop. Écrire des tests peut paraître chiant, mais le temps…"},"body":"<p>Les tests automatisés en front-end ont longtemps été ignorés,\net le sont encore trop.</p>\n<p>Écrire des tests peut paraître chiant, mais le temps qu'ils rapportent\ncompense largement celui que l'on passe à les écrire.</p>\n<h2 id=\"Écrire-du-js-testable\"><a href=\"#%C3%89crire-du-js-testable\"></a>Écrire du js testable</h2>\n<p>Prenons un exemple simple et moche :</p>\n<pre><code class=\"language-javascript\">//app.js\n;(function(){\n\n  var cart = $(\"#cart\")\n  function addToCart(id){\n    var element = $(\"&#x3C;li>&#x3C;/li>\")\n    element.html(catalog[id])\n    cart.append(element)\n  }\n\n  $(\".js-updateCart\")\n    .on(\"click\", function(eventObject){\n      addToCart($(this).data(\"id\"))\n    })\n\n})()\n</code></pre>\n<p>Tester ce code est particulièrement lourd, pour plusieurs raisons :</p>\n<ul>\n<li>les functions à tester ne sont pas accessibles</li>\n<li>on doit simuler un <code>click</code> pour tester un comportement logique.</li>\n<li>on doit créer un element et modifier son <code>data-id</code> à chaque cas souhaité.</li>\n<li>pour tester <code>addToCart</code> on doit aller regarder dans le DOM.</li>\n</ul>\n<h3 id=\"1-rendez-accessibles-vos-méthodes-au-test-runner\"><a href=\"#1-rendez-accessibles-vos-m%C3%A9thodes-au-test-runner\"></a>1. Rendez accessibles vos méthodes au test runner</h3>\n<p>Vous pouvez utiliser un namespace adéquat.</p>\n<pre><code class=\"language-javascript\">var app = window.app = {}\napp.cart = {}\napp.cart.addToCart = function(){ /* … */ }\n</code></pre>\n<p>Mais ne souhaitez probablement pas rendre vos méthodes accessibles à la console.</p>\n<p>Utilisez un module-system : <a href=\"http://browserify.org\">browserify</a> ou\n<a href=\"http://requirejs.org\">requirejs</a> (si vous n'avez pas besoin de chargement\nconditionnel et souhaitez créer un bundle par build, utilisez browserify qui\npossède une syntaxe beaucoup plus sympathique et une codebase réduite, vous\npourrez même <code>require</code> depuis un module npm\n<a href=\"/fr/articles/js/browserify/\">comme on vous l'explique dans un article dédié</a>).</p>\n<pre><code class=\"language-javascript\">var $ = require(\"jquery\") // oh, un module npm\n\nmodule.exports = {\n  element : $(\"#cart\"),\n  addToCart : function(){\n    /* … */\n  }\n}\n</code></pre>\n<p>Vous pourrez ainsi séparer proprement votre application en modules et les tester individuellement.</p>\n<h3 id=\"2-oui-mais-les-modules-interdépendants-alors-\"><a href=\"#2-oui-mais-les-modules-interd%C3%A9pendants-alors-\"></a>2. Oui, mais les modules interdépendants alors ?</h3>\n<p>Là, ça devient un peu plus tricky.\nCe que je conseille à titre personnel c'est d'utiliser des events\npour faire communiquer les différentes parties de l'application.</p>\n<p>Cela permet d'éviter d'utiliser des mocks d'autres parties de l'application partout.</p>\n<p>Par exemple, si je souhaite tester le fait qu'un click sur <code>.js-updateCart</code>\ndéclanchera bien <code>updateCart</code> :</p>\n<pre><code class=\"language-javascript\">//view.js\n\n// view est une petite class qui route les events\n// en rendant les listeners accessibles aux tests\n// vous pouvez très facilement en concevoir une\n// à votre goût en quelques lignes de code\nvar view = require(\"../lib/view\")\n\n// eventbus est l'event bus de l'application, il orchestre\n// la communication entre les différents modules\nvar eventbus = require(\"../eventbus\")\n\nvar $ = require(\"jquery\")\n\nmodule.exports = view.extend({\n  element : document.body,\n  events : [\n    {\n      type : \"click\",\n      selector : \".js-addToCart\",\n      listener : \"addToCart\"\n    }\n  ],\n  addToCart : function(eventObject){\n    var target = eventObject.currentTarget\n    var id = $(target).data(\"id\")\n    eventbus.fire(\"addToCart\", {\n      id : id\n    })\n  }\n})\n</code></pre>\n<p>et je n'aurais qu'à écouter cet event depuis <code>cart</code> :</p>\n<pre><code class=\"language-javascript\">// cart.js\nvar eventbus = require(\"../eventbus\")\nvar catalog = require(\"../catalog\")\n\nmodule.exports = {\n  initialize : function(){\n    this._addToCart = this.addToCart.bind(this)\n    eventbus.listen(\"addToCart\", this._addToCart)\n  },\n  release : function(){\n    eventbus.stopListening(\"addToCart\", this._addToCart)\n  },\n  addToCart : function(eventObject){\n    // et on a eventObject.id\n    this.products.push(catalog[eventObject.currentTarget.data(\"id\")])\n  }\n}\n</code></pre>\n<p>Grâce à cette architecture, je vais pouvoir tester individuellement\nles deux modules.</p>\n<pre><code class=\"language-javascript\">// view.test.js\n\nvar tape = require(\"tape\")\nvar view = require(\"../app/view\")\nvar eventbus = require(\"../eventbus\")\nvar $ = require(\"jquery\")\n\ntape(\"view\", function(test){\n  test.plan(1)\n  var element = $(\"&#x3C;div>&#x3C;/div>\")\n  element.data(\"id\", 1)\n  // on teste facilement l'envoi\n  eventbus.listen(\"addToCart\", function(eventObject){\n    test.equal(eventObject.id, 1)\n  })\n  view.addToCart({\n    currentTarget : element\n  })\n})\n</code></pre>\n<pre><code class=\"language-javascript\">// cart.test.js\n\nvar tape = require(\"tape\")\nvar cart = require(\"../app/cart\")\nvar eventbus = require(\"../eventbus\")\nvar catalog = require(\"../catalog\")\n\ntape(\"cart\", function(test){\n  cart.initialize()\n  eventbus.fireSync(\"addToCart\", {id:1})\n  test.deepEqual(\n    cart[0],\n    catalog[1],\n    \"receives addToCart event\"\n  )\n  test.end()\n})\n</code></pre>\n<h2 id=\"tester-tous-les-cas-possibles\"><a href=\"#tester-tous-les-cas-possibles\"></a>Tester tous les cas possibles</h2>\n<p>Ce sont souvent les edge-cases qui nous font nous arracher les cheveux.\nPour pallier ces soucis, tester en profondeur est essentiel.</p>\n<p>Prenons un exemple, une méthode qui teste si la valeur qu'on lui passe est\nune <code>string</code>.</p>\n<p>On serait tenté de simplement tester les résultats positifs de cette façon :</p>\n<pre><code class=\"language-javascript\">tape(\"type.isString on strings\", function(test){\n  test.equal(type.isString(\"\"), true)\n  test.end()\n})\n</code></pre>\n<p>Or, si par mégarde ma méthode <code>isString</code> se révèle être :</p>\n<pre><code class=\"language-javascript\">type.isString = function(value) {\n  return typeof value == \"string\"\n}\n</code></pre>\n<p>on ne vérifie pas le cas <code>type.isString(new String(\"\"))</code>.</p>\n<p>Du coup, des tests complets :</p>\n<pre><code class=\"language-javascript\">tape(\"type.isString on strings\", function(test){\n  test.equal(type.isString(\"\"), true)\n  test.equal(type.isString(new String(\"\")), false)\n  test.end()\n})\n</code></pre>\n<p>permettent ici d'identifier qu'en réalité on a besoin de :</p>\n<pre><code class=\"language-javascript\">type.isString = function(value) {\n  return Object.prototype.toString.call(value) == \"[object String]\"\n}\n</code></pre>\n<p>Et c'est à la force des résultats de tests que vous identifierez rapidement\nvous familiariserez à tous ces edge-cases.</p>\n<p>À chaque correctif de bug, ajoutez des tests (mais ça, vous le saviez déjà).</p>\n<h2 id=\"cross-browser-testing\"><a href=\"#cross-browser-testing\"></a>Cross-browser testing</h2>\n<p>À l'heure actuelle, où l'on se trouve notamment très souvent avec du\nfeature testing.\nPour le tester complètement, on doit se servir de vrais navigateurs :\nun headless (certes, très pratique) comme <a href=\"http://phantomjs.org\">phantomjs</a>\nne permettra pas d'obtenir 100% de coverage.</p>\n<pre><code class=\"language-javascript\">var supportsAnimationFrame =\n  !!(\n    win.requestAnimationFrame ||\n    win.webkitRequestAnimationFrame ||\n    win.mozRequestAnimationFrame ||\n    win.ORequestAnimationFrame ||\n    // vous avez fait une faute de frappe,\n    // et mis un `O` majuscule, seul un\n    // test sur les version concernées d'Opera\n    // vous permettront de l'identifier\n    win.msRequestAnimationFrame\n  )\n</code></pre>\n<p>De plus, vous pouvez par habitude être tenté d'utiliser un\n<code>Array.prototype.forEach</code> alors que votre scope navigateur inclut\nIE8; seuls des tests sur un vrai browser vous permettront d'identifier le souci.</p>\n<p>Je vous conseille fortement testling, très simple à intégrer dans vos\nmodules, et gratuit pour tout projet open-source.</p>\n<p>Dans le <code>package.json</code> :</p>\n<pre><code class=\"language-json\">{\n  \"testling\": {\n    \"files\": \"test/**/*.js\",\n    \"browsers\": [\n      \"ie/9..latest\",\n      \"chrome/22..latest\",\n      \"firefox/16..latest\",\n      \"safari/6..latest\",\n      \"opera/11.0..latest\",\n      \"iphone/6..latest\",\n      \"ipad/6..latest\",\n      \"android-browser/latest\"\n    ]\n  }\n}\n</code></pre>\n<p>Et ajouter un webhook dans l'admin de votre repository GitHub pointant vers</p>\n<blockquote>\n<p><a href=\"http://git.testling.com\">http://git.testling.com</a></p>\n</blockquote>\n<p>Vous pouvez l'utiliser avec tape (son test harness par défaut)\nMocha, QUnit et n'importe quelle bibliothèque\nde test supportant <code>TAP</code> comme indiqué sur\n<a href=\"https://ci.testling.com/guide/custom_libraries\">le site de testling</a>.</p>\n<p>Vous trouverez aussi des alternatives populaires\n<a href=\"http://www.browserstack.com\">similaires</a>,\nou ayant <a href=\"http://karma-runner.github.io\">une approche différente</a>.</p>\n<p>Par ailleurs, si dans votre code il existe des variations entre les navigateurs,\nvous pouvez utiliser du test conditionnel :</p>\n<pre><code class=\"language-javascript\">if(typeof {}.__proto__ == \"object\"){\n  test.equal(list.__proto__ === Array.prototype, false, \"__proto__ isn't Array.prototype\")\n} else {\n  test.equal(list instanceof Array, false, \"Isn't a window Array\")\n}\n</code></pre>\n<p>Happy testing!</p>\n<pre><code class=\"language-console\">$ testling\n\nTAP version 13\n# tests\nok 1 bisous\n\n1..1\n# tests 1\n# pass  1\n\n# ok\n</code></pre>\n","rawBody":"\nLes tests automatisés en front-end ont longtemps été ignorés,\net le sont encore trop.\n\nÉcrire des tests peut paraître chiant, mais le temps qu'ils rapportent\ncompense largement celui que l'on passe à les écrire.\n\n## Écrire du js testable\n\nPrenons un exemple simple et moche :\n\n```javascript\n//app.js\n;(function(){\n\n  var cart = $(\"#cart\")\n  function addToCart(id){\n    var element = $(\"<li></li>\")\n    element.html(catalog[id])\n    cart.append(element)\n  }\n\n  $(\".js-updateCart\")\n    .on(\"click\", function(eventObject){\n      addToCart($(this).data(\"id\"))\n    })\n\n})()\n```\n\nTester ce code est particulièrement lourd, pour plusieurs raisons :\n\n- les functions à tester ne sont pas accessibles\n- on doit simuler un `click` pour tester un comportement logique.\n- on doit créer un element et modifier son `data-id` à chaque cas souhaité.\n- pour tester `addToCart` on doit aller regarder dans le DOM.\n\n### 1. Rendez accessibles vos méthodes au test runner\n\nVous pouvez utiliser un namespace adéquat.\n\n```javascript\nvar app = window.app = {}\napp.cart = {}\napp.cart.addToCart = function(){ /* … */ }\n```\n\nMais ne souhaitez probablement pas rendre vos méthodes accessibles à la console.\n\nUtilisez un module-system : [browserify](http://browserify.org) ou\n[requirejs](http://requirejs.org) (si vous n'avez pas besoin de chargement\nconditionnel et souhaitez créer un bundle par build, utilisez browserify qui\npossède une syntaxe beaucoup plus sympathique et une codebase réduite, vous\npourrez même `require` depuis un module npm\n[comme on vous l'explique dans un article dédié](/fr/articles/js/browserify/)).\n\n```javascript\nvar $ = require(\"jquery\") // oh, un module npm\n\nmodule.exports = {\n  element : $(\"#cart\"),\n  addToCart : function(){\n    /* … */\n  }\n}\n```\n\nVous pourrez ainsi séparer proprement votre application en modules et les tester individuellement.\n\n### 2. Oui, mais les modules interdépendants alors ?\n\nLà, ça devient un peu plus tricky.\nCe que je conseille à titre personnel c'est d'utiliser des events\npour faire communiquer les différentes parties de l'application.\n\nCela permet d'éviter d'utiliser des mocks d'autres parties de l'application partout.\n\nPar exemple, si je souhaite tester le fait qu'un click sur `.js-updateCart`\ndéclanchera bien `updateCart` :\n\n```javascript\n//view.js\n\n// view est une petite class qui route les events\n// en rendant les listeners accessibles aux tests\n// vous pouvez très facilement en concevoir une\n// à votre goût en quelques lignes de code\nvar view = require(\"../lib/view\")\n\n// eventbus est l'event bus de l'application, il orchestre\n// la communication entre les différents modules\nvar eventbus = require(\"../eventbus\")\n\nvar $ = require(\"jquery\")\n\nmodule.exports = view.extend({\n  element : document.body,\n  events : [\n    {\n      type : \"click\",\n      selector : \".js-addToCart\",\n      listener : \"addToCart\"\n    }\n  ],\n  addToCart : function(eventObject){\n    var target = eventObject.currentTarget\n    var id = $(target).data(\"id\")\n    eventbus.fire(\"addToCart\", {\n      id : id\n    })\n  }\n})\n```\n\net je n'aurais qu'à écouter cet event depuis `cart` :\n\n```javascript\n// cart.js\nvar eventbus = require(\"../eventbus\")\nvar catalog = require(\"../catalog\")\n\nmodule.exports = {\n  initialize : function(){\n    this._addToCart = this.addToCart.bind(this)\n    eventbus.listen(\"addToCart\", this._addToCart)\n  },\n  release : function(){\n    eventbus.stopListening(\"addToCart\", this._addToCart)\n  },\n  addToCart : function(eventObject){\n    // et on a eventObject.id\n    this.products.push(catalog[eventObject.currentTarget.data(\"id\")])\n  }\n}\n```\n\nGrâce à cette architecture, je vais pouvoir tester individuellement\nles deux modules.\n\n```javascript\n// view.test.js\n\nvar tape = require(\"tape\")\nvar view = require(\"../app/view\")\nvar eventbus = require(\"../eventbus\")\nvar $ = require(\"jquery\")\n\ntape(\"view\", function(test){\n  test.plan(1)\n  var element = $(\"<div></div>\")\n  element.data(\"id\", 1)\n  // on teste facilement l'envoi\n  eventbus.listen(\"addToCart\", function(eventObject){\n    test.equal(eventObject.id, 1)\n  })\n  view.addToCart({\n    currentTarget : element\n  })\n})\n```\n\n```javascript\n// cart.test.js\n\nvar tape = require(\"tape\")\nvar cart = require(\"../app/cart\")\nvar eventbus = require(\"../eventbus\")\nvar catalog = require(\"../catalog\")\n\ntape(\"cart\", function(test){\n  cart.initialize()\n  eventbus.fireSync(\"addToCart\", {id:1})\n  test.deepEqual(\n    cart[0],\n    catalog[1],\n    \"receives addToCart event\"\n  )\n  test.end()\n})\n```\n\n## Tester tous les cas possibles\n\nCe sont souvent les edge-cases qui nous font nous arracher les cheveux.\nPour pallier ces soucis, tester en profondeur est essentiel.\n\nPrenons un exemple, une méthode qui teste si la valeur qu'on lui passe est\nune `string`.\n\nOn serait tenté de simplement tester les résultats positifs de cette façon :\n\n```javascript\ntape(\"type.isString on strings\", function(test){\n  test.equal(type.isString(\"\"), true)\n  test.end()\n})\n```\n\nOr, si par mégarde ma méthode `isString` se révèle être :\n\n```javascript\ntype.isString = function(value) {\n  return typeof value == \"string\"\n}\n```\n\non ne vérifie pas le cas `type.isString(new String(\"\"))`.\n\nDu coup, des tests complets :\n\n```javascript\ntape(\"type.isString on strings\", function(test){\n  test.equal(type.isString(\"\"), true)\n  test.equal(type.isString(new String(\"\")), false)\n  test.end()\n})\n```\n\npermettent ici d'identifier qu'en réalité on a besoin de :\n\n```javascript\ntype.isString = function(value) {\n  return Object.prototype.toString.call(value) == \"[object String]\"\n}\n```\n\nEt c'est à la force des résultats de tests que vous identifierez rapidement\nvous familiariserez à tous ces edge-cases.\n\nÀ chaque correctif de bug, ajoutez des tests (mais ça, vous le saviez déjà).\n\n## Cross-browser testing\n\nÀ l'heure actuelle, où l'on se trouve notamment très souvent avec du\nfeature testing.\nPour le tester complètement, on doit se servir de vrais navigateurs :\nun headless (certes, très pratique) comme [phantomjs](http://phantomjs.org)\nne permettra pas d'obtenir 100% de coverage.\n\n```javascript\nvar supportsAnimationFrame =\n  !!(\n    win.requestAnimationFrame ||\n    win.webkitRequestAnimationFrame ||\n    win.mozRequestAnimationFrame ||\n    win.ORequestAnimationFrame ||\n    // vous avez fait une faute de frappe,\n    // et mis un `O` majuscule, seul un\n    // test sur les version concernées d'Opera\n    // vous permettront de l'identifier\n    win.msRequestAnimationFrame\n  )\n```\n\nDe plus, vous pouvez par habitude être tenté d'utiliser un\n`Array.prototype.forEach` alors que votre scope navigateur inclut\nIE8; seuls des tests sur un vrai browser vous permettront d'identifier le souci.\n\nJe vous conseille fortement testling, très simple à intégrer dans vos\nmodules, et gratuit pour tout projet open-source.\n\nDans le `package.json` :\n\n```json\n{\n  \"testling\": {\n    \"files\": \"test/**/*.js\",\n    \"browsers\": [\n      \"ie/9..latest\",\n      \"chrome/22..latest\",\n      \"firefox/16..latest\",\n      \"safari/6..latest\",\n      \"opera/11.0..latest\",\n      \"iphone/6..latest\",\n      \"ipad/6..latest\",\n      \"android-browser/latest\"\n    ]\n  }\n}\n```\n\nEt ajouter un webhook dans l'admin de votre repository GitHub pointant vers\n\n> http://git.testling.com\n\nVous pouvez l'utiliser avec tape (son test harness par défaut)\nMocha, QUnit et n'importe quelle bibliothèque\nde test supportant `TAP` comme indiqué sur\n[le site de testling](https://ci.testling.com/guide/custom_libraries).\n\nVous trouverez aussi des alternatives populaires\n[similaires](http://www.browserstack.com),\nou ayant [une approche différente](http://karma-runner.github.io).\n\nPar ailleurs, si dans votre code il existe des variations entre les navigateurs,\nvous pouvez utiliser du test conditionnel :\n\n```javascript\nif(typeof {}.__proto__ == \"object\"){\n  test.equal(list.__proto__ === Array.prototype, false, \"__proto__ isn't Array.prototype\")\n} else {\n  test.equal(list instanceof Array, false, \"Isn't a window Array\")\n}\n```\n\nHappy testing!\n\n```console\n$ testling\n\nTAP version 13\n# tests\nok 1 bisous\n\n1..1\n# tests 1\n# pass  1\n\n# ok\n```\n","raw":"---\ndate: \"2014-05-01\"\ntitle: Introduction au testing js front\ntags:\n  - javascript\n  - tape\n  - unit-test\n  - browserify\nauthors:\n  - bloodyowl\n---\n\nLes tests automatisés en front-end ont longtemps été ignorés,\net le sont encore trop.\n\nÉcrire des tests peut paraître chiant, mais le temps qu'ils rapportent\ncompense largement celui que l'on passe à les écrire.\n\n## Écrire du js testable\n\nPrenons un exemple simple et moche :\n\n```javascript\n//app.js\n;(function(){\n\n  var cart = $(\"#cart\")\n  function addToCart(id){\n    var element = $(\"<li></li>\")\n    element.html(catalog[id])\n    cart.append(element)\n  }\n\n  $(\".js-updateCart\")\n    .on(\"click\", function(eventObject){\n      addToCart($(this).data(\"id\"))\n    })\n\n})()\n```\n\nTester ce code est particulièrement lourd, pour plusieurs raisons :\n\n- les functions à tester ne sont pas accessibles\n- on doit simuler un `click` pour tester un comportement logique.\n- on doit créer un element et modifier son `data-id` à chaque cas souhaité.\n- pour tester `addToCart` on doit aller regarder dans le DOM.\n\n### 1. Rendez accessibles vos méthodes au test runner\n\nVous pouvez utiliser un namespace adéquat.\n\n```javascript\nvar app = window.app = {}\napp.cart = {}\napp.cart.addToCart = function(){ /* … */ }\n```\n\nMais ne souhaitez probablement pas rendre vos méthodes accessibles à la console.\n\nUtilisez un module-system : [browserify](http://browserify.org) ou\n[requirejs](http://requirejs.org) (si vous n'avez pas besoin de chargement\nconditionnel et souhaitez créer un bundle par build, utilisez browserify qui\npossède une syntaxe beaucoup plus sympathique et une codebase réduite, vous\npourrez même `require` depuis un module npm\n[comme on vous l'explique dans un article dédié](/fr/articles/js/browserify/)).\n\n```javascript\nvar $ = require(\"jquery\") // oh, un module npm\n\nmodule.exports = {\n  element : $(\"#cart\"),\n  addToCart : function(){\n    /* … */\n  }\n}\n```\n\nVous pourrez ainsi séparer proprement votre application en modules et les tester individuellement.\n\n### 2. Oui, mais les modules interdépendants alors ?\n\nLà, ça devient un peu plus tricky.\nCe que je conseille à titre personnel c'est d'utiliser des events\npour faire communiquer les différentes parties de l'application.\n\nCela permet d'éviter d'utiliser des mocks d'autres parties de l'application partout.\n\nPar exemple, si je souhaite tester le fait qu'un click sur `.js-updateCart`\ndéclanchera bien `updateCart` :\n\n```javascript\n//view.js\n\n// view est une petite class qui route les events\n// en rendant les listeners accessibles aux tests\n// vous pouvez très facilement en concevoir une\n// à votre goût en quelques lignes de code\nvar view = require(\"../lib/view\")\n\n// eventbus est l'event bus de l'application, il orchestre\n// la communication entre les différents modules\nvar eventbus = require(\"../eventbus\")\n\nvar $ = require(\"jquery\")\n\nmodule.exports = view.extend({\n  element : document.body,\n  events : [\n    {\n      type : \"click\",\n      selector : \".js-addToCart\",\n      listener : \"addToCart\"\n    }\n  ],\n  addToCart : function(eventObject){\n    var target = eventObject.currentTarget\n    var id = $(target).data(\"id\")\n    eventbus.fire(\"addToCart\", {\n      id : id\n    })\n  }\n})\n```\n\net je n'aurais qu'à écouter cet event depuis `cart` :\n\n```javascript\n// cart.js\nvar eventbus = require(\"../eventbus\")\nvar catalog = require(\"../catalog\")\n\nmodule.exports = {\n  initialize : function(){\n    this._addToCart = this.addToCart.bind(this)\n    eventbus.listen(\"addToCart\", this._addToCart)\n  },\n  release : function(){\n    eventbus.stopListening(\"addToCart\", this._addToCart)\n  },\n  addToCart : function(eventObject){\n    // et on a eventObject.id\n    this.products.push(catalog[eventObject.currentTarget.data(\"id\")])\n  }\n}\n```\n\nGrâce à cette architecture, je vais pouvoir tester individuellement\nles deux modules.\n\n```javascript\n// view.test.js\n\nvar tape = require(\"tape\")\nvar view = require(\"../app/view\")\nvar eventbus = require(\"../eventbus\")\nvar $ = require(\"jquery\")\n\ntape(\"view\", function(test){\n  test.plan(1)\n  var element = $(\"<div></div>\")\n  element.data(\"id\", 1)\n  // on teste facilement l'envoi\n  eventbus.listen(\"addToCart\", function(eventObject){\n    test.equal(eventObject.id, 1)\n  })\n  view.addToCart({\n    currentTarget : element\n  })\n})\n```\n\n```javascript\n// cart.test.js\n\nvar tape = require(\"tape\")\nvar cart = require(\"../app/cart\")\nvar eventbus = require(\"../eventbus\")\nvar catalog = require(\"../catalog\")\n\ntape(\"cart\", function(test){\n  cart.initialize()\n  eventbus.fireSync(\"addToCart\", {id:1})\n  test.deepEqual(\n    cart[0],\n    catalog[1],\n    \"receives addToCart event\"\n  )\n  test.end()\n})\n```\n\n## Tester tous les cas possibles\n\nCe sont souvent les edge-cases qui nous font nous arracher les cheveux.\nPour pallier ces soucis, tester en profondeur est essentiel.\n\nPrenons un exemple, une méthode qui teste si la valeur qu'on lui passe est\nune `string`.\n\nOn serait tenté de simplement tester les résultats positifs de cette façon :\n\n```javascript\ntape(\"type.isString on strings\", function(test){\n  test.equal(type.isString(\"\"), true)\n  test.end()\n})\n```\n\nOr, si par mégarde ma méthode `isString` se révèle être :\n\n```javascript\ntype.isString = function(value) {\n  return typeof value == \"string\"\n}\n```\n\non ne vérifie pas le cas `type.isString(new String(\"\"))`.\n\nDu coup, des tests complets :\n\n```javascript\ntape(\"type.isString on strings\", function(test){\n  test.equal(type.isString(\"\"), true)\n  test.equal(type.isString(new String(\"\")), false)\n  test.end()\n})\n```\n\npermettent ici d'identifier qu'en réalité on a besoin de :\n\n```javascript\ntype.isString = function(value) {\n  return Object.prototype.toString.call(value) == \"[object String]\"\n}\n```\n\nEt c'est à la force des résultats de tests que vous identifierez rapidement\nvous familiariserez à tous ces edge-cases.\n\nÀ chaque correctif de bug, ajoutez des tests (mais ça, vous le saviez déjà).\n\n## Cross-browser testing\n\nÀ l'heure actuelle, où l'on se trouve notamment très souvent avec du\nfeature testing.\nPour le tester complètement, on doit se servir de vrais navigateurs :\nun headless (certes, très pratique) comme [phantomjs](http://phantomjs.org)\nne permettra pas d'obtenir 100% de coverage.\n\n```javascript\nvar supportsAnimationFrame =\n  !!(\n    win.requestAnimationFrame ||\n    win.webkitRequestAnimationFrame ||\n    win.mozRequestAnimationFrame ||\n    win.ORequestAnimationFrame ||\n    // vous avez fait une faute de frappe,\n    // et mis un `O` majuscule, seul un\n    // test sur les version concernées d'Opera\n    // vous permettront de l'identifier\n    win.msRequestAnimationFrame\n  )\n```\n\nDe plus, vous pouvez par habitude être tenté d'utiliser un\n`Array.prototype.forEach` alors que votre scope navigateur inclut\nIE8; seuls des tests sur un vrai browser vous permettront d'identifier le souci.\n\nJe vous conseille fortement testling, très simple à intégrer dans vos\nmodules, et gratuit pour tout projet open-source.\n\nDans le `package.json` :\n\n```json\n{\n  \"testling\": {\n    \"files\": \"test/**/*.js\",\n    \"browsers\": [\n      \"ie/9..latest\",\n      \"chrome/22..latest\",\n      \"firefox/16..latest\",\n      \"safari/6..latest\",\n      \"opera/11.0..latest\",\n      \"iphone/6..latest\",\n      \"ipad/6..latest\",\n      \"android-browser/latest\"\n    ]\n  }\n}\n```\n\nEt ajouter un webhook dans l'admin de votre repository GitHub pointant vers\n\n> http://git.testling.com\n\nVous pouvez l'utiliser avec tape (son test harness par défaut)\nMocha, QUnit et n'importe quelle bibliothèque\nde test supportant `TAP` comme indiqué sur\n[le site de testling](https://ci.testling.com/guide/custom_libraries).\n\nVous trouverez aussi des alternatives populaires\n[similaires](http://www.browserstack.com),\nou ayant [une approche différente](http://karma-runner.github.io).\n\nPar ailleurs, si dans votre code il existe des variations entre les navigateurs,\nvous pouvez utiliser du test conditionnel :\n\n```javascript\nif(typeof {}.__proto__ == \"object\"){\n  test.equal(list.__proto__ === Array.prototype, false, \"__proto__ isn't Array.prototype\")\n} else {\n  test.equal(list instanceof Array, false, \"Isn't a window Array\")\n}\n```\n\nHappy testing!\n\n```console\n$ testling\n\nTAP version 13\n# tests\nok 1 bisous\n\n1..1\n# tests 1\n# pass  1\n\n# ok\n```\n","__filename":"fr/articles/js/tests/frontend/index.md","__url":"/fr/articles/js/tests/frontend/","__resourceUrl":"/fr/articles/js/tests/frontend/index.html","__dataUrl":"/fr/articles/js/tests/frontend/index.html.f4dadbbb40fee62b86268c2e5c12e8df.json"}