{"head":{"layout":"Post","comments":true,"date":"2014-05-13","title":"Array.reduce par l'exemple","tags":["javascript","array"],"authors":["lionelB"],"description":"Souvent méconnue, la fonction Array#reduce se révèle super pratique dès lors  qu'on prenne un peu le temps de faire un peu plus connaissance…"},"body":"<p>Souvent méconnue, la fonction <code>Array#reduce</code> se révèle super pratique dès lors\nqu'on prenne un peu le temps de faire un peu plus connaissance.\nCe n'est que dernièrement que je me suis rendu compte que reduce pouvait servir\nà bien plus de chose que ce qui était présenté dans les documentations.</p>\n<p>Voici donc un petit tour d'horizon des cas d'utilisation de cette fonction.\nMais avant cela, et histoire de faire les présentations, voici l'intro tirée de\nla documentation de <a href=\"https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Array/reduce\">MDN</a>.</p>\n<blockquote>\n<p><strong><em>Résumé</em></strong>\nLa méthode reduce() applique une\nfonction sur un accumulateur et chaque valeur d'une liste (de la gauche\nvers la droite) de sorte à le réduire à une seule valeur.</p>\n</blockquote>\n<h2 id=\"le-classique-opérer-une-somme-sur-un-tableau\"><a href=\"#le-classique-op%C3%A9rer-une-somme-sur-un-tableau\"></a>Le classique: Opérer une somme sur un tableau</h2>\n<p>C'est souvent l'exemple qui illustre le plus les documentations. <code>Array#reduce</code>\nva permettre de parcourir le tableau, et pour chaque élément, appeler une fonction\navec les paramètres suivants :</p>\n<ul>\n<li>le résultat de la précédente exécution de cette fonction (aussi appelé l'accumulateur).</li>\n<li>l'élément courant.</li>\n<li>l'index de l’élément courant.</li>\n<li>le tableau sur lequel on est entrain d'itérer</li>\n</ul>\n<pre><code class=\"language-javascript\">var sum = [1,2,3,4,5].reduce( function( memo, val){\n  return memo + val;\n});\n</code></pre>\n<p>En fait, <code>Array#reduce</code> accepte un deuxième argument après la fonction de callback.\nCet argument sera utilisé comme accumulateur lors de la première exécution.\nEt c'est justement cela qui est intéressant et qui rend le reduce plutôt pratique.</p>\n<h2 id=\"chercherremplacer-avec-plusieurs-motifs\"><a href=\"#chercherremplacer-avec-plusieurs-motifs\"></a>Chercher/remplacer avec plusieurs motifs</h2>\n<p>Imaginons que vous souhaitiez appliquer plusieurs opérations de rechercher/remplacer\nsur une chaine de caractère. Si vous avez une liste de motifs et leur valeur correspondante,\nreduce permet de faire cela assez simplement, genre en 3 lignes.</p>\n<pre><code class=\"language-javascript\">var input = \"I'm %USER% and I live in %COUNTRY%\"\nvar data = [{token:'%USER%', value:'lionel'}, {token:'%COUNTRY%', value: 'France'}]\n\nvar output = data.reduce( function(memo, item){\n  return memo.replace(item.token, item.value);\n}, input);\n</code></pre>\n<h2 id=\"réaliser-un-groupby\"><a href=\"#r%C3%A9aliser-un-groupby\"></a>Réaliser un groupBy</h2>\n<p>Reduce peut aussi nous permettre d'effectuer des manipulations comme des groupBy\nsur un tableau (bon avec l'aide de petits helpers).</p>\n<p>Prenons comme point de départ cette liste de stat représentant un découpage par\nsite et par famille de navigateurs. Nous aimerions pouvoir grouper les résultats par site :</p>\n<pre><code class=\"language-javascript\">var stats = [\n  {\"site\":\"google.fr\",\"browser\":\"Chrome\",\"value\":\"50%\"},\n  {\"site\":\"google.fr\",\"browser\":\"FireFox\",\"value\":\"30%\"},\n  {\"site\":\"google.fr\",\"browser\":\"Internet Explorer\",\"value\":\"20%\"},\n  {\"site\":\"mozilla.fr\",\"browser\":\"FireFox\",\"value\":\"60%\"},\n  {\"site\":\"mozilla.fr\",\"browser\":\"Internet Explorer\",\"value\":\"20%\"},\n  {\"site\":\"microsoft.fr\",\"browser\":\"Chrome\",\"value\":\"10%\"},\n  {\"site\":\"microsoft.fr\",\"browser\":\"FireFox\",\"value\":\"20%\"},\n];\n\nfunction compareSite(site, item){\n  return site === item.site\n}\nfunction containSite(site, items) {\n  return items.some( compareSite.bind(null, site) )\n}\nfunction groupBySite(memo, item){\n  var site = memo.filter( containSite.bind(null, item.site) );\n  if (site.length > 0) {\n    site[0].push(item)\n  } else {\n    memo.push([item])\n  }\n  return memo\n}\n// Nous utilisons un tableau vide comme accumulateur\nvar results = stats.reduce( groupBySite, [] );\n</code></pre>\n<p>Concernant cet exemple, on pouvait arriver au même résultat en déclarant une variable\nqui aurait le rôle d'accumulateur et un Array.forEach :</p>\n<pre><code class=\"language-javascript\">var results = {};\n\nfunction groupBySite( item){\n  var site = results.filter( containSite.bind(null, item.site) );\n  if (site.length > 0) {\n    site[0].push(item)\n  } else {\n    results.push([item])\n  }\n}\n\nstats.forEach( groupBySite );\n</code></pre>\n<p>Mais ici, la fonction <code>groupBySite</code> devient bien moins ré-utilisable car elle\ndépend directement de la variable results, déclarée au dessus.</p>\n<h3 id=\"À-noter\"><a href=\"#%C3%80-noter\"></a>À noter</h3>\n<p>L'utilisation de  <code>Function.bind</code> nous permet de réutiliser les fonctions <code>compareSite</code>\net <code>containSite</code> en fixant leur premier paramètre. Ainsi <code>compareSite.bind(null, 'mozilla.fr')</code> équivaut à :</p>\n<pre><code class=\"language-javascript\">function compareMozilla(item){\n  return \"mozilla.fr\" === item.site;\n}\n</code></pre>\n<p>D'ailleurs, on pourrait assez simplement rendre <code>groupBySite</code> générique pour la réutiliser avec un <code>groupByBrowser</code>.</p>\n<h2 id=\"manipuler-la-structure-des-données\"><a href=\"#manipuler-la-structure-des-donn%C3%A9es\"></a>Manipuler la structure des données</h2>\n<p><code>Array#reduce</code> peut aussi permettre de manipuler la structure de vos données et pouvoir la modifier.\nPar exemple, voici une liste de sites avec, pour chaque site, le pourcentage de visite par navigateur.\nImaginons que nous souhaitons changer la structure de l'objet pour grouper ces\nrésultats par type de navigateur plutôt que par site. Là encore <code>Array#reduce</code> s'avère plutôt pratique.</p>\n<pre><code class=\"language-javascript\">var data = {\n      \"google.fr\" : [\n       {name: \"Chrome\", value: \"50%\"},\n        {name: \"FireFox\", value: \"30%\"},\n        {name: \"Internet Explorer\", value: \"20%\" }\n      ],\n      \"mozilla.fr\" : [\n        {name: \"Chrome\", value: \"20%\"},\n        {name: \"FireFox\", value: \"60%\"},\n        {name: \"Internet Explorer\", value: \"20%\"}\n      ] ,\n      \"microsoft.fr\" : [\n        {name: \"Chrome\", value: \"10%\"},\n        {name: \"FireFox\", value: \"20%\"},\n        {name: \"Internet Explorer\", value: \"70%\"}\n      ]\n    };\n\nfunction groupByBrowser( site, memo, browser){\n  if (!memo[browser.name]){\n    memo[browser.name] = [];\n  }\n  memo[browser.name].push({site:site, value: browser.value});\n  return memo\n}\n\nvar results = Object.keys(data).reduce( function (memo, site) {\n  return data[site].reduce(groupByBrowser.bind(null, site), memo)\n}, {});\n</code></pre>\n<p>J'espère que vous avez apprécié ces quelques exemples d'utilisation de <code>Array#reduce</code>.\nEt n'hésitez pas à partager vos cas d'utilisations en éditant l'article ou via les commentaires !</p>\n","rawBody":"\nSouvent méconnue, la fonction `Array#reduce` se révèle super pratique dès lors\n qu'on prenne un peu le temps de faire un peu plus connaissance.\n Ce n'est que dernièrement que je me suis rendu compte que reduce pouvait servir\n à bien plus de chose que ce qui était présenté dans les documentations.\n\nVoici donc un petit tour d'horizon des cas d'utilisation de cette fonction.\nMais avant cela, et histoire de faire les présentations, voici l'intro tirée de\nla documentation de [MDN](https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Array/reduce).\n\n> ***Résumé***\n> La méthode reduce() applique une\n> fonction sur un accumulateur et chaque valeur d'une liste (de la gauche\n> vers la droite) de sorte à le réduire à une seule valeur.\n\n## Le classique: Opérer une somme sur un tableau\n\nC'est souvent l'exemple qui illustre le plus les documentations. `Array#reduce`\nva permettre de parcourir le tableau, et pour chaque élément, appeler une fonction\navec les paramètres suivants :\n\n- le résultat de la précédente exécution de cette fonction (aussi appelé l'accumulateur).\n- l'élément courant.\n- l'index de l’élément courant.\n- le tableau sur lequel on est entrain d'itérer\n\n```javascript\nvar sum = [1,2,3,4,5].reduce( function( memo, val){\n  return memo + val;\n});\n```\n\nEn fait, `Array#reduce` accepte un deuxième argument après la fonction de callback.\n Cet argument sera utilisé comme accumulateur lors de la première exécution.\n Et c'est justement cela qui est intéressant et qui rend le reduce plutôt pratique.\n\n## Chercher/remplacer avec plusieurs motifs\n\nImaginons que vous souhaitiez appliquer plusieurs opérations de rechercher/remplacer\nsur une chaine de caractère. Si vous avez une liste de motifs et leur valeur correspondante,\n reduce permet de faire cela assez simplement, genre en 3 lignes.\n\n```javascript\nvar input = \"I'm %USER% and I live in %COUNTRY%\"\nvar data = [{token:'%USER%', value:'lionel'}, {token:'%COUNTRY%', value: 'France'}]\n\nvar output = data.reduce( function(memo, item){\n  return memo.replace(item.token, item.value);\n}, input);\n```\n## Réaliser un groupBy\n\nReduce peut aussi nous permettre d'effectuer des manipulations comme des groupBy\n sur un tableau (bon avec l'aide de petits helpers).\n\nPrenons comme point de départ cette liste de stat représentant un découpage par\nsite et par famille de navigateurs. Nous aimerions pouvoir grouper les résultats par site :\n\n```javascript\nvar stats = [\n  {\"site\":\"google.fr\",\"browser\":\"Chrome\",\"value\":\"50%\"},\n  {\"site\":\"google.fr\",\"browser\":\"FireFox\",\"value\":\"30%\"},\n  {\"site\":\"google.fr\",\"browser\":\"Internet Explorer\",\"value\":\"20%\"},\n  {\"site\":\"mozilla.fr\",\"browser\":\"FireFox\",\"value\":\"60%\"},\n  {\"site\":\"mozilla.fr\",\"browser\":\"Internet Explorer\",\"value\":\"20%\"},\n  {\"site\":\"microsoft.fr\",\"browser\":\"Chrome\",\"value\":\"10%\"},\n  {\"site\":\"microsoft.fr\",\"browser\":\"FireFox\",\"value\":\"20%\"},\n];\n\nfunction compareSite(site, item){\n  return site === item.site\n}\nfunction containSite(site, items) {\n  return items.some( compareSite.bind(null, site) )\n}\nfunction groupBySite(memo, item){\n  var site = memo.filter( containSite.bind(null, item.site) );\n  if (site.length > 0) {\n    site[0].push(item)\n  } else {\n    memo.push([item])\n  }\n  return memo\n}\n// Nous utilisons un tableau vide comme accumulateur\nvar results = stats.reduce( groupBySite, [] );\n```\n\nConcernant cet exemple, on pouvait arriver au même résultat en déclarant une variable\n qui aurait le rôle d'accumulateur et un Array.forEach :\n\n```javascript\nvar results = {};\n\nfunction groupBySite( item){\n  var site = results.filter( containSite.bind(null, item.site) );\n  if (site.length > 0) {\n    site[0].push(item)\n  } else {\n    results.push([item])\n  }\n}\n\nstats.forEach( groupBySite );\n```\n\nMais ici, la fonction `groupBySite` devient bien moins ré-utilisable car elle\ndépend directement de la variable results, déclarée au dessus.\n\n\n### À noter\n\nL'utilisation de  `Function.bind` nous permet de réutiliser les fonctions `compareSite`\net `containSite` en fixant leur premier paramètre. Ainsi `compareSite.bind(null, 'mozilla.fr')` équivaut à :\n\n```javascript\nfunction compareMozilla(item){\n  return \"mozilla.fr\" === item.site;\n}\n```\n\nD'ailleurs, on pourrait assez simplement rendre `groupBySite` générique pour la réutiliser avec un `groupByBrowser`.\n\n## Manipuler la structure des données\n\n`Array#reduce` peut aussi permettre de manipuler la structure de vos données et pouvoir la modifier.\nPar exemple, voici une liste de sites avec, pour chaque site, le pourcentage de visite par navigateur.\nImaginons que nous souhaitons changer la structure de l'objet pour grouper ces\nrésultats par type de navigateur plutôt que par site. Là encore `Array#reduce` s'avère plutôt pratique.\n\n```javascript\nvar data = {\n      \"google.fr\" : [\n       {name: \"Chrome\", value: \"50%\"},\n        {name: \"FireFox\", value: \"30%\"},\n        {name: \"Internet Explorer\", value: \"20%\" }\n      ],\n      \"mozilla.fr\" : [\n        {name: \"Chrome\", value: \"20%\"},\n        {name: \"FireFox\", value: \"60%\"},\n        {name: \"Internet Explorer\", value: \"20%\"}\n      ] ,\n      \"microsoft.fr\" : [\n        {name: \"Chrome\", value: \"10%\"},\n        {name: \"FireFox\", value: \"20%\"},\n        {name: \"Internet Explorer\", value: \"70%\"}\n      ]\n    };\n\nfunction groupByBrowser( site, memo, browser){\n  if (!memo[browser.name]){\n    memo[browser.name] = [];\n  }\n  memo[browser.name].push({site:site, value: browser.value});\n  return memo\n}\n\nvar results = Object.keys(data).reduce( function (memo, site) {\n  return data[site].reduce(groupByBrowser.bind(null, site), memo)\n}, {});\n```\n\nJ'espère que vous avez apprécié ces quelques exemples d'utilisation de `Array#reduce`.\nEt n'hésitez pas à partager vos cas d'utilisations en éditant l'article ou via les commentaires !\n","raw":"---\ndate: \"2014-05-13\"\ntitle: \"Array.reduce par l'exemple\"\ntags:\n  - javascript\n  - array\nauthors:\n  - lionelB\n---\n\nSouvent méconnue, la fonction `Array#reduce` se révèle super pratique dès lors\n qu'on prenne un peu le temps de faire un peu plus connaissance.\n Ce n'est que dernièrement que je me suis rendu compte que reduce pouvait servir\n à bien plus de chose que ce qui était présenté dans les documentations.\n\nVoici donc un petit tour d'horizon des cas d'utilisation de cette fonction.\nMais avant cela, et histoire de faire les présentations, voici l'intro tirée de\nla documentation de [MDN](https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Array/reduce).\n\n> ***Résumé***\n> La méthode reduce() applique une\n> fonction sur un accumulateur et chaque valeur d'une liste (de la gauche\n> vers la droite) de sorte à le réduire à une seule valeur.\n\n## Le classique: Opérer une somme sur un tableau\n\nC'est souvent l'exemple qui illustre le plus les documentations. `Array#reduce`\nva permettre de parcourir le tableau, et pour chaque élément, appeler une fonction\navec les paramètres suivants :\n\n- le résultat de la précédente exécution de cette fonction (aussi appelé l'accumulateur).\n- l'élément courant.\n- l'index de l’élément courant.\n- le tableau sur lequel on est entrain d'itérer\n\n```javascript\nvar sum = [1,2,3,4,5].reduce( function( memo, val){\n  return memo + val;\n});\n```\n\nEn fait, `Array#reduce` accepte un deuxième argument après la fonction de callback.\n Cet argument sera utilisé comme accumulateur lors de la première exécution.\n Et c'est justement cela qui est intéressant et qui rend le reduce plutôt pratique.\n\n## Chercher/remplacer avec plusieurs motifs\n\nImaginons que vous souhaitiez appliquer plusieurs opérations de rechercher/remplacer\nsur une chaine de caractère. Si vous avez une liste de motifs et leur valeur correspondante,\n reduce permet de faire cela assez simplement, genre en 3 lignes.\n\n```javascript\nvar input = \"I'm %USER% and I live in %COUNTRY%\"\nvar data = [{token:'%USER%', value:'lionel'}, {token:'%COUNTRY%', value: 'France'}]\n\nvar output = data.reduce( function(memo, item){\n  return memo.replace(item.token, item.value);\n}, input);\n```\n## Réaliser un groupBy\n\nReduce peut aussi nous permettre d'effectuer des manipulations comme des groupBy\n sur un tableau (bon avec l'aide de petits helpers).\n\nPrenons comme point de départ cette liste de stat représentant un découpage par\nsite et par famille de navigateurs. Nous aimerions pouvoir grouper les résultats par site :\n\n```javascript\nvar stats = [\n  {\"site\":\"google.fr\",\"browser\":\"Chrome\",\"value\":\"50%\"},\n  {\"site\":\"google.fr\",\"browser\":\"FireFox\",\"value\":\"30%\"},\n  {\"site\":\"google.fr\",\"browser\":\"Internet Explorer\",\"value\":\"20%\"},\n  {\"site\":\"mozilla.fr\",\"browser\":\"FireFox\",\"value\":\"60%\"},\n  {\"site\":\"mozilla.fr\",\"browser\":\"Internet Explorer\",\"value\":\"20%\"},\n  {\"site\":\"microsoft.fr\",\"browser\":\"Chrome\",\"value\":\"10%\"},\n  {\"site\":\"microsoft.fr\",\"browser\":\"FireFox\",\"value\":\"20%\"},\n];\n\nfunction compareSite(site, item){\n  return site === item.site\n}\nfunction containSite(site, items) {\n  return items.some( compareSite.bind(null, site) )\n}\nfunction groupBySite(memo, item){\n  var site = memo.filter( containSite.bind(null, item.site) );\n  if (site.length > 0) {\n    site[0].push(item)\n  } else {\n    memo.push([item])\n  }\n  return memo\n}\n// Nous utilisons un tableau vide comme accumulateur\nvar results = stats.reduce( groupBySite, [] );\n```\n\nConcernant cet exemple, on pouvait arriver au même résultat en déclarant une variable\n qui aurait le rôle d'accumulateur et un Array.forEach :\n\n```javascript\nvar results = {};\n\nfunction groupBySite( item){\n  var site = results.filter( containSite.bind(null, item.site) );\n  if (site.length > 0) {\n    site[0].push(item)\n  } else {\n    results.push([item])\n  }\n}\n\nstats.forEach( groupBySite );\n```\n\nMais ici, la fonction `groupBySite` devient bien moins ré-utilisable car elle\ndépend directement de la variable results, déclarée au dessus.\n\n\n### À noter\n\nL'utilisation de  `Function.bind` nous permet de réutiliser les fonctions `compareSite`\net `containSite` en fixant leur premier paramètre. Ainsi `compareSite.bind(null, 'mozilla.fr')` équivaut à :\n\n```javascript\nfunction compareMozilla(item){\n  return \"mozilla.fr\" === item.site;\n}\n```\n\nD'ailleurs, on pourrait assez simplement rendre `groupBySite` générique pour la réutiliser avec un `groupByBrowser`.\n\n## Manipuler la structure des données\n\n`Array#reduce` peut aussi permettre de manipuler la structure de vos données et pouvoir la modifier.\nPar exemple, voici une liste de sites avec, pour chaque site, le pourcentage de visite par navigateur.\nImaginons que nous souhaitons changer la structure de l'objet pour grouper ces\nrésultats par type de navigateur plutôt que par site. Là encore `Array#reduce` s'avère plutôt pratique.\n\n```javascript\nvar data = {\n      \"google.fr\" : [\n       {name: \"Chrome\", value: \"50%\"},\n        {name: \"FireFox\", value: \"30%\"},\n        {name: \"Internet Explorer\", value: \"20%\" }\n      ],\n      \"mozilla.fr\" : [\n        {name: \"Chrome\", value: \"20%\"},\n        {name: \"FireFox\", value: \"60%\"},\n        {name: \"Internet Explorer\", value: \"20%\"}\n      ] ,\n      \"microsoft.fr\" : [\n        {name: \"Chrome\", value: \"10%\"},\n        {name: \"FireFox\", value: \"20%\"},\n        {name: \"Internet Explorer\", value: \"70%\"}\n      ]\n    };\n\nfunction groupByBrowser( site, memo, browser){\n  if (!memo[browser.name]){\n    memo[browser.name] = [];\n  }\n  memo[browser.name].push({site:site, value: browser.value});\n  return memo\n}\n\nvar results = Object.keys(data).reduce( function (memo, site) {\n  return data[site].reduce(groupByBrowser.bind(null, site), memo)\n}, {});\n```\n\nJ'espère que vous avez apprécié ces quelques exemples d'utilisation de `Array#reduce`.\nEt n'hésitez pas à partager vos cas d'utilisations en éditant l'article ou via les commentaires !\n","__filename":"fr/articles/js/array-reduce/index.md","__url":"/fr/articles/js/array-reduce/","__resourceUrl":"/fr/articles/js/array-reduce/index.html","__dataUrl":"/fr/articles/js/array-reduce/index.html.b6aeb7fd27b23fb3afd8bab81c2d26dc.json"}