{"head":{"layout":"Post","comments":true,"date":"2015-10-20","title":"G√©rer son th√®me WordPress avec Webpack","tags":["wordpress","webpack","javascript","task-runner"],"authors":["MoOx"],"header":{"credit":"https://www.flickr.com/photos/4everyoung/2505890793/","linearGradient":"160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)"},"description":"Pourquoi Webpack pour g√©rer son th√®me WordPress ? La r√©ponse est la m√™me qu'√† la simple question \"pourquoi Webpack ?\". L'int√©r√™t principal‚Ä¶"},"body":"<h1 id=\"pourquoi-webpack-pour-g√©rer-son-th√®me-wordpress-\"><a href=\"#pourquoi-webpack-pour-g%C3%A9rer-son-th%C3%A8me-wordpress-\"></a>Pourquoi Webpack pour g√©rer son th√®me WordPress ?</h1>\n<p>La r√©ponse est la m√™me qu'√† la simple question\n<a href=\"/fr/articles/js/webpack/\">\"pourquoi Webpack ?\"</a>.\nL'int√©r√™t principal est d'obtenir des rapports d'erreurs li√©s √†\nla gestion des assets (images, fonts, etc).</p>\n<p>Qu'y a-t-il de si particulier √† savoir pour utiliser Webpack pour g√©rer un th√®me\nWordPress¬†? Pas grand chose, mais voici de quoi vous faire gagner (peut-√™tre)\nun peu de temps.</p>\n<p>Il y a certainement plusieurs fa√ßons de g√©rer son th√®me WordPress\navec Webpack. Celle que je vous propose va se limiter √† des choses\nsimples en concentrant le code dans le r√©pertoire du th√®me pour plus de\nmodularit√©.</p>\n<p>Pour commencer, deux choses importantes √† savoir :</p>\n<ul>\n<li>Ne mettez pas de CSS dans le fameux <code>style.css</code> √† la racine de votre th√®me,\nlaissez juste le cartouche en commentaire (sans lequel WordPress ne d√©tectera\npas votre th√®me...)¬†;</li>\n<li>cr√©ez un dossier <code>src</code> dans votre th√®me, o√π nous\nmettrons nos \"sources\", la partie du th√®me \"compil√©\" sera dans un dossier\n<code>dist</code> et n'aura donc pas besoin d'√™tre versionn√©e.</li>\n</ul>\n<p>La seule petite chose √† laquelle il faut faire attention finalement, c'est de\nbien configurer le <code>publicPath</code> de Webpack afin que les fichiers qu'il g√©n√®re\nsoient bien dans le bon chemin, et que les ressources li√©es (dans les fichiers CSS\npar exemple) comportent les bons chemins relatifs (√† la racine du site).</p>\n<p>Avec l'arborescence suivante, nous n'aurons pas de difficult√© √† faire une\nconfiguration portable :</p>\n<pre><code>- htdocs\n  - wp-content\n    - themes\n      - putaindetheme\n        - node_modules\n        - src\n          - index.js\n          - index.css\n          - images/*\n          - fonts/*\n        - style.css\n        - webpack.config.babel.json\n        - package.json\n- package.json\n</code></pre>\n<p>En plus de cela, nous pouvons ajouter une sorte de raccourci via un\n<code>package.json</code> suppl√©mentaire √† la racine de notre projet :</p>\n<pre><code class=\"language-json\">{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"cd htdocs/wp-content/themes/putaindetheme &#x26;&#x26; npm start\",\n    \"build\": \"cd htdocs/wp-content/themes/putaindetheme &#x26;&#x26; npm run build\"\n  }\n}\n</code></pre>\n<p>Ce petit raccourci nous √©vitera de devoir nous taper en CLI tout le chemin du\nth√®me et nous pourrions m√™me, pourquoi pas, rajouter un\n<code>\"prestart\": \"open http://yourlocalhost.tld\"</code> afin d'ouvrir automatiquement\nle projet dans le navigateur lorsque nous d√©marrerons notre d√©veloppement via\n<code>$ npm start</code>.</p>\n<p>Voyons rapidement donc le <code>package.json</code> du th√®me ainsi que la config Webpack.</p>\n<p><code>package.json</code></p>\n<pre><code class=\"language-json\">{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"webpack --config=webpack.config.babel.js --watch\",\n    \"build\": \"webpack --config=webpack.config.babel.js -p\"\n  },\n  \"devDependencies\": {\n    \"babel\": \"^5.8.12\",\n    \"babel-core\": \"^5.8.12\",\n    \"babel-loader\": \"^5.3.2\",\n    \"css-loader\": \"^0.15.6\",\n    \"eslint\": \"^0.24.1\",\n    \"eslint-loader\": \"^0.14.2\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"file-loader\": \"^0.8.4\",\n    \"json-loader\": \"^0.5.2\",\n    \"postcss-cssnext\": \"^2.1.0\",\n    \"postcss-import\": \"^7.0.0\",\n    \"postcss-loader\": \"^0.6.0\",\n    \"postcss-url\": \"^5.0.2\",\n    \"style-loader\": \"^0.12.3\",\n    \"webpack\": \"^1.10.5\"\n  },\n  \"dependencies\": {\n    \"normalize.css\": \"^3.0.3\"\n  }\n}\n</code></pre>\n<p>Quelques petites notes sur ce contenu :</p>\n<ul>\n<li><code>private</code> sert √† √©viter la publication de votre \"paquet\" sur npm, ainsi qu'√†\ndevoir remplir certains champs tels que <code>name</code> et compagnie¬†;</li>\n<li>nous mettrons dans <code>devDependencies</code> les d√©pendances pour le d√©veloppement et\ndans <code>dependencies</code> les d√©pendances qui seront dans le build final. Ici, j'ai\nsimplement mis <code>normalize.css</code> pour exemple, mais vous pourriez tr√®s bien avoir\naussi jQuery (:trollface:) ou React¬†;</li>\n<li>les scripts utilisent <code>webpack.config.babel.js</code> afin de pouvoir d√©finir la\nconfiguration en es6/7 via <em>babel</em>.</li>\n</ul>\n<p>Voyons maintenant la config <code>webpack.config.babel.js</code>¬†:</p>\n<pre><code class=\"language-js\">// Note: le code ci-dessous est mal rendu\n// Une issue est ouverte √† ce propos\n// https://github.com/isagalaev/highlight.js/issues/958\n\nimport \"babel/polyfill\"\nimport path from \"path\"\nimport ExtractTextPlugin from \"extract-text-webpack-plugin\"\nimport postcssImport from \"postcss-import\"\nimport postcssUrl from \"postcss-url\"\nimport postcssCssnext from \"postcss-cssnext\"\n\nconst production = process.argv.includes(`-p`)\n\nconst theme = path.basename(__dirname)\nconst src = path.join(__dirname, `src`)\n\nexport default {\n  entry: {\n    index: [`${ src }/index.js`],\n  },\n\n  output: {\n    path: path.join(__dirname, `dist`),\n    filename: `[name].js`,\n    publicPath: `wp-content/themes/${ theme }/dist/`,\n  },\n  resolve: {\n    extensions: [\n      ``,\n      `.js`,\n      `.json`,\n    ],\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: `json-loader`,\n      },\n      {\n        test: /\\.js$/,\n        loaders: [\n          `babel-loader`,\n          `eslint-loader`,\n        ],\n        include: src,\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          `style-loader`,\n          [\n            `css-loader`,\n            `postcss-loader`,\n          ].join(`!`)\n        ),\n      },\n      {\n        test: /\\.(ico|jpe?g|png|gif)$/,\n        loader: `file-loader?name=[path][name].[ext]&#x26;context=${ src }/`,\n      },\n    ],\n  },\n\n  plugins: [\n    new ExtractTextPlugin(`[name].css`, {disable: !production}),\n  ],\n\n  postcss: function() {\n    // https://github.com/postcss/postcss-loader/issues/31\n    const webpack = this\n\n    return [\n      postcssImport({\n        onImport: (files) => files.forEach(webpack.addDependency),\n      }),\n      postcssUrl(),\n      postcssCssnext({\n        browsers: `last 2 versions`,\n      }),\n    ]\n  },\n}\n</code></pre>\n<p><em>Bien entendu, libre √† vous d'adapter les loaders Webpack √† utiliser, ainsi que\nla configuration PostCSS par exemple.</em> Faites un tour sur notre article de\n<a href=\"/fr/articles/js/webpack/premier-exemple/\">premier exemple de configuration Webpack</a> afin\nd'y voir plus clair.</p>\n<p>Il nous reste maintenant √† ajouter dans notre th√®me WordPress les\nr√©f√©rences √† nos points d'entr√©es CSS et JavaScript que sont <code>index.css</code> et\n<code>index.js</code>.</p>\n<p>Pour faire simplement, dans votre fichier <code>functions.php</code> (oui, le fichier qui a un nom\nqui n'indique pas du tout ce pour quoi tout le monde se sert du fichier, c'est √†\ndire la configuration du th√®me au runtime...), on va ajouter une petite constante\nqui servira √† adapter votre th√®me en fonction de l'environnement :</p>\n<pre><code class=\"language-php\">// ENV est √† d√©finir dans votre configuration Apache par exemple.\n// Si vous ne voulez pas y toucher, vous pouvez plut√¥t d√©finir d'une autre fa√ßon\n// en testant le SERVER_NAME par exemple\ndefine('ENV', getenv('ENV'));\n\n// en local, on pourrait d√©finir ENV √† \"development\"\n</code></pre>\n<p><em>Nous pourrions dans ce fichier utiliser l'API de Wordpress pour enregister nos\n<code>index.css</code> et <code>index.js</code> via les m√©thodes <code>wp_(de)register_</code>, mais nous\nresterons simples pour l'exemple.</em></p>\n<p>Vu qu'on utilise le <code>style-loader</code> de Webpack en d√©veloppement, on ne va ajouter\nnotre feuille de style qu'en production (dans le <code>&#x3C;head></code>).</p>\n<pre><code class=\"language-php\">&#x3C;?php if (ENV != \"development\"): ?>\n  &#x3C;link rel=\"stylesheet\" href=\"&#x3C;?php echo get_bloginfo('template_directory') ?>/dist/index.css\" />\n&#x3C;?php endif; ?>\n</code></pre>\n<p>Pensez aussi √† supprimer la r√©f√©rence √† <code>style.css</code> dans <code>header.php</code>.</p>\n<p>Dans la m√™me id√©e mais en plus simple, on va ajouter dans notre <code>footer.php</code>.</p>\n<pre><code class=\"language-php\">&#x3C;script src=\"&#x3C;?php echo get_bloginfo('template_directory') ?>/dist/index.js\">&#x3C;/script>\n</code></pre>\n<p>Rien de bien compliqu√© finalement.</p>\n<p><em>Attention si votre th√®me h√©rite d'un autre,\n<code>get_bloginfo('template_directory')</code> ne pointera pas vers votre th√®me mais le\nth√®me parent. Il vous faudra donc ajuster le code üòë.</em></p>\n<hr>\n<p>Pour le test vous pouvez mettre dans les CSS et JS :</p>\n<p><code>index.css</code></p>\n<pre><code class=\"language-css\">@import \"normalize.css\";\nbody {\n  background: red;\n}\n</code></pre>\n<p>Notez ici que par la fa√ßon dont nous avons d√©fini Webpack ci-dessus, vous\ndevriez placer et r√©f√©rencer vos assets (images &#x26; co), depuis <code>src</code>. Exemple¬†:</p>\n<pre><code class=\"language-css\">html {\n  background: url(./images/background.jpg)\n  /* => wp-content/themes/putaindetheme/src/images/background.jpg */\n}\n</code></pre>\n<p>Ensuite, dans <code>index.js</code>, je vous laisse vous d√©brouiller :)</p>\n<pre><code class=\"language-js\">console.log(\"Hey !\")\n</code></pre>\n<p>Libre √† vous maintenant d'ajouter vos d√©pendances favorites et de remplir vos\n<code>index.css</code> et <code>index.js</code> avec une gestion d'erreurs autre que des requ√™tes HTTP\nen 404¬†!</p>\n","rawBody":"\n# Pourquoi Webpack pour g√©rer son th√®me WordPress ?\n\nLa r√©ponse est la m√™me qu'√† la simple question\n[\"pourquoi Webpack ?\"](/fr/articles/js/webpack/).\nL'int√©r√™t principal est d'obtenir des rapports d'erreurs li√©s √†\nla gestion des assets (images, fonts, etc).\n\nQu'y a-t-il de si particulier √† savoir pour utiliser Webpack pour g√©rer un th√®me\nWordPress¬†? Pas grand chose, mais voici de quoi vous faire gagner (peut-√™tre)\nun peu de temps.\n\nIl y a certainement plusieurs fa√ßons de g√©rer son th√®me WordPress\navec Webpack. Celle que je vous propose va se limiter √† des choses\nsimples en concentrant le code dans le r√©pertoire du th√®me pour plus de\nmodularit√©.\n\nPour commencer, deux choses importantes √† savoir :\n\n- Ne mettez pas de CSS dans le fameux `style.css` √† la racine de votre th√®me,\nlaissez juste le cartouche en commentaire (sans lequel WordPress ne d√©tectera\npas votre th√®me...)¬†;\n- cr√©ez un dossier `src` dans votre th√®me, o√π nous\nmettrons nos \"sources\", la partie du th√®me \"compil√©\" sera dans un dossier\n`dist` et n'aura donc pas besoin d'√™tre versionn√©e.\n\nLa seule petite chose √† laquelle il faut faire attention finalement, c'est de\nbien configurer le `publicPath` de Webpack afin que les fichiers qu'il g√©n√®re\nsoient bien dans le bon chemin, et que les ressources li√©es (dans les fichiers CSS\npar exemple) comportent les bons chemins relatifs (√† la racine du site).\n\nAvec l'arborescence suivante, nous n'aurons pas de difficult√© √† faire une\nconfiguration portable :\n\n```\n- htdocs\n  - wp-content\n    - themes\n      - putaindetheme\n        - node_modules\n        - src\n          - index.js\n          - index.css\n          - images/*\n          - fonts/*\n        - style.css\n        - webpack.config.babel.json\n        - package.json\n- package.json\n```\n\nEn plus de cela, nous pouvons ajouter une sorte de raccourci via un\n`package.json` suppl√©mentaire √† la racine de notre projet :\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"cd htdocs/wp-content/themes/putaindetheme && npm start\",\n    \"build\": \"cd htdocs/wp-content/themes/putaindetheme && npm run build\"\n  }\n}\n```\n\nCe petit raccourci nous √©vitera de devoir nous taper en CLI tout le chemin du\nth√®me et nous pourrions m√™me, pourquoi pas, rajouter un\n`\"prestart\": \"open http://yourlocalhost.tld\"` afin d'ouvrir automatiquement\nle projet dans le navigateur lorsque nous d√©marrerons notre d√©veloppement via\n`$ npm start`.\n\nVoyons rapidement donc le `package.json` du th√®me ainsi que la config Webpack.\n\n`package.json`\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"webpack --config=webpack.config.babel.js --watch\",\n    \"build\": \"webpack --config=webpack.config.babel.js -p\"\n  },\n  \"devDependencies\": {\n    \"babel\": \"^5.8.12\",\n    \"babel-core\": \"^5.8.12\",\n    \"babel-loader\": \"^5.3.2\",\n    \"css-loader\": \"^0.15.6\",\n    \"eslint\": \"^0.24.1\",\n    \"eslint-loader\": \"^0.14.2\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"file-loader\": \"^0.8.4\",\n    \"json-loader\": \"^0.5.2\",\n    \"postcss-cssnext\": \"^2.1.0\",\n    \"postcss-import\": \"^7.0.0\",\n    \"postcss-loader\": \"^0.6.0\",\n    \"postcss-url\": \"^5.0.2\",\n    \"style-loader\": \"^0.12.3\",\n    \"webpack\": \"^1.10.5\"\n  },\n  \"dependencies\": {\n    \"normalize.css\": \"^3.0.3\"\n  }\n}\n```\n\nQuelques petites notes sur ce contenu :\n\n- `private` sert √† √©viter la publication de votre \"paquet\" sur npm, ainsi qu'√†\ndevoir remplir certains champs tels que `name` et compagnie¬†;\n- nous mettrons dans `devDependencies` les d√©pendances pour le d√©veloppement et\ndans `dependencies` les d√©pendances qui seront dans le build final. Ici, j'ai\nsimplement mis `normalize.css` pour exemple, mais vous pourriez tr√®s bien avoir\naussi jQuery (:trollface:) ou React¬†;\n- les scripts utilisent `webpack.config.babel.js` afin de pouvoir d√©finir la\nconfiguration en es6/7 via _babel_.\n\nVoyons maintenant la config `webpack.config.babel.js`¬†:\n\n\n```js\n// Note: le code ci-dessous est mal rendu\n// Une issue est ouverte √† ce propos\n// https://github.com/isagalaev/highlight.js/issues/958\n\nimport \"babel/polyfill\"\nimport path from \"path\"\nimport ExtractTextPlugin from \"extract-text-webpack-plugin\"\nimport postcssImport from \"postcss-import\"\nimport postcssUrl from \"postcss-url\"\nimport postcssCssnext from \"postcss-cssnext\"\n\nconst production = process.argv.includes(`-p`)\n\nconst theme = path.basename(__dirname)\nconst src = path.join(__dirname, `src`)\n\nexport default {\n  entry: {\n    index: [`${ src }/index.js`],\n  },\n\n  output: {\n    path: path.join(__dirname, `dist`),\n    filename: `[name].js`,\n    publicPath: `wp-content/themes/${ theme }/dist/`,\n  },\n  resolve: {\n    extensions: [\n      ``,\n      `.js`,\n      `.json`,\n    ],\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: `json-loader`,\n      },\n      {\n        test: /\\.js$/,\n        loaders: [\n          `babel-loader`,\n          `eslint-loader`,\n        ],\n        include: src,\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          `style-loader`,\n          [\n            `css-loader`,\n            `postcss-loader`,\n          ].join(`!`)\n        ),\n      },\n      {\n        test: /\\.(ico|jpe?g|png|gif)$/,\n        loader: `file-loader?name=[path][name].[ext]&context=${ src }/`,\n      },\n    ],\n  },\n\n  plugins: [\n    new ExtractTextPlugin(`[name].css`, {disable: !production}),\n  ],\n\n  postcss: function() {\n    // https://github.com/postcss/postcss-loader/issues/31\n    const webpack = this\n\n    return [\n      postcssImport({\n        onImport: (files) => files.forEach(webpack.addDependency),\n      }),\n      postcssUrl(),\n      postcssCssnext({\n        browsers: `last 2 versions`,\n      }),\n    ]\n  },\n}\n```\n\n_Bien entendu, libre √† vous d'adapter les loaders Webpack √† utiliser, ainsi que\nla configuration PostCSS par exemple._ Faites un tour sur notre article de\n[premier exemple de configuration Webpack](/fr/articles/js/webpack/premier-exemple/) afin\nd'y voir plus clair.\n\nIl nous reste maintenant √† ajouter dans notre th√®me WordPress les\nr√©f√©rences √† nos points d'entr√©es CSS et JavaScript que sont `index.css` et\n`index.js`.\n\nPour faire simplement, dans votre fichier `functions.php` (oui, le fichier qui a un nom\nqui n'indique pas du tout ce pour quoi tout le monde se sert du fichier, c'est √†\ndire la configuration du th√®me au runtime...), on va ajouter une petite constante\nqui servira √† adapter votre th√®me en fonction de l'environnement :\n\n```php\n// ENV est √† d√©finir dans votre configuration Apache par exemple.\n// Si vous ne voulez pas y toucher, vous pouvez plut√¥t d√©finir d'une autre fa√ßon\n// en testant le SERVER_NAME par exemple\ndefine('ENV', getenv('ENV'));\n\n// en local, on pourrait d√©finir ENV √† \"development\"\n```\n\n*Nous pourrions dans ce fichier utiliser l'API de Wordpress pour enregister nos\n`index.css` et `index.js` via les m√©thodes `wp_(de)register_`, mais nous\nresterons simples pour l'exemple.*\n\nVu qu'on utilise le `style-loader` de Webpack en d√©veloppement, on ne va ajouter\nnotre feuille de style qu'en production (dans le `<head>`).\n\n```php\n<?php if (ENV != \"development\"): ?>\n  <link rel=\"stylesheet\" href=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.css\" />\n<?php endif; ?>\n```\n\nPensez aussi √† supprimer la r√©f√©rence √† `style.css` dans `header.php`.\n\nDans la m√™me id√©e mais en plus simple, on va ajouter dans notre `footer.php`.\n\n```php\n<script src=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.js\"></script>\n```\n\nRien de bien compliqu√© finalement.\n\n*Attention si votre th√®me h√©rite d'un autre,\n`get_bloginfo('template_directory')` ne pointera pas vers votre th√®me mais le\nth√®me parent. Il vous faudra donc ajuster le code üòë.*\n\n---\n\nPour le test vous pouvez mettre dans les CSS et JS :\n\n`index.css`\n\n```css\n@import \"normalize.css\";\nbody {\n  background: red;\n}\n```\n\nNotez ici que par la fa√ßon dont nous avons d√©fini Webpack ci-dessus, vous\ndevriez placer et r√©f√©rencer vos assets (images & co), depuis `src`. Exemple¬†:\n\n```css\nhtml {\n  background: url(./images/background.jpg)\n  /* => wp-content/themes/putaindetheme/src/images/background.jpg */\n}\n```\n\n\nEnsuite, dans `index.js`, je vous laisse vous d√©brouiller :)\n\n```js\nconsole.log(\"Hey !\")\n```\n\nLibre √† vous maintenant d'ajouter vos d√©pendances favorites et de remplir vos\n`index.css` et `index.js` avec une gestion d'erreurs autre que des requ√™tes HTTP\nen 404¬†!\n","raw":"---\ndate: \"2015-10-20\"\ntitle: G√©rer son th√®me WordPress avec Webpack\ntags:\n  - wordpress\n  - webpack\n  - javascript\n  - task-runner\nauthors:\n  - MoOx\nheader:\n  credit: https://www.flickr.com/photos/4everyoung/2505890793/\n  linearGradient: 160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)\n---\n\n# Pourquoi Webpack pour g√©rer son th√®me WordPress ?\n\nLa r√©ponse est la m√™me qu'√† la simple question\n[\"pourquoi Webpack ?\"](/fr/articles/js/webpack/).\nL'int√©r√™t principal est d'obtenir des rapports d'erreurs li√©s √†\nla gestion des assets (images, fonts, etc).\n\nQu'y a-t-il de si particulier √† savoir pour utiliser Webpack pour g√©rer un th√®me\nWordPress¬†? Pas grand chose, mais voici de quoi vous faire gagner (peut-√™tre)\nun peu de temps.\n\nIl y a certainement plusieurs fa√ßons de g√©rer son th√®me WordPress\navec Webpack. Celle que je vous propose va se limiter √† des choses\nsimples en concentrant le code dans le r√©pertoire du th√®me pour plus de\nmodularit√©.\n\nPour commencer, deux choses importantes √† savoir :\n\n- Ne mettez pas de CSS dans le fameux `style.css` √† la racine de votre th√®me,\nlaissez juste le cartouche en commentaire (sans lequel WordPress ne d√©tectera\npas votre th√®me...)¬†;\n- cr√©ez un dossier `src` dans votre th√®me, o√π nous\nmettrons nos \"sources\", la partie du th√®me \"compil√©\" sera dans un dossier\n`dist` et n'aura donc pas besoin d'√™tre versionn√©e.\n\nLa seule petite chose √† laquelle il faut faire attention finalement, c'est de\nbien configurer le `publicPath` de Webpack afin que les fichiers qu'il g√©n√®re\nsoient bien dans le bon chemin, et que les ressources li√©es (dans les fichiers CSS\npar exemple) comportent les bons chemins relatifs (√† la racine du site).\n\nAvec l'arborescence suivante, nous n'aurons pas de difficult√© √† faire une\nconfiguration portable :\n\n```\n- htdocs\n  - wp-content\n    - themes\n      - putaindetheme\n        - node_modules\n        - src\n          - index.js\n          - index.css\n          - images/*\n          - fonts/*\n        - style.css\n        - webpack.config.babel.json\n        - package.json\n- package.json\n```\n\nEn plus de cela, nous pouvons ajouter une sorte de raccourci via un\n`package.json` suppl√©mentaire √† la racine de notre projet :\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"cd htdocs/wp-content/themes/putaindetheme && npm start\",\n    \"build\": \"cd htdocs/wp-content/themes/putaindetheme && npm run build\"\n  }\n}\n```\n\nCe petit raccourci nous √©vitera de devoir nous taper en CLI tout le chemin du\nth√®me et nous pourrions m√™me, pourquoi pas, rajouter un\n`\"prestart\": \"open http://yourlocalhost.tld\"` afin d'ouvrir automatiquement\nle projet dans le navigateur lorsque nous d√©marrerons notre d√©veloppement via\n`$ npm start`.\n\nVoyons rapidement donc le `package.json` du th√®me ainsi que la config Webpack.\n\n`package.json`\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"webpack --config=webpack.config.babel.js --watch\",\n    \"build\": \"webpack --config=webpack.config.babel.js -p\"\n  },\n  \"devDependencies\": {\n    \"babel\": \"^5.8.12\",\n    \"babel-core\": \"^5.8.12\",\n    \"babel-loader\": \"^5.3.2\",\n    \"css-loader\": \"^0.15.6\",\n    \"eslint\": \"^0.24.1\",\n    \"eslint-loader\": \"^0.14.2\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"file-loader\": \"^0.8.4\",\n    \"json-loader\": \"^0.5.2\",\n    \"postcss-cssnext\": \"^2.1.0\",\n    \"postcss-import\": \"^7.0.0\",\n    \"postcss-loader\": \"^0.6.0\",\n    \"postcss-url\": \"^5.0.2\",\n    \"style-loader\": \"^0.12.3\",\n    \"webpack\": \"^1.10.5\"\n  },\n  \"dependencies\": {\n    \"normalize.css\": \"^3.0.3\"\n  }\n}\n```\n\nQuelques petites notes sur ce contenu :\n\n- `private` sert √† √©viter la publication de votre \"paquet\" sur npm, ainsi qu'√†\ndevoir remplir certains champs tels que `name` et compagnie¬†;\n- nous mettrons dans `devDependencies` les d√©pendances pour le d√©veloppement et\ndans `dependencies` les d√©pendances qui seront dans le build final. Ici, j'ai\nsimplement mis `normalize.css` pour exemple, mais vous pourriez tr√®s bien avoir\naussi jQuery (:trollface:) ou React¬†;\n- les scripts utilisent `webpack.config.babel.js` afin de pouvoir d√©finir la\nconfiguration en es6/7 via _babel_.\n\nVoyons maintenant la config `webpack.config.babel.js`¬†:\n\n\n```js\n// Note: le code ci-dessous est mal rendu\n// Une issue est ouverte √† ce propos\n// https://github.com/isagalaev/highlight.js/issues/958\n\nimport \"babel/polyfill\"\nimport path from \"path\"\nimport ExtractTextPlugin from \"extract-text-webpack-plugin\"\nimport postcssImport from \"postcss-import\"\nimport postcssUrl from \"postcss-url\"\nimport postcssCssnext from \"postcss-cssnext\"\n\nconst production = process.argv.includes(`-p`)\n\nconst theme = path.basename(__dirname)\nconst src = path.join(__dirname, `src`)\n\nexport default {\n  entry: {\n    index: [`${ src }/index.js`],\n  },\n\n  output: {\n    path: path.join(__dirname, `dist`),\n    filename: `[name].js`,\n    publicPath: `wp-content/themes/${ theme }/dist/`,\n  },\n  resolve: {\n    extensions: [\n      ``,\n      `.js`,\n      `.json`,\n    ],\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: `json-loader`,\n      },\n      {\n        test: /\\.js$/,\n        loaders: [\n          `babel-loader`,\n          `eslint-loader`,\n        ],\n        include: src,\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          `style-loader`,\n          [\n            `css-loader`,\n            `postcss-loader`,\n          ].join(`!`)\n        ),\n      },\n      {\n        test: /\\.(ico|jpe?g|png|gif)$/,\n        loader: `file-loader?name=[path][name].[ext]&context=${ src }/`,\n      },\n    ],\n  },\n\n  plugins: [\n    new ExtractTextPlugin(`[name].css`, {disable: !production}),\n  ],\n\n  postcss: function() {\n    // https://github.com/postcss/postcss-loader/issues/31\n    const webpack = this\n\n    return [\n      postcssImport({\n        onImport: (files) => files.forEach(webpack.addDependency),\n      }),\n      postcssUrl(),\n      postcssCssnext({\n        browsers: `last 2 versions`,\n      }),\n    ]\n  },\n}\n```\n\n_Bien entendu, libre √† vous d'adapter les loaders Webpack √† utiliser, ainsi que\nla configuration PostCSS par exemple._ Faites un tour sur notre article de\n[premier exemple de configuration Webpack](/fr/articles/js/webpack/premier-exemple/) afin\nd'y voir plus clair.\n\nIl nous reste maintenant √† ajouter dans notre th√®me WordPress les\nr√©f√©rences √† nos points d'entr√©es CSS et JavaScript que sont `index.css` et\n`index.js`.\n\nPour faire simplement, dans votre fichier `functions.php` (oui, le fichier qui a un nom\nqui n'indique pas du tout ce pour quoi tout le monde se sert du fichier, c'est √†\ndire la configuration du th√®me au runtime...), on va ajouter une petite constante\nqui servira √† adapter votre th√®me en fonction de l'environnement :\n\n```php\n// ENV est √† d√©finir dans votre configuration Apache par exemple.\n// Si vous ne voulez pas y toucher, vous pouvez plut√¥t d√©finir d'une autre fa√ßon\n// en testant le SERVER_NAME par exemple\ndefine('ENV', getenv('ENV'));\n\n// en local, on pourrait d√©finir ENV √† \"development\"\n```\n\n*Nous pourrions dans ce fichier utiliser l'API de Wordpress pour enregister nos\n`index.css` et `index.js` via les m√©thodes `wp_(de)register_`, mais nous\nresterons simples pour l'exemple.*\n\nVu qu'on utilise le `style-loader` de Webpack en d√©veloppement, on ne va ajouter\nnotre feuille de style qu'en production (dans le `<head>`).\n\n```php\n<?php if (ENV != \"development\"): ?>\n  <link rel=\"stylesheet\" href=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.css\" />\n<?php endif; ?>\n```\n\nPensez aussi √† supprimer la r√©f√©rence √† `style.css` dans `header.php`.\n\nDans la m√™me id√©e mais en plus simple, on va ajouter dans notre `footer.php`.\n\n```php\n<script src=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.js\"></script>\n```\n\nRien de bien compliqu√© finalement.\n\n*Attention si votre th√®me h√©rite d'un autre,\n`get_bloginfo('template_directory')` ne pointera pas vers votre th√®me mais le\nth√®me parent. Il vous faudra donc ajuster le code üòë.*\n\n---\n\nPour le test vous pouvez mettre dans les CSS et JS :\n\n`index.css`\n\n```css\n@import \"normalize.css\";\nbody {\n  background: red;\n}\n```\n\nNotez ici que par la fa√ßon dont nous avons d√©fini Webpack ci-dessus, vous\ndevriez placer et r√©f√©rencer vos assets (images & co), depuis `src`. Exemple¬†:\n\n```css\nhtml {\n  background: url(./images/background.jpg)\n  /* => wp-content/themes/putaindetheme/src/images/background.jpg */\n}\n```\n\n\nEnsuite, dans `index.js`, je vous laisse vous d√©brouiller :)\n\n```js\nconsole.log(\"Hey !\")\n```\n\nLibre √† vous maintenant d'ajouter vos d√©pendances favorites et de remplir vos\n`index.css` et `index.js` avec une gestion d'erreurs autre que des requ√™tes HTTP\nen 404¬†!\n","__filename":"fr/articles/wordpress/webpack/index.md","__url":"/fr/articles/wordpress/webpack/","__resourceUrl":"/fr/articles/wordpress/webpack/index.html","__dataUrl":"/fr/articles/wordpress/webpack/index.html.d6cfe1a949a76f5cf97134ddae362786.json"}