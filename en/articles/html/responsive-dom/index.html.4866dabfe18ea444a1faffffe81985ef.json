{"head":{"layout":"Post","comments":true,"date":"2013-12-26","title":"Responsive webdesign and DOM structure","tags":["responsive","html","javascript"],"authors":["neemzy"],"description":"Alright, first things first, if you don't mind. Ever heard about responsive webdesign? Yes? Good. You therefore may have encountered some…"},"body":"<p>Alright, first things first, if you don't mind. Ever heard about <strong>responsive\nwebdesign</strong>? Yes? Good. You therefore may have encountered some pretty annoying\nuse case (I did). Whether you are a <em>mobile-first</em> adept or an old-fashioned\nprogressive degradator, you must have come to a point where you told yourself\nthis silly thing:</p>\n<blockquote>\n<p>Would really be great if this element was here instead of there. But it\nisn't.</p>\n</blockquote>\n<p>Your typical example for this is a slightly complex menu, where we would like\nto give the items a bit of reordering just above or below a certain screen\nsize. And we have to admit there is no miraculous way out of this.</p>\n<p>I can already hear the nasty boys scream and shout, saying that a better\nconception beforehand would have granted us better <em>markup</em> and spared us the\ntrouble. Although it's an easy thing to say, it turns out to be true in a\nnumber of cases (yes, I'm quite good at avoiding picking a side). However, if\nyou ever find yourself wading in these swamps, it probably means going back\nisn't an option anymore.</p>\n<p>As fast as innovation in our profession goes, especially about anything\nmobile-related in general and web-related especially, it's quite likely that\nthe tricks I'm going to deliver are obsolete six months from now, and that\nthis article becomes increasingly popular again on Twitter, RTs kindly mocking\nthe pre-Columbian techniques we were limited to not so long ago. Heck knows, I\nmight just become a paradoxally decadent celebrity <em>à la</em> Rick Astley. In the\nmeantime, I have nothing better to share on the subject. If you do, I strongly\nrecommend spitting it out in the comments for everyone to enjoy. Well, are you\nready now? I'm waiting, you know!</p>\n<h2 id=\"vintage-do-repeat-yourself\"><a href=\"#vintage-do-repeat-yourself\"></a>Vintage: Do Repeat Yourself</h2>\n<p>Consider a blog page, where successively appear the article's title, its\nphoto, and its text at last. Given that a photo, depending your connection's\nquality, can be quite a PITA to load on mobile (and that the responsive image\nthing <a href=\"http://css-tricks.com/responsive-images-hard/\">is still a goddamn mess</a>),\nyou decide to put the photo below the text content so your readers can enjoy the\narticle even if the picture isn't done loading yet - even switching it for a\nlighter version in the process.</p>\n<p>In such a case, the best solution might as well be to duplicate the <code>img</code> tag,\nand to hide one or the other with a CSS <em>media query</em> depending on the screen\nsize. Here is a dummy example:</p>\n<pre><code class=\"language-html\">&#x3C;article>\n  &#x3C;h1>My awesome article&#x3C;/h1>\n\n  &#x3C;img src=\"/my/desktop/image.jpg\" class=\"img-desktop\" />\n\n  &#x3C;p>Drop a comment, mate&#x3C;/p>\n\n  &#x3C;img src=\"/my/mobile/image.jpg\" class=\"img-mobile\" />\n&#x3C;/article>\n</code></pre>\n<pre><code class=\"language-css\">.img-desktop {\n  /* The desktop image is hidden by default */\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  /* On \"big\" screens, we show the desktop image... */\n  .img-desktop {\n    display: block;\n  }\n\n  /* ...and hide the mobile image */\n  .img-mobile {\n    display: none;\n  }\n}\n</code></pre>\n<p>The most obvious drawback of such a solution is that content duplication means\noverweight. For purely textual stuff, depending on the size, it may be\ninsignificant. Here, I chose the worst-case scenario on purpose: an image\nshall never ever be loaded twice by our visitors. Let's cheat a bit with\nJavaScript:</p>\n<pre><code class=\"language-html\">&#x3C;article>\n  &#x3C;h1>My awesome article&#x3C;/h1>\n\n  &#x3C;!-- Those images won't be loaded since they have no src attribute -->\n  &#x3C;img data-src=\"/my/desktop/image.jpg\" class=\"img-desktop\" />\n\n  &#x3C;p>Drop a comment, mate&#x3C;/p>\n\n  &#x3C;img data-src=\"/my/mobile/image.jpg\" class=\"img-mobile\" />\n\n  &#x3C;noscript>\n    &#x3C;!-- This image will only be loaded if our visitor has disabled JS -->\n    &#x3C;img src=\"/my/mobile/image.jpg\" class=\"img-mobile img-noscript\" />\n  &#x3C;/noscript>\n&#x3C;/article>\n</code></pre>\n<pre><code class=\"language-css\">.img-desktop {\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  .img-desktop {\n    display: block;\n  }\n\n  .img-mobile {\n    display: none;\n  }\n}\n\n.img-noscript {\n  /* Let's override the desktop style to make sure\n     this image is displayed regardless of screen size */\n\n  display: block;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">var handleImages = function() {\n  // Let's load images with a data-src attribute,\n  // if they aren't yet (no src attribute)\n  // and they aren't hidden by CSS\n\n  [].forEach.call(document.querySelectorAll('img[data-src]:not([src])'), function(el) {\n    if (window.getComputedStyle(el).display != 'none') {\n      el.src = el.getAttribute('data-src');\n    }\n  });\n};\n\nwindow.addEventListener('load', handleImages);\nwindow.addEventListener('resize', handleImages);\n</code></pre>\n<p>This way, only the required images will be loaded with the page. The same goes\nwith <code>resize</code>; I'll admit it's kind of dirty, <code>matchMedia</code> would probably help\nus do better.</p>\n<p>For a visitor browsing without JavaScript, we only load the mobile image: I'm\nassuming that, since we are unable to define which version of the image is\nbest for them, it's wiser to go with the lightest.</p>\n<h2 id=\"js-ftw-enquirejs\"><a href=\"#js-ftw-enquirejs\"></a>JS FTW: enquire.js</h2>\n<p>This second solution could totally be achieved without third-party tools, but\nI'd like to introduce a little library of my liking I have used previously for\nsimilar cases. It is called <a href=\"http://wicky.nillia.ms/enquire.js/\">enquire.js</a>\nand allows binding callbacks to media queries:</p>\n<pre><code class=\"language-javascript\">enquire.register('screen and (min-width: 768px)', {\n  match: function() {\n    // The screen is 768px wide or above...\n  },\n\n  unmatch: function() {\n    // ...and here, 767px wide or below.\n    // The lib relies on matchMedia and matchMedia.addListener\n  }\n});\n</code></pre>\n<p>Pretty neat, isn't it? Let's go through our previous example again (the CSS is\nnow unnecessary):</p>\n<pre><code class=\"language-html\">&#x3C;article>\n  &#x3C;h1>My awesome article&#x3C;/h1>\n\n  &#x3C;img data-src=\"/my/desktop/image.jpg\" data-mobile-src=\"/my/mobile/image.jpg\" />\n\n  &#x3C;p>Drop a comment, mate&#x3C;/p>\n\n  &#x3C;noscript>\n    &#x3C;img src=\"/my/mobile/image.jpg\" />\n  &#x3C;/noscript>\n&#x3C;/article>\n</code></pre>\n<pre><code class=\"language-javascript\">var content = document.querySelector('p'),\n\n  switchImage = function(isMobile) {\n    var attr = isMobile ? 'data-mobile-src' : 'data-src';\n\n    [].forEach.call(document.querySelectorAll('img[' + attr + ']'), function(el) {\n      // We assign one source or the other to our image,\n      // triggering its loading if necessary.\n      el.src = el.getAttribute(attr);\n\n      // We also move it before or after the text content\n      content.parentNode.insertBefore(el, isMobile ? content.nextSibling : content);\n    });\n  };\n\nenquire.register('screen and (min-width: 768px)', function() {\n  switchImage(false);\n});\n\nenquire.register('screen and (max-width: 767px)', function() {\n  switchImage(true);\n});\n</code></pre>\n<p>We thus can easily handle our image's loading, as well as its position. I used\ntwo distinct handlers to make sure enquire does the job upon pageload as well,\nin any case (<code>unmatch</code> callbacks being called for resizing only, or so it\nseems: with a single handler, the image thus never appears if the page is\ninitially loaded with a screen under 768px).</p>\n<h2 id=\"thats-all-youve-got-bitch\"><a href=\"#thats-all-youve-got-bitch\"></a>That's all you've got, bitch?</h2>\n<p>We can also discuss different, moar marginal solutions, which are still worth\nquoting (given you seem to want it that bad).</p>\n<h3 id=\"foundation\"><a href=\"#foundation\"></a>Foundation</h3>\n<p><a href=\"http://foundation.zurb.com/\">Foundation</a> offers, in its fifth version (and\nmaybe even before, didn't check lol) some HTML syntactic sugar allowing to\nswitch contents for a given element (through JS).</p>\n<p>Not bad, I must say. Here it goes (from\n<a href=\"http://foundation.zurb.com/docs/components/interchange.html\">the docs</a>):</p>\n<blockquote>\n<p>We use the data-interchange attribute on a markup container (probably a div)\nto do this. Here's an example which loads up a small, static map on mobile, a\nlarger static map for medium-sized devices, and a full interactive Google map\non large display devices.</p>\n</blockquote>\n<pre><code class=\"language-html\">&#x3C;div data-interchange=\"[../examples/interchange/default.html, (small)],\n                       [../examples/interchange/medium.html, (medium)],\n                       [../examples/interchange/large.html, (large)]\">\n  &#x3C;div data-alert class=\"alert-box secondary radius\">\n    This is the default content.\n    &#x3C;a href=\"#\" class=\"close\">&#x26;times;&#x3C;/a>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p><code>small</code>, <code>medium</code> and <code>large</code> are just pretty names for given media queries\n(in <a href=\"http://foundation.zurb.com/docs/components/interchange.html\">the docs</a>,\nonce again. I insist.)</p>\n<h3 id=\"flexbox-not-you-david\"><a href=\"#flexbox-not-you-david\"></a>Flexbox (not you, David)</h3>\n<p>We also can, as judiciously pointed out by lionelB, take a closer\nlook at Flexbox, a new positioning paradigm that landed with CSS3.\n<a href=\"http://caniuse.com/#search=flexbox\">Compatibility</a> isn't quite satisfying yet\n(because of IE, what were the odds) but you can still get ready! You have\npretty much nothing to do besides defining a container:</p>\n<pre><code class=\"language-css\">.flex-container {\n  display: flex;\n\n  /* or */\n\n  display: inline-flex;\n}\n</code></pre>\n<p>...and assigning numbers to its children, Bangkok-style:</p>\n<pre><code class=\"language-css\">.title {\n  order: 1;\n}\n\n.content {\n  order: 2;\n}\n\n.image {\n  order: 3;\n}\n\n/*\nYou obviously were smart enough to put your image last in the DOM...\n...weren't you?\n*/\n\n@media screen and (min-width: 768px) {\n  .content {\n    order: 3;\n  }\n\n  .image {\n    order: 2;\n  }\n}\n</code></pre>\n<p>And there we are! No need to have graduated from Polly Pocket to understand\nhow such flexibility and code tidiness solve our problem in two goddamn\nseconds. But this is just the tip of the flexberg; there are a lot of great\nresources to walk yourself through it better than I ever could, like\n<a href=\"http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html\">this article</a>\nI shamelessly borrowed my snippets from.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\"></a>Conclusion</h2>\n<p>As you saw, I wasn't able to show you any really satisfying solution: to be\nable to control an element's position in the DOM relatively to a responsive\nwebdesign, you must either duplicate it and play hide'n'seek, or move it with\nJavaScript. I would therefore be glad for you to share your opinion, ideas or\nexperiences on this topic. That will give me something to read on my spare\ntime, and you will be doing something meaningful for once!</p>\n<p>Time for me to let you go back to your life. Our paths may cross again, who\nknows? Until that day comes, I wish you some happy coding!</p>\n","rawBody":"\nAlright, first things first, if you don't mind. Ever heard about **responsive\nwebdesign**? Yes? Good. You therefore may have encountered some pretty annoying\nuse case (I did). Whether you are a *mobile-first* adept or an old-fashioned\nprogressive degradator, you must have come to a point where you told yourself\nthis silly thing:\n\n> Would really be great if this element was here instead of there. But it\n> isn't.\n\nYour typical example for this is a slightly complex menu, where we would like\nto give the items a bit of reordering just above or below a certain screen\nsize. And we have to admit there is no miraculous way out of this.\n\nI can already hear the nasty boys scream and shout, saying that a better\nconception beforehand would have granted us better *markup* and spared us the\ntrouble. Although it's an easy thing to say, it turns out to be true in a\nnumber of cases (yes, I'm quite good at avoiding picking a side). However, if\nyou ever find yourself wading in these swamps, it probably means going back\nisn't an option anymore.\n\nAs fast as innovation in our profession goes, especially about anything\nmobile-related in general and web-related especially, it's quite likely that\nthe tricks I'm going to deliver are obsolete six months from now, and that\nthis article becomes increasingly popular again on Twitter, RTs kindly mocking\nthe pre-Columbian techniques we were limited to not so long ago. Heck knows, I\nmight just become a paradoxally decadent celebrity *à la* Rick Astley. In the\nmeantime, I have nothing better to share on the subject. If you do, I strongly\nrecommend spitting it out in the comments for everyone to enjoy. Well, are you\nready now? I'm waiting, you know!\n\n## Vintage: Do Repeat Yourself\n\nConsider a blog page, where successively appear the article's title, its\nphoto, and its text at last. Given that a photo, depending your connection's\nquality, can be quite a PITA to load on mobile (and that the responsive image\nthing [is still a goddamn mess](http://css-tricks.com/responsive-images-hard/)),\nyou decide to put the photo below the text content so your readers can enjoy the\narticle even if the picture isn't done loading yet - even switching it for a\nlighter version in the process.\n\nIn such a case, the best solution might as well be to duplicate the `img` tag,\nand to hide one or the other with a CSS *media query* depending on the screen\nsize. Here is a dummy example:\n\n```html\n<article>\n  <h1>My awesome article</h1>\n\n  <img src=\"/my/desktop/image.jpg\" class=\"img-desktop\" />\n\n  <p>Drop a comment, mate</p>\n\n  <img src=\"/my/mobile/image.jpg\" class=\"img-mobile\" />\n</article>\n```\n\n```css\n.img-desktop {\n  /* The desktop image is hidden by default */\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  /* On \"big\" screens, we show the desktop image... */\n  .img-desktop {\n    display: block;\n  }\n\n  /* ...and hide the mobile image */\n  .img-mobile {\n    display: none;\n  }\n}\n```\n\nThe most obvious drawback of such a solution is that content duplication means\noverweight. For purely textual stuff, depending on the size, it may be\ninsignificant. Here, I chose the worst-case scenario on purpose: an image\nshall never ever be loaded twice by our visitors. Let's cheat a bit with\nJavaScript:\n\n```html\n<article>\n  <h1>My awesome article</h1>\n\n  <!-- Those images won't be loaded since they have no src attribute -->\n  <img data-src=\"/my/desktop/image.jpg\" class=\"img-desktop\" />\n\n  <p>Drop a comment, mate</p>\n\n  <img data-src=\"/my/mobile/image.jpg\" class=\"img-mobile\" />\n\n  <noscript>\n    <!-- This image will only be loaded if our visitor has disabled JS -->\n    <img src=\"/my/mobile/image.jpg\" class=\"img-mobile img-noscript\" />\n  </noscript>\n</article>\n```\n\n```css\n.img-desktop {\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  .img-desktop {\n    display: block;\n  }\n\n  .img-mobile {\n    display: none;\n  }\n}\n\n.img-noscript {\n  /* Let's override the desktop style to make sure\n     this image is displayed regardless of screen size */\n\n  display: block;\n}\n```\n\n```javascript\nvar handleImages = function() {\n  // Let's load images with a data-src attribute,\n  // if they aren't yet (no src attribute)\n  // and they aren't hidden by CSS\n\n  [].forEach.call(document.querySelectorAll('img[data-src]:not([src])'), function(el) {\n    if (window.getComputedStyle(el).display != 'none') {\n      el.src = el.getAttribute('data-src');\n    }\n  });\n};\n\nwindow.addEventListener('load', handleImages);\nwindow.addEventListener('resize', handleImages);\n```\n\nThis way, only the required images will be loaded with the page. The same goes\nwith `resize`; I'll admit it's kind of dirty, `matchMedia` would probably help\nus do better.\n\nFor a visitor browsing without JavaScript, we only load the mobile image: I'm\nassuming that, since we are unable to define which version of the image is\nbest for them, it's wiser to go with the lightest.\n\n## JS FTW: enquire.js\n\nThis second solution could totally be achieved without third-party tools, but\nI'd like to introduce a little library of my liking I have used previously for\nsimilar cases. It is called [enquire.js](http://wicky.nillia.ms/enquire.js/)\nand allows binding callbacks to media queries:\n\n```javascript\nenquire.register('screen and (min-width: 768px)', {\n  match: function() {\n    // The screen is 768px wide or above...\n  },\n\n  unmatch: function() {\n    // ...and here, 767px wide or below.\n    // The lib relies on matchMedia and matchMedia.addListener\n  }\n});\n```\n\nPretty neat, isn't it? Let's go through our previous example again (the CSS is\nnow unnecessary):\n\n```html\n<article>\n  <h1>My awesome article</h1>\n\n  <img data-src=\"/my/desktop/image.jpg\" data-mobile-src=\"/my/mobile/image.jpg\" />\n\n  <p>Drop a comment, mate</p>\n\n  <noscript>\n    <img src=\"/my/mobile/image.jpg\" />\n  </noscript>\n</article>\n```\n\n```javascript\nvar content = document.querySelector('p'),\n\n  switchImage = function(isMobile) {\n    var attr = isMobile ? 'data-mobile-src' : 'data-src';\n\n    [].forEach.call(document.querySelectorAll('img[' + attr + ']'), function(el) {\n      // We assign one source or the other to our image,\n      // triggering its loading if necessary.\n      el.src = el.getAttribute(attr);\n\n      // We also move it before or after the text content\n      content.parentNode.insertBefore(el, isMobile ? content.nextSibling : content);\n    });\n  };\n\nenquire.register('screen and (min-width: 768px)', function() {\n  switchImage(false);\n});\n\nenquire.register('screen and (max-width: 767px)', function() {\n  switchImage(true);\n});\n```\n\nWe thus can easily handle our image's loading, as well as its position. I used\ntwo distinct handlers to make sure enquire does the job upon pageload as well,\nin any case (`unmatch` callbacks being called for resizing only, or so it\nseems: with a single handler, the image thus never appears if the page is\ninitially loaded with a screen under 768px).\n\n## That's all you've got, bitch?\n\nWe can also discuss different, moar marginal solutions, which are still worth\nquoting (given you seem to want it that bad).\n\n### Foundation\n\n[Foundation](http://foundation.zurb.com/) offers, in its fifth version (and\nmaybe even before, didn't check lol) some HTML syntactic sugar allowing to\nswitch contents for a given element (through JS).\n\nNot bad, I must say. Here it goes (from\n[the docs](http://foundation.zurb.com/docs/components/interchange.html)):\n\n> We use the data-interchange attribute on a markup container (probably a div)\n> to do this. Here's an example which loads up a small, static map on mobile, a\n> larger static map for medium-sized devices, and a full interactive Google map\n> on large display devices.\n\n```html\n<div data-interchange=\"[../examples/interchange/default.html, (small)],\n                       [../examples/interchange/medium.html, (medium)],\n                       [../examples/interchange/large.html, (large)]\">\n  <div data-alert class=\"alert-box secondary radius\">\n    This is the default content.\n    <a href=\"#\" class=\"close\">&times;</a>\n  </div>\n</div>\n```\n\n`small`, `medium` and `large` are just pretty names for given media queries\n(in [the docs](http://foundation.zurb.com/docs/components/interchange.html),\nonce again. I insist.)\n\n### Flexbox (not you, David)\n\nWe also can, as judiciously pointed out by lionelB, take a closer\nlook at Flexbox, a new positioning paradigm that landed with CSS3.\n[Compatibility](http://caniuse.com/#search=flexbox) isn't quite satisfying yet\n(because of IE, what were the odds) but you can still get ready! You have\npretty much nothing to do besides defining a container:\n\n```css\n.flex-container {\n  display: flex;\n\n  /* or */\n\n  display: inline-flex;\n}\n```\n\n...and assigning numbers to its children, Bangkok-style:\n\n```css\n.title {\n  order: 1;\n}\n\n.content {\n  order: 2;\n}\n\n.image {\n  order: 3;\n}\n\n/*\nYou obviously were smart enough to put your image last in the DOM...\n...weren't you?\n*/\n\n@media screen and (min-width: 768px) {\n  .content {\n    order: 3;\n  }\n\n  .image {\n    order: 2;\n  }\n}\n```\n\nAnd there we are! No need to have graduated from Polly Pocket to understand\nhow such flexibility and code tidiness solve our problem in two goddamn\nseconds. But this is just the tip of the flexberg; there are a lot of great\nresources to walk yourself through it better than I ever could, like\n[this article](http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html)\nI shamelessly borrowed my snippets from.\n\n## Conclusion\n\nAs you saw, I wasn't able to show you any really satisfying solution: to be\nable to control an element's position in the DOM relatively to a responsive\nwebdesign, you must either duplicate it and play hide'n'seek, or move it with\nJavaScript. I would therefore be glad for you to share your opinion, ideas or\nexperiences on this topic. That will give me something to read on my spare\ntime, and you will be doing something meaningful for once!\n\nTime for me to let you go back to your life. Our paths may cross again, who\nknows? Until that day comes, I wish you some happy coding!\n","raw":"---\ndate: \"2013-12-26\"\ntitle: Responsive webdesign and DOM structure\ntags:\n  - responsive\n  - html\n  - javascript\nauthors:\n  - neemzy\n---\n\nAlright, first things first, if you don't mind. Ever heard about **responsive\nwebdesign**? Yes? Good. You therefore may have encountered some pretty annoying\nuse case (I did). Whether you are a *mobile-first* adept or an old-fashioned\nprogressive degradator, you must have come to a point where you told yourself\nthis silly thing:\n\n> Would really be great if this element was here instead of there. But it\n> isn't.\n\nYour typical example for this is a slightly complex menu, where we would like\nto give the items a bit of reordering just above or below a certain screen\nsize. And we have to admit there is no miraculous way out of this.\n\nI can already hear the nasty boys scream and shout, saying that a better\nconception beforehand would have granted us better *markup* and spared us the\ntrouble. Although it's an easy thing to say, it turns out to be true in a\nnumber of cases (yes, I'm quite good at avoiding picking a side). However, if\nyou ever find yourself wading in these swamps, it probably means going back\nisn't an option anymore.\n\nAs fast as innovation in our profession goes, especially about anything\nmobile-related in general and web-related especially, it's quite likely that\nthe tricks I'm going to deliver are obsolete six months from now, and that\nthis article becomes increasingly popular again on Twitter, RTs kindly mocking\nthe pre-Columbian techniques we were limited to not so long ago. Heck knows, I\nmight just become a paradoxally decadent celebrity *à la* Rick Astley. In the\nmeantime, I have nothing better to share on the subject. If you do, I strongly\nrecommend spitting it out in the comments for everyone to enjoy. Well, are you\nready now? I'm waiting, you know!\n\n## Vintage: Do Repeat Yourself\n\nConsider a blog page, where successively appear the article's title, its\nphoto, and its text at last. Given that a photo, depending your connection's\nquality, can be quite a PITA to load on mobile (and that the responsive image\nthing [is still a goddamn mess](http://css-tricks.com/responsive-images-hard/)),\nyou decide to put the photo below the text content so your readers can enjoy the\narticle even if the picture isn't done loading yet - even switching it for a\nlighter version in the process.\n\nIn such a case, the best solution might as well be to duplicate the `img` tag,\nand to hide one or the other with a CSS *media query* depending on the screen\nsize. Here is a dummy example:\n\n```html\n<article>\n  <h1>My awesome article</h1>\n\n  <img src=\"/my/desktop/image.jpg\" class=\"img-desktop\" />\n\n  <p>Drop a comment, mate</p>\n\n  <img src=\"/my/mobile/image.jpg\" class=\"img-mobile\" />\n</article>\n```\n\n```css\n.img-desktop {\n  /* The desktop image is hidden by default */\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  /* On \"big\" screens, we show the desktop image... */\n  .img-desktop {\n    display: block;\n  }\n\n  /* ...and hide the mobile image */\n  .img-mobile {\n    display: none;\n  }\n}\n```\n\nThe most obvious drawback of such a solution is that content duplication means\noverweight. For purely textual stuff, depending on the size, it may be\ninsignificant. Here, I chose the worst-case scenario on purpose: an image\nshall never ever be loaded twice by our visitors. Let's cheat a bit with\nJavaScript:\n\n```html\n<article>\n  <h1>My awesome article</h1>\n\n  <!-- Those images won't be loaded since they have no src attribute -->\n  <img data-src=\"/my/desktop/image.jpg\" class=\"img-desktop\" />\n\n  <p>Drop a comment, mate</p>\n\n  <img data-src=\"/my/mobile/image.jpg\" class=\"img-mobile\" />\n\n  <noscript>\n    <!-- This image will only be loaded if our visitor has disabled JS -->\n    <img src=\"/my/mobile/image.jpg\" class=\"img-mobile img-noscript\" />\n  </noscript>\n</article>\n```\n\n```css\n.img-desktop {\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  .img-desktop {\n    display: block;\n  }\n\n  .img-mobile {\n    display: none;\n  }\n}\n\n.img-noscript {\n  /* Let's override the desktop style to make sure\n     this image is displayed regardless of screen size */\n\n  display: block;\n}\n```\n\n```javascript\nvar handleImages = function() {\n  // Let's load images with a data-src attribute,\n  // if they aren't yet (no src attribute)\n  // and they aren't hidden by CSS\n\n  [].forEach.call(document.querySelectorAll('img[data-src]:not([src])'), function(el) {\n    if (window.getComputedStyle(el).display != 'none') {\n      el.src = el.getAttribute('data-src');\n    }\n  });\n};\n\nwindow.addEventListener('load', handleImages);\nwindow.addEventListener('resize', handleImages);\n```\n\nThis way, only the required images will be loaded with the page. The same goes\nwith `resize`; I'll admit it's kind of dirty, `matchMedia` would probably help\nus do better.\n\nFor a visitor browsing without JavaScript, we only load the mobile image: I'm\nassuming that, since we are unable to define which version of the image is\nbest for them, it's wiser to go with the lightest.\n\n## JS FTW: enquire.js\n\nThis second solution could totally be achieved without third-party tools, but\nI'd like to introduce a little library of my liking I have used previously for\nsimilar cases. It is called [enquire.js](http://wicky.nillia.ms/enquire.js/)\nand allows binding callbacks to media queries:\n\n```javascript\nenquire.register('screen and (min-width: 768px)', {\n  match: function() {\n    // The screen is 768px wide or above...\n  },\n\n  unmatch: function() {\n    // ...and here, 767px wide or below.\n    // The lib relies on matchMedia and matchMedia.addListener\n  }\n});\n```\n\nPretty neat, isn't it? Let's go through our previous example again (the CSS is\nnow unnecessary):\n\n```html\n<article>\n  <h1>My awesome article</h1>\n\n  <img data-src=\"/my/desktop/image.jpg\" data-mobile-src=\"/my/mobile/image.jpg\" />\n\n  <p>Drop a comment, mate</p>\n\n  <noscript>\n    <img src=\"/my/mobile/image.jpg\" />\n  </noscript>\n</article>\n```\n\n```javascript\nvar content = document.querySelector('p'),\n\n  switchImage = function(isMobile) {\n    var attr = isMobile ? 'data-mobile-src' : 'data-src';\n\n    [].forEach.call(document.querySelectorAll('img[' + attr + ']'), function(el) {\n      // We assign one source or the other to our image,\n      // triggering its loading if necessary.\n      el.src = el.getAttribute(attr);\n\n      // We also move it before or after the text content\n      content.parentNode.insertBefore(el, isMobile ? content.nextSibling : content);\n    });\n  };\n\nenquire.register('screen and (min-width: 768px)', function() {\n  switchImage(false);\n});\n\nenquire.register('screen and (max-width: 767px)', function() {\n  switchImage(true);\n});\n```\n\nWe thus can easily handle our image's loading, as well as its position. I used\ntwo distinct handlers to make sure enquire does the job upon pageload as well,\nin any case (`unmatch` callbacks being called for resizing only, or so it\nseems: with a single handler, the image thus never appears if the page is\ninitially loaded with a screen under 768px).\n\n## That's all you've got, bitch?\n\nWe can also discuss different, moar marginal solutions, which are still worth\nquoting (given you seem to want it that bad).\n\n### Foundation\n\n[Foundation](http://foundation.zurb.com/) offers, in its fifth version (and\nmaybe even before, didn't check lol) some HTML syntactic sugar allowing to\nswitch contents for a given element (through JS).\n\nNot bad, I must say. Here it goes (from\n[the docs](http://foundation.zurb.com/docs/components/interchange.html)):\n\n> We use the data-interchange attribute on a markup container (probably a div)\n> to do this. Here's an example which loads up a small, static map on mobile, a\n> larger static map for medium-sized devices, and a full interactive Google map\n> on large display devices.\n\n```html\n<div data-interchange=\"[../examples/interchange/default.html, (small)],\n                       [../examples/interchange/medium.html, (medium)],\n                       [../examples/interchange/large.html, (large)]\">\n  <div data-alert class=\"alert-box secondary radius\">\n    This is the default content.\n    <a href=\"#\" class=\"close\">&times;</a>\n  </div>\n</div>\n```\n\n`small`, `medium` and `large` are just pretty names for given media queries\n(in [the docs](http://foundation.zurb.com/docs/components/interchange.html),\nonce again. I insist.)\n\n### Flexbox (not you, David)\n\nWe also can, as judiciously pointed out by lionelB, take a closer\nlook at Flexbox, a new positioning paradigm that landed with CSS3.\n[Compatibility](http://caniuse.com/#search=flexbox) isn't quite satisfying yet\n(because of IE, what were the odds) but you can still get ready! You have\npretty much nothing to do besides defining a container:\n\n```css\n.flex-container {\n  display: flex;\n\n  /* or */\n\n  display: inline-flex;\n}\n```\n\n...and assigning numbers to its children, Bangkok-style:\n\n```css\n.title {\n  order: 1;\n}\n\n.content {\n  order: 2;\n}\n\n.image {\n  order: 3;\n}\n\n/*\nYou obviously were smart enough to put your image last in the DOM...\n...weren't you?\n*/\n\n@media screen and (min-width: 768px) {\n  .content {\n    order: 3;\n  }\n\n  .image {\n    order: 2;\n  }\n}\n```\n\nAnd there we are! No need to have graduated from Polly Pocket to understand\nhow such flexibility and code tidiness solve our problem in two goddamn\nseconds. But this is just the tip of the flexberg; there are a lot of great\nresources to walk yourself through it better than I ever could, like\n[this article](http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html)\nI shamelessly borrowed my snippets from.\n\n## Conclusion\n\nAs you saw, I wasn't able to show you any really satisfying solution: to be\nable to control an element's position in the DOM relatively to a responsive\nwebdesign, you must either duplicate it and play hide'n'seek, or move it with\nJavaScript. I would therefore be glad for you to share your opinion, ideas or\nexperiences on this topic. That will give me something to read on my spare\ntime, and you will be doing something meaningful for once!\n\nTime for me to let you go back to your life. Our paths may cross again, who\nknows? Until that day comes, I wish you some happy coding!\n","__filename":"en/articles/html/responsive-dom/index.md","__url":"/en/articles/html/responsive-dom/","__resourceUrl":"/en/articles/html/responsive-dom/index.html","__dataUrl":"/en/articles/html/responsive-dom/index.html.4866dabfe18ea444a1faffffe81985ef.json"}